
Inverter_Nd_LiquidMeas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800b458  0800b458  0000c458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba64  0800ba64  0000d20c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba64  0800ba64  0000ca64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba6c  0800ba6c  0000d20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800ba6c  0800ba6c  0000ca6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba7c  0800ba7c  0000ca7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800ba80  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009768  2000020c  0800bc8c  0000d20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009974  0800bc8c  0000d974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029440  00000000  00000000  0000d23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000633e  00000000  00000000  0003667c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0003c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001321  00000000  00000000  0003e2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022980  00000000  00000000  0003f5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000272af  00000000  00000000  00061f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b334c  00000000  00000000  00089220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c56c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007890  00000000  00000000  0013c5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00143e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b440 	.word	0x0800b440

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	0800b440 	.word	0x0800b440

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_Z20ControlnDDisplayTaskPv>:
#include "Sensor/sensor_liquidMeas.hpp"

sensor_liquidMeas::liquidSensor liquidSensor(&hadc1);
HMI::DWIN LCD(&HMI_USART1);

void ControlnDDisplayTask(void *pvParameters) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

	while (1) {
		System_Rtos::delay(500);
 8000eb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000eb4:	f000 ff00 	bl	8001cb8 <_ZN11System_Rtos5delayEm>
 8000eb8:	e7fa      	b.n	8000eb0 <_Z20ControlnDDisplayTaskPv+0x8>
	...

08000ebc <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d10c      	bne.n	8000ee6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d107      	bne.n	8000ee6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
sensor_liquidMeas::liquidSensor liquidSensor(&hadc1);
 8000ed6:	4906      	ldr	r1, [pc, #24]	@ (8000ef0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000ed8:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000eda:	f000 fedd 	bl	8001c98 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef>
HMI::DWIN LCD(&HMI_USART1);
 8000ede:	4906      	ldr	r1, [pc, #24]	@ (8000ef8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000ee0:	4806      	ldr	r0, [pc, #24]	@ (8000efc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000ee2:	f000 f8dd 	bl	80010a0 <_ZN3HMI4DWINC1EP20__UART_HandleTypeDef>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000135c 	.word	0x2000135c
 8000ef4:	20000228 	.word	0x20000228
 8000ef8:	20001438 	.word	0x20001438
 8000efc:	2000022c 	.word	0x2000022c

08000f00 <_GLOBAL__sub_I_liquidSensor>:
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff ffd7 	bl	8000ebc <_Z41__static_initialization_and_destruction_0ii>
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_Z13InterfaceTaskPv>:
 *      Author: user
 */

#include "app_main.hpp"
#include "System/System_Rtos.hpp"
void InterfaceTask(void *pvParameters) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

	while (1) {
		System_Rtos::delay(500);
 8000f18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f1c:	f000 fecc 	bl	8001cb8 <_ZN11System_Rtos5delayEm>
 8000f20:	e7fa      	b.n	8000f18 <_Z13InterfaceTaskPv+0x8>
	...

08000f24 <_Z9ModemTaskPv>:
#include "System/System_Rtos.hpp"


Modem::simA7672 simA7672(&GSM_USART2);

void ModemTask(void *pvParameters) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f30:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f34:	6018      	str	r0, [r3, #0]

	simA7672.init();
 8000f36:	4814      	ldr	r0, [pc, #80]	@ (8000f88 <_Z9ModemTaskPv+0x64>)
 8000f38:	f000 f920 	bl	800117c <_ZN5Modem8simA76724initEv>
		char timezone[100];
		char pin[100];
		char networkStat[100];
		char quality[20];

        simA7672.getTimeDate(time, date, timezone);
 8000f3c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000f40:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8000f44:	f107 0108 	add.w	r1, r7, #8
 8000f48:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <_Z9ModemTaskPv+0x64>)
 8000f4a:	f000 fc39 	bl	80017c0 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_>
        simA7672.getSim(pin);
 8000f4e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000f52:	4619      	mov	r1, r3
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <_Z9ModemTaskPv+0x64>)
 8000f56:	f000 fa3d 	bl	80013d4 <_ZN5Modem8simA76726getSimEPc>
        simA7672.getNetwork(networkStat);
 8000f5a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <_Z9ModemTaskPv+0x64>)
 8000f62:	f000 faa3 	bl	80014ac <_ZN5Modem8simA767210getNetworkEPc>
        simA7672.getSignalQ(quality);
 8000f66:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <_Z9ModemTaskPv+0x64>)
 8000f6e:	f000 fb9d 	bl	80016ac <_ZN5Modem8simA767210getSignalQEPc>

		HAL_GPIO_TogglePin(alive_led_GPIO_Port, alive_led_Pin);
 8000f72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <_Z9ModemTaskPv+0x68>)
 8000f78:	f002 fd61 	bl	8003a3e <HAL_GPIO_TogglePin>
		System_Rtos::delay(500);
 8000f7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f80:	f000 fe9a 	bl	8001cb8 <_ZN11System_Rtos5delayEm>


	}
 8000f84:	bf00      	nop
 8000f86:	e7d9      	b.n	8000f3c <_Z9ModemTaskPv+0x18>
 8000f88:	20000230 	.word	0x20000230
 8000f8c:	40020800 	.word	0x40020800

08000f90 <_Z41__static_initialization_and_destruction_0ii>:

}
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d108      	bne.n	8000fb2 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d103      	bne.n	8000fb2 <_Z41__static_initialization_and_destruction_0ii+0x22>
Modem::simA7672 simA7672(&GSM_USART2);
 8000faa:	4904      	ldr	r1, [pc, #16]	@ (8000fbc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000fac:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000fae:	f000 f887 	bl	80010c0 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20001480 	.word	0x20001480
 8000fc0:	20000230 	.word	0x20000230

08000fc4 <_GLOBAL__sub_I_simA7672>:
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff ffdf 	bl	8000f90 <_Z41__static_initialization_and_destruction_0ii>
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_Z11app_mainCppv>:




void app_mainCpp()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

	ModemTaskHandler.createTask();
 8000fd8:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <_Z11app_mainCppv+0x1c>)
 8000fda:	f000 fea4 	bl	8001d26 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
   InterfaceTaskHandler.createTask();
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <_Z11app_mainCppv+0x20>)
 8000fe0:	f000 fea1 	bl	8001d26 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>
   ControlnDDisplayTaskHandler.createTask();
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <_Z11app_mainCppv+0x24>)
 8000fe6:	f000 fe9e 	bl	8001d26 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200012bc 	.word	0x200012bc
 8000ff4:	200012e0 	.word	0x200012e0
 8000ff8:	20001304 	.word	0x20001304

08000ffc <app_mainC>:
// All the functions that need to be used in C files transport from here
extern "C"
{

    void app_mainC()
    {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    	app_mainCpp();
 8001000:	f7ff ffe8 	bl	8000fd4 <_Z11app_mainCppv>
    }
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <_Z41__static_initialization_and_destruction_0ii>:


}
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d125      	bne.n	8001064 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800101e:	4293      	cmp	r3, r2
 8001020:	d120      	bne.n	8001064 <_Z41__static_initialization_and_destruction_0ii+0x5c>
#define _StackSize_Modem 512
#define _StackSize_Interface 256
#define _StackSize_ControlnDDisplay 256


System_Rtos::freertos_Tasks ModemTaskHandler(ModemTask,"Modem",_StackSize_Modem, (void*) 1,24);
 8001022:	2318      	movs	r3, #24
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	2301      	movs	r3, #1
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800102e:	4a0f      	ldr	r2, [pc, #60]	@ (800106c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001030:	490f      	ldr	r1, [pc, #60]	@ (8001070 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001032:	4810      	ldr	r0, [pc, #64]	@ (8001074 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001034:	f000 fe56 	bl	8001ce4 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks InterfaceTaskHandler(InterfaceTask,"Interface",_StackSize_Interface, (void*) 1,24);
 8001038:	2318      	movs	r3, #24
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	2301      	movs	r3, #1
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001044:	4a0c      	ldr	r2, [pc, #48]	@ (8001078 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001048:	480d      	ldr	r0, [pc, #52]	@ (8001080 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800104a:	f000 fe4b 	bl	8001ce4 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
System_Rtos::freertos_Tasks ControlnDDisplayTaskHandler(ControlnDDisplayTask,"ControlDis",_StackSize_ControlnDDisplay, (void*) 1,24);
 800104e:	2318      	movs	r3, #24
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	2301      	movs	r3, #1
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800105c:	490a      	ldr	r1, [pc, #40]	@ (8001088 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800105e:	480b      	ldr	r0, [pc, #44]	@ (800108c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001060:	f000 fe40 	bl	8001ce4 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	0800b458 	.word	0x0800b458
 8001070:	08000f25 	.word	0x08000f25
 8001074:	200012bc 	.word	0x200012bc
 8001078:	0800b460 	.word	0x0800b460
 800107c:	08000f11 	.word	0x08000f11
 8001080:	200012e0 	.word	0x200012e0
 8001084:	0800b46c 	.word	0x0800b46c
 8001088:	08000ea9 	.word	0x08000ea9
 800108c:	20001304 	.word	0x20001304

08001090 <_GLOBAL__sub_I_ModemTaskHandler>:
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
 8001094:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff ffb5 	bl	8001008 <_Z41__static_initialization_and_destruction_0ii>
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN3HMI4DWINC1EP20__UART_HandleTypeDef>:

namespace HMI {

union DWIN::MIX_UWORD DWIN::convert_16bit_to_8bit;

DWIN::DWIN(UART_HandleTypeDef *huart) : serial_(huart){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6839      	ldr	r1, [r7, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 ffcf 	bl	8002052 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>

}
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef>:
struct simA7672::classInstanceRecorder simA7672::ClassInstances[numberofuart] =
		{ nullptr };

uint8_t simA7672::ClassInstanceIncrementer = 0;

simA7672::simA7672(UART_HandleTypeDef *huart) :
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
				huart), checking() {
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d2:	461a      	mov	r2, r3
 80010d4:	2100      	movs	r1, #0
 80010d6:	f007 fff8 	bl	80090ca <memset>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010e0:	4618      	mov	r0, r3
 80010e2:	2364      	movs	r3, #100	@ 0x64
 80010e4:	461a      	mov	r2, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	f007 ffef 	bl	80090ca <memset>
		GlobalTxBufs { simA7672::Txbuffer }, GlobalRxBufs { simA7672::Rxbuffer }, serial_(
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80010f8:	6653      	str	r3, [r2, #100]	@ 0x64
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001102:	6693      	str	r3, [r2, #104]	@ 0x68
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 800110a:	3304      	adds	r3, #4
 800110c:	6839      	ldr	r1, [r7, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f000 ff9f 	bl	8002052 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>
				huart), checking() {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 800111a:	3308      	adds	r3, #8
 800111c:	4618      	mov	r0, r3
 800111e:	f000 ffe7 	bl	80020f0 <_ZN10System_sys16Parsing_CheckingC1Ev>

	simA7672::ClassInstances[ClassInstanceIncrementer].huart = huart;
 8001122:	4b12      	ldr	r3, [pc, #72]	@ (800116c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xac>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	4a11      	ldr	r2, [pc, #68]	@ (8001170 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb0>)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	simA7672::ClassInstances[ClassInstanceIncrementer].Instance = this;
 8001130:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xac>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb0>)
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	605a      	str	r2, [r3, #4]

	simA7672::ClassInstanceIncrementer++;
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xac>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xac>)
 8001148:	701a      	strb	r2, [r3, #0]
	if (simA7672::ClassInstanceIncrementer > numberofuart) {
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xac>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d902      	bls.n	8001158 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0x98>
		simA7672::ClassInstanceIncrementer = 0;
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
	}

	setModemCallback(simA7672::RxCBStatic, simA7672::TxCBStatic);
 8001158:	4906      	ldr	r1, [pc, #24]	@ (8001174 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb4>)
 800115a:	4807      	ldr	r0, [pc, #28]	@ (8001178 <_ZN5Modem8simA7672C1EP20__UART_HandleTypeDef+0xb8>)
 800115c:	f000 fdfe 	bl	8001d5c <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>

}
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20001340 	.word	0x20001340
 8001170:	20001328 	.word	0x20001328
 8001174:	08001c85 	.word	0x08001c85
 8001178:	08001c21 	.word	0x08001c21

0800117c <_ZN5Modem8simA76724initEv>:

enum simA7672::status simA7672::init() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
	status stat = simA7672_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]

	//Run 3 times
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001188:	2301      	movs	r3, #1
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	230a      	movs	r3, #10
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001194:	2204      	movs	r2, #4
 8001196:	4986      	ldr	r1, [pc, #536]	@ (80013b0 <_ZN5Modem8simA76724initEv+0x234>)
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 fb95 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800119e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a2:	2100      	movs	r1, #0
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 fc50 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 80011ae:	2301      	movs	r3, #1
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	230a      	movs	r3, #10
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	2204      	movs	r2, #4
 80011bc:	497c      	ldr	r1, [pc, #496]	@ (80013b0 <_ZN5Modem8simA76724initEv+0x234>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fb82 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80011c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c8:	2100      	movs	r1, #0
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fc3d 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	230a      	movs	r3, #10
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e0:	2204      	movs	r2, #4
 80011e2:	4973      	ldr	r1, [pc, #460]	@ (80013b0 <_ZN5Modem8simA76724initEv+0x234>)
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fb6f 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80011ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ee:	2100      	movs	r1, #0
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 fc2a 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80011f6:	4603      	mov	r3, r0
 80011f8:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCRESET, sizeof(atcmd_ATCRESET) - 1, 1000, _LF, CMD_mode);
 80011fa:	2301      	movs	r3, #1
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	230a      	movs	r3, #10
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001206:	220b      	movs	r2, #11
 8001208:	496a      	ldr	r1, [pc, #424]	@ (80013b4 <_ZN5Modem8simA76724initEv+0x238>)
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fb5c 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001214:	2100      	movs	r1, #0
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 fc17 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]

	System_Rtos::delay(30000);
 8001220:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001224:	f000 fd48 	bl	8001cb8 <_ZN11System_Rtos5delayEm>

	/*After reset send two AT just to make gsm responsive*/
	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001228:	2301      	movs	r3, #1
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	230a      	movs	r3, #10
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001234:	2204      	movs	r2, #4
 8001236:	495e      	ldr	r1, [pc, #376]	@ (80013b0 <_ZN5Modem8simA76724initEv+0x234>)
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fb45 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800123e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001242:	2100      	movs	r1, #0
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 fc00 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800124a:	4603      	mov	r3, r0
 800124c:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 800124e:	2301      	movs	r3, #1
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	230a      	movs	r3, #10
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125a:	2204      	movs	r2, #4
 800125c:	4954      	ldr	r1, [pc, #336]	@ (80013b0 <_ZN5Modem8simA76724initEv+0x234>)
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fb32 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001268:	2100      	movs	r1, #0
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fbed 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT, sizeof(atcmd_AT) - 1, 1000, _LF, CMD_mode);
 8001274:	2301      	movs	r3, #1
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	230a      	movs	r3, #10
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001280:	2204      	movs	r2, #4
 8001282:	494b      	ldr	r1, [pc, #300]	@ (80013b0 <_ZN5Modem8simA76724initEv+0x234>)
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fb1f 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800128a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800128e:	2100      	movs	r1, #0
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 fbda 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_AT_F0, sizeof(atcmd_AT_F0) - 1, 1000, _LF, CMD_mode);
 800129a:	2301      	movs	r3, #1
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	230a      	movs	r3, #10
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a6:	2208      	movs	r2, #8
 80012a8:	4943      	ldr	r1, [pc, #268]	@ (80013b8 <_ZN5Modem8simA76724initEv+0x23c>)
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fb0c 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80012b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b4:	2100      	movs	r1, #0
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fbc7 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATE1, sizeof(atcmd_ATE1) - 1, 1000, _LF, CMD_mode);
 80012c0:	2301      	movs	r3, #1
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	230a      	movs	r3, #10
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012cc:	2206      	movs	r2, #6
 80012ce:	493b      	ldr	r1, [pc, #236]	@ (80013bc <_ZN5Modem8simA76724initEv+0x240>)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 faf9 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80012d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fbb4 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCREG, sizeof(atcmd_ATCREG) - 1, 1000, _LF, CMD_mode);
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	230a      	movs	r3, #10
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f2:	220b      	movs	r2, #11
 80012f4:	4932      	ldr	r1, [pc, #200]	@ (80013c0 <_ZN5Modem8simA76724initEv+0x244>)
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fae6 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80012fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001300:	2100      	movs	r1, #0
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 fba1 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001308:	4603      	mov	r3, r0
 800130a:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCPMS, sizeof(atcmd_ATCPMS) - 1, 1000, _LF, CMD_mode);
 800130c:	2301      	movs	r3, #1
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	230a      	movs	r3, #10
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001318:	2218      	movs	r2, #24
 800131a:	492a      	ldr	r1, [pc, #168]	@ (80013c4 <_ZN5Modem8simA76724initEv+0x248>)
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fad3 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001326:	2100      	movs	r1, #0
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fb8e 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCOPS, sizeof(atcmd_ATCOPS) - 1, 1000, _LF, CMD_mode);
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	230a      	movs	r3, #10
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133e:	220b      	movs	r2, #11
 8001340:	4921      	ldr	r1, [pc, #132]	@ (80013c8 <_ZN5Modem8simA76724initEv+0x24c>)
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fac0 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800134c:	2100      	movs	r1, #0
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fb7b 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCMGF, sizeof(atcmd_ATCMGF) - 1, 1000, _LF, CMD_mode);
 8001358:	2301      	movs	r3, #1
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	230a      	movs	r3, #10
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001364:	220b      	movs	r2, #11
 8001366:	4919      	ldr	r1, [pc, #100]	@ (80013cc <_ZN5Modem8simA76724initEv+0x250>)
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 faad 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 800136e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001372:	2100      	movs	r1, #0
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 fb68 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]

	PrepRxTx(atcmd_ATCGATT, sizeof(atcmd_ATCGATT) - 1, 1000, _LF, CMD_mode);
 800137e:	2301      	movs	r3, #1
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	230a      	movs	r3, #10
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	220c      	movs	r2, #12
 800138c:	4910      	ldr	r1, [pc, #64]	@ (80013d0 <_ZN5Modem8simA76724initEv+0x254>)
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fa9a 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 8001394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001398:	2100      	movs	r1, #0
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fb55 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]

	return stat;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]

}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0800b5d4 	.word	0x0800b5d4
 80013b4:	0800b5dc 	.word	0x0800b5dc
 80013b8:	0800b668 	.word	0x0800b668
 80013bc:	0800b674 	.word	0x0800b674
 80013c0:	0800b5e8 	.word	0x0800b5e8
 80013c4:	0800b5f4 	.word	0x0800b5f4
 80013c8:	0800b610 	.word	0x0800b610
 80013cc:	0800b61c 	.word	0x0800b61c
 80013d0:	0800b628 	.word	0x0800b628

080013d4 <_ZN5Modem8simA76726getSimEPc>:

	return stat;
}

/*Get Functions*/
void simA7672::getSim(char *pin) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af04      	add	r7, sp, #16
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_ATCPIN, sizeof(atcmd_ATCPIN) - 1, 1000, _LF, CMD_mode);
 80013de:	2301      	movs	r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	230a      	movs	r3, #10
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ea:	220a      	movs	r2, #10
 80013ec:	492c      	ldr	r1, [pc, #176]	@ (80014a0 <_ZN5Modem8simA76726getSimEPc+0xcc>)
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fa6a 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80013f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f8:	2100      	movs	r1, #0
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fb25 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 8001400:	4603      	mov	r3, r0
 8001402:	73fb      	strb	r3, [r7, #15]
	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d112      	bne.n	8001430 <_ZN5Modem8simA76726getSimEPc+0x5c>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 8001410:	3308      	adds	r3, #8
 8001412:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800141a:	f8b2 2078 	ldrh.w	r2, [r2, #120]	@ 0x78
 800141e:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fe71 	bl	8002108 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <_ZN5Modem8simA76726getSimEPc+0x5c>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <_ZN5Modem8simA76726getSimEPc+0x5e>
 8001430:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8001432:	2b00      	cmp	r3, #0
 8001434:	d025      	beq.n	8001482 <_ZN5Modem8simA76726getSimEPc+0xae>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f503 5084 	add.w	r0, r3, #4224	@ 0x1080
 800143c:	3008      	adds	r0, #8
 800143e:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CPIN:", ':', _CR, pin)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001446:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800144a:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	230d      	movs	r3, #13
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	233a      	movs	r3, #58	@ 0x3a
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <_ZN5Modem8simA76726getSimEPc+0xd0>)
 800145a:	f000 ff93 	bl	8002384 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800145e:	4603      	mov	r3, r0
				== checking.sys_ok) {
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 800146a:	2b00      	cmp	r3, #0
 800146c:	d113      	bne.n	8001496 <_ZN5Modem8simA76726getSimEPc+0xc2>
			return;
		} else {
			std::strcpy(pin, "--------");
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <_ZN5Modem8simA76726getSimEPc+0xd4>)
 8001472:	461a      	mov	r2, r3
 8001474:	460b      	mov	r3, r1
 8001476:	cb03      	ldmia	r3!, {r0, r1}
 8001478:	6010      	str	r0, [r2, #0]
 800147a:	6051      	str	r1, [r2, #4]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	7213      	strb	r3, [r2, #8]
 8001480:	e00a      	b.n	8001498 <_ZN5Modem8simA76726getSimEPc+0xc4>
		}

	} else {
		std::strcpy(pin, "--------");
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	4908      	ldr	r1, [pc, #32]	@ (80014a8 <_ZN5Modem8simA76726getSimEPc+0xd4>)
 8001486:	461a      	mov	r2, r3
 8001488:	460b      	mov	r3, r1
 800148a:	cb03      	ldmia	r3!, {r0, r1}
 800148c:	6010      	str	r0, [r2, #0]
 800148e:	6051      	str	r1, [r2, #4]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	7213      	strb	r3, [r2, #8]
 8001494:	e000      	b.n	8001498 <_ZN5Modem8simA76726getSimEPc+0xc4>
			return;
 8001496:	bf00      	nop
	}

}
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	0800b644 	.word	0x0800b644
 80014a4:	0800b478 	.word	0x0800b478
 80014a8:	0800b480 	.word	0x0800b480

080014ac <_ZN5Modem8simA767210getNetworkEPc>:
void simA7672::getPin() {

}
void simA7672::getNetwork(char *networkStat) {
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af04      	add	r7, sp, #16
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	status stat;

	PrepRxTx(atcmd_GATCREG, sizeof(atcmd_GATCREG) - 1, 1000, _LF, CMD_mode);
 80014b6:	2301      	movs	r3, #1
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	230a      	movs	r3, #10
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c2:	220a      	movs	r2, #10
 80014c4:	496e      	ldr	r1, [pc, #440]	@ (8001680 <_ZN5Modem8simA767210getNetworkEPc+0x1d4>)
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f9fe 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80014cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d0:	2100      	movs	r1, #0
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fab9 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d112      	bne.n	8001508 <_ZN5Modem8simA767210getNetworkEPc+0x5c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 80014e8:	3308      	adds	r3, #8
 80014ea:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014f2:	f8b2 2078 	ldrh.w	r2, [r2, #120]	@ 0x78
 80014f6:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fe05 	bl	8002108 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <_ZN5Modem8simA767210getNetworkEPc+0x5c>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <_ZN5Modem8simA767210getNetworkEPc+0x5e>
 8001508:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80ab 	beq.w	8001666 <_ZN5Modem8simA767210getNetworkEPc+0x1ba>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f503 5084 	add.w	r0, r3, #4224	@ 0x1080
 8001516:	3008      	adds	r0, #8
 8001518:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CREG:", ',', _CR, networkStat)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001520:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8001524:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	9302      	str	r3, [sp, #8]
 800152a:	230d      	movs	r3, #13
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	232c      	movs	r3, #44	@ 0x2c
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4b54      	ldr	r3, [pc, #336]	@ (8001684 <_ZN5Modem8simA767210getNetworkEPc+0x1d8>)
 8001534:	f000 ff26 	bl	8002384 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 8001538:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf0c      	ite	eq
 800153e:	2301      	moveq	r3, #1
 8001540:	2300      	movne	r3, #0
 8001542:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 8084 	beq.w	8001652 <_ZN5Modem8simA767210getNetworkEPc+0x1a6>
			switch (*networkStat) {
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	3b30      	subs	r3, #48	@ 0x30
 8001550:	2b07      	cmp	r3, #7
 8001552:	d873      	bhi.n	800163c <_ZN5Modem8simA767210getNetworkEPc+0x190>
 8001554:	a201      	add	r2, pc, #4	@ (adr r2, 800155c <_ZN5Modem8simA767210getNetworkEPc+0xb0>)
 8001556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155a:	bf00      	nop
 800155c:	0800157d 	.word	0x0800157d
 8001560:	0800158d 	.word	0x0800158d
 8001564:	080015ab 	.word	0x080015ab
 8001568:	080015c3 	.word	0x080015c3
 800156c:	080015db 	.word	0x080015db
 8001570:	080015eb 	.word	0x080015eb
 8001574:	08001609 	.word	0x08001609
 8001578:	08001621 	.word	0x08001621
			case '0': {
				std::strcpy(networkStat, "Not reg");
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	4942      	ldr	r1, [pc, #264]	@ (8001688 <_ZN5Modem8simA767210getNetworkEPc+0x1dc>)
 8001580:	461a      	mov	r2, r3
 8001582:	460b      	mov	r3, r1
 8001584:	cb03      	ldmia	r3!, {r0, r1}
 8001586:	6010      	str	r0, [r2, #0]
 8001588:	6051      	str	r1, [r2, #4]

				break;
 800158a:	e061      	b.n	8001650 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>
			}
			case '1': {
				std::strcpy(networkStat, "Registered, home network");
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4a3f      	ldr	r2, [pc, #252]	@ (800168c <_ZN5Modem8simA767210getNetworkEPc+0x1e0>)
 8001590:	461d      	mov	r5, r3
 8001592:	4614      	mov	r4, r2
 8001594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001596:	6028      	str	r0, [r5, #0]
 8001598:	6069      	str	r1, [r5, #4]
 800159a:	60aa      	str	r2, [r5, #8]
 800159c:	60eb      	str	r3, [r5, #12]
 800159e:	cc03      	ldmia	r4!, {r0, r1}
 80015a0:	6128      	str	r0, [r5, #16]
 80015a2:	6169      	str	r1, [r5, #20]
 80015a4:	7823      	ldrb	r3, [r4, #0]
 80015a6:	762b      	strb	r3, [r5, #24]

				break;
 80015a8:	e052      	b.n	8001650 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>
			}
			case '2': {
				std::strcpy(networkStat, "Currently Searching");
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	4a38      	ldr	r2, [pc, #224]	@ (8001690 <_ZN5Modem8simA767210getNetworkEPc+0x1e4>)
 80015ae:	461d      	mov	r5, r3
 80015b0:	4614      	mov	r4, r2
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	6028      	str	r0, [r5, #0]
 80015b6:	6069      	str	r1, [r5, #4]
 80015b8:	60aa      	str	r2, [r5, #8]
 80015ba:	60eb      	str	r3, [r5, #12]
 80015bc:	6820      	ldr	r0, [r4, #0]
 80015be:	6128      	str	r0, [r5, #16]

				break;
 80015c0:	e046      	b.n	8001650 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>
			}
			case '3': {
				std::strcpy(networkStat, "Registration denied");
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	4a33      	ldr	r2, [pc, #204]	@ (8001694 <_ZN5Modem8simA767210getNetworkEPc+0x1e8>)
 80015c6:	461d      	mov	r5, r3
 80015c8:	4614      	mov	r4, r2
 80015ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015cc:	6028      	str	r0, [r5, #0]
 80015ce:	6069      	str	r1, [r5, #4]
 80015d0:	60aa      	str	r2, [r5, #8]
 80015d2:	60eb      	str	r3, [r5, #12]
 80015d4:	6820      	ldr	r0, [r4, #0]
 80015d6:	6128      	str	r0, [r5, #16]

				break;
 80015d8:	e03a      	b.n	8001650 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>
			}
			case '4': {
				std::strcpy(networkStat, "Unknown");
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	492e      	ldr	r1, [pc, #184]	@ (8001698 <_ZN5Modem8simA767210getNetworkEPc+0x1ec>)
 80015de:	461a      	mov	r2, r3
 80015e0:	460b      	mov	r3, r1
 80015e2:	cb03      	ldmia	r3!, {r0, r1}
 80015e4:	6010      	str	r0, [r2, #0]
 80015e6:	6051      	str	r1, [r2, #4]

				break;
 80015e8:	e032      	b.n	8001650 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>
			}
			case '5': {
				std::strcpy(networkStat, "Registered,roaming");
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	4a2b      	ldr	r2, [pc, #172]	@ (800169c <_ZN5Modem8simA767210getNetworkEPc+0x1f0>)
 80015ee:	461d      	mov	r5, r3
 80015f0:	4614      	mov	r4, r2
 80015f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f4:	6028      	str	r0, [r5, #0]
 80015f6:	6069      	str	r1, [r5, #4]
 80015f8:	60aa      	str	r2, [r5, #8]
 80015fa:	60eb      	str	r3, [r5, #12]
 80015fc:	8823      	ldrh	r3, [r4, #0]
 80015fe:	78a2      	ldrb	r2, [r4, #2]
 8001600:	822b      	strh	r3, [r5, #16]
 8001602:	4613      	mov	r3, r2
 8001604:	74ab      	strb	r3, [r5, #18]

				break;
 8001606:	e023      	b.n	8001650 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>
			}
			case '6': {
				std::strcpy(networkStat, "Registered SMS only");
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4a25      	ldr	r2, [pc, #148]	@ (80016a0 <_ZN5Modem8simA767210getNetworkEPc+0x1f4>)
 800160c:	461d      	mov	r5, r3
 800160e:	4614      	mov	r4, r2
 8001610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001612:	6028      	str	r0, [r5, #0]
 8001614:	6069      	str	r1, [r5, #4]
 8001616:	60aa      	str	r2, [r5, #8]
 8001618:	60eb      	str	r3, [r5, #12]
 800161a:	6820      	ldr	r0, [r4, #0]
 800161c:	6128      	str	r0, [r5, #16]

				break;
 800161e:	e017      	b.n	8001650 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>
			}
			case '7': {
				std::strcpy(networkStat, "Registered SMS only,roaming");
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	4a20      	ldr	r2, [pc, #128]	@ (80016a4 <_ZN5Modem8simA767210getNetworkEPc+0x1f8>)
 8001624:	461d      	mov	r5, r3
 8001626:	4614      	mov	r4, r2
 8001628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162a:	6028      	str	r0, [r5, #0]
 800162c:	6069      	str	r1, [r5, #4]
 800162e:	60aa      	str	r2, [r5, #8]
 8001630:	60eb      	str	r3, [r5, #12]
 8001632:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001634:	6128      	str	r0, [r5, #16]
 8001636:	6169      	str	r1, [r5, #20]
 8001638:	61aa      	str	r2, [r5, #24]

				break;
 800163a:	e009      	b.n	8001650 <_ZN5Modem8simA767210getNetworkEPc+0x1a4>
			}
			default: {
				std::strcpy(networkStat, "--------");
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	491a      	ldr	r1, [pc, #104]	@ (80016a8 <_ZN5Modem8simA767210getNetworkEPc+0x1fc>)
 8001640:	461a      	mov	r2, r3
 8001642:	460b      	mov	r3, r1
 8001644:	cb03      	ldmia	r3!, {r0, r1}
 8001646:	6010      	str	r0, [r2, #0]
 8001648:	6051      	str	r1, [r2, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	7213      	strb	r3, [r2, #8]

				break;
 800164e:	bf00      	nop
			}
			}
			return;
 8001650:	e012      	b.n	8001678 <_ZN5Modem8simA767210getNetworkEPc+0x1cc>
		} else {
			std::strcpy(networkStat, "--------");
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	4914      	ldr	r1, [pc, #80]	@ (80016a8 <_ZN5Modem8simA767210getNetworkEPc+0x1fc>)
 8001656:	461a      	mov	r2, r3
 8001658:	460b      	mov	r3, r1
 800165a:	cb03      	ldmia	r3!, {r0, r1}
 800165c:	6010      	str	r0, [r2, #0]
 800165e:	6051      	str	r1, [r2, #4]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	7213      	strb	r3, [r2, #8]
 8001664:	e008      	b.n	8001678 <_ZN5Modem8simA767210getNetworkEPc+0x1cc>
		}

	} else {
		std::strcpy(networkStat, "--------");
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	490f      	ldr	r1, [pc, #60]	@ (80016a8 <_ZN5Modem8simA767210getNetworkEPc+0x1fc>)
 800166a:	461a      	mov	r2, r3
 800166c:	460b      	mov	r3, r1
 800166e:	cb03      	ldmia	r3!, {r0, r1}
 8001670:	6010      	str	r0, [r2, #0]
 8001672:	6051      	str	r1, [r2, #4]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	7213      	strb	r3, [r2, #8]
	}

}
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bdb0      	pop	{r4, r5, r7, pc}
 800167e:	bf00      	nop
 8001680:	0800b650 	.word	0x0800b650
 8001684:	0800b48c 	.word	0x0800b48c
 8001688:	0800b494 	.word	0x0800b494
 800168c:	0800b49c 	.word	0x0800b49c
 8001690:	0800b4b8 	.word	0x0800b4b8
 8001694:	0800b4cc 	.word	0x0800b4cc
 8001698:	0800b4e0 	.word	0x0800b4e0
 800169c:	0800b4e8 	.word	0x0800b4e8
 80016a0:	0800b4fc 	.word	0x0800b4fc
 80016a4:	0800b510 	.word	0x0800b510
 80016a8:	0800b480 	.word	0x0800b480

080016ac <_ZN5Modem8simA767210getSignalQEPc>:
void simA7672::getSignalQ(char *quality) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	@ 0x28
 80016b0:	af04      	add	r7, sp, #16
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]

	status stat;

	char buffer[10];
	int8_t csq = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
	PrepRxTx(atcmd_ATCSQ, sizeof(atcmd_ATCSQ) - 1, 1000, _LF, CMD_mode);
 80016ba:	2301      	movs	r3, #1
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	230a      	movs	r3, #10
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016c6:	2208      	movs	r2, #8
 80016c8:	4939      	ldr	r1, [pc, #228]	@ (80017b0 <_ZN5Modem8simA767210getSignalQEPc+0x104>)
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f8fc 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80016d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d4:	2100      	movs	r1, #0
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f9b7 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80016dc:	4603      	mov	r3, r0
 80016de:	75bb      	strb	r3, [r7, #22]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80016e0:	7dbb      	ldrb	r3, [r7, #22]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d112      	bne.n	800170c <_ZN5Modem8simA767210getSignalQEPc+0x60>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 80016ec:	3308      	adds	r3, #8
 80016ee:	6879      	ldr	r1, [r7, #4]
					Rx_info.Rxcount) == checking.sys_ok) {
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016f6:	f8b2 2078 	ldrh.w	r2, [r2, #120]	@ 0x78
 80016fa:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fd03 	bl	8002108 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <_ZN5Modem8simA767210getSignalQEPc+0x60>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <_ZN5Modem8simA767210getSignalQEPc+0x62>
 800170c:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 800170e:	2b00      	cmp	r3, #0
 8001710:	d042      	beq.n	8001798 <_ZN5Modem8simA767210getSignalQEPc+0xec>
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f503 5084 	add.w	r0, r3, #4224	@ 0x1080
 8001718:	3008      	adds	r0, #8
 800171a:	6879      	ldr	r1, [r7, #4]
				Rx_info.Rxcount, (char*) "+CSQ:", ':', ',', buffer)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001722:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8001726:	b29a      	uxth	r2, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	232c      	movs	r3, #44	@ 0x2c
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	233a      	movs	r3, #58	@ 0x3a
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <_ZN5Modem8simA767210getSignalQEPc+0x108>)
 8001738:	f000 fe24 	bl	8002384 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>
 800173c:	4603      	mov	r3, r0
				== checking.sys_ok) {
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
		if (checking.parseSkipCharnDTillEndChar((char*) Rxbuffer,
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01b      	beq.n	8001784 <_ZN5Modem8simA767210getSignalQEPc+0xd8>

			csq = std::atoi(buffer);
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4618      	mov	r0, r3
 8001752:	f006 fe81 	bl	8008458 <atoi>
 8001756:	4603      	mov	r3, r0
 8001758:	75fb      	strb	r3, [r7, #23]
			if (csq >= 99) {
 800175a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800175e:	2b62      	cmp	r3, #98	@ 0x62
 8001760:	dd02      	ble.n	8001768 <_ZN5Modem8simA767210getSignalQEPc+0xbc>
				csq = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]
 8001766:	e005      	b.n	8001774 <_ZN5Modem8simA767210getSignalQEPc+0xc8>

			} else {
				csq = (2 * (csq)) - 113;
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3b71      	subs	r3, #113	@ 0x71
 8001770:	b2db      	uxtb	r3, r3
 8001772:	75fb      	strb	r3, [r7, #23]
			}

			std::sprintf(quality, "%02d dbm", csq);
 8001774:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001778:	461a      	mov	r2, r3
 800177a:	490f      	ldr	r1, [pc, #60]	@ (80017b8 <_ZN5Modem8simA767210getSignalQEPc+0x10c>)
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f007 fc41 	bl	8009004 <siprintf>
 8001782:	e012      	b.n	80017aa <_ZN5Modem8simA767210getSignalQEPc+0xfe>

			return;
		} else {
			std::strcpy(quality, "--------");
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	490d      	ldr	r1, [pc, #52]	@ (80017bc <_ZN5Modem8simA767210getSignalQEPc+0x110>)
 8001788:	461a      	mov	r2, r3
 800178a:	460b      	mov	r3, r1
 800178c:	cb03      	ldmia	r3!, {r0, r1}
 800178e:	6010      	str	r0, [r2, #0]
 8001790:	6051      	str	r1, [r2, #4]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	7213      	strb	r3, [r2, #8]
 8001796:	e008      	b.n	80017aa <_ZN5Modem8simA767210getSignalQEPc+0xfe>
		}

	} else {
		std::strcpy(quality, "--------");
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4908      	ldr	r1, [pc, #32]	@ (80017bc <_ZN5Modem8simA767210getSignalQEPc+0x110>)
 800179c:	461a      	mov	r2, r3
 800179e:	460b      	mov	r3, r1
 80017a0:	cb03      	ldmia	r3!, {r0, r1}
 80017a2:	6010      	str	r0, [r2, #0]
 80017a4:	6051      	str	r1, [r2, #4]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	7213      	strb	r3, [r2, #8]
	}

}
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	0800b65c 	.word	0x0800b65c
 80017b4:	0800b52c 	.word	0x0800b52c
 80017b8:	0800b534 	.word	0x0800b534
 80017bc:	0800b480 	.word	0x0800b480

080017c0 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_>:
void simA7672::getTimeDate(char *Time, char *Date, char *timezone) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
	status stat;

	PrepRxTx(atcmd_ATCCLK, sizeof(atcmd_ATCCLK) - 1, 1000, _LF, CMD_mode);
 80017ce:	2301      	movs	r3, #1
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	230a      	movs	r3, #10
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017da:	220a      	movs	r2, #10
 80017dc:	4936      	ldr	r1, [pc, #216]	@ (80018b8 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0xf8>)
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 f872 	bl	80018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>
	stat = check_eventTimeout(rx_evt, 5000);
 80017e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e8:	2100      	movs	r1, #0
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f92d 	bl	8001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>
 80017f0:	4603      	mov	r3, r0
 80017f2:	75fb      	strb	r3, [r7, #23]

	if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d112      	bne.n	8001820 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0x60>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 8001800:	3308      	adds	r3, #8
 8001802:	68f9      	ldr	r1, [r7, #12]
					Rx_info.Rxcount) == checking.sys_ok) {
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800180a:	f8b2 2078 	ldrh.w	r2, [r2, #120]	@ 0x78
 800180e:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fc79 	bl	8002108 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0x60>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0x62>
 8001820:	2300      	movs	r3, #0
	if (stat == simA7672_OK
 8001822:	2b00      	cmp	r3, #0
 8001824:	d030      	beq.n	8001888 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0xc8>
		if (checking.parseDate_Time_Timezone((char*) Rxbuffer, Rx_info.Rxcount,
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f503 5084 	add.w	r0, r3, #4224	@ 0x1080
 800182c:	3008      	adds	r0, #8
 800182e:	68f9      	ldr	r1, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001836:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800183a:	b29a      	uxth	r2, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f000 fc85 	bl	8002154 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_>
 800184a:	4603      	mov	r3, r0
				Date, Time, timezone) == checking.sys_ok) {
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
		if (checking.parseDate_Time_Timezone((char*) Rxbuffer, Rx_info.Rxcount,
 8001856:	2b00      	cmp	r3, #0
 8001858:	d12a      	bne.n	80018b0 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0xf0>
			return;
		} else {
			std::strcpy(Date, "ER-ER-ER");
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4917      	ldr	r1, [pc, #92]	@ (80018bc <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0xfc>)
 800185e:	461a      	mov	r2, r3
 8001860:	460b      	mov	r3, r1
 8001862:	cb03      	ldmia	r3!, {r0, r1}
 8001864:	6010      	str	r0, [r2, #0]
 8001866:	6051      	str	r1, [r2, #4]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	7213      	strb	r3, [r2, #8]
			std::strcpy(Time, "ER:ER:ER");
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4914      	ldr	r1, [pc, #80]	@ (80018c0 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0x100>)
 8001870:	461a      	mov	r2, r3
 8001872:	460b      	mov	r3, r1
 8001874:	cb03      	ldmia	r3!, {r0, r1}
 8001876:	6010      	str	r0, [r2, #0]
 8001878:	6051      	str	r1, [r2, #4]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	7213      	strb	r3, [r2, #8]
			std::strcpy(timezone, "ERR");
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	4a10      	ldr	r2, [pc, #64]	@ (80018c4 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0x104>)
 8001882:	6810      	ldr	r0, [r2, #0]
 8001884:	6018      	str	r0, [r3, #0]
 8001886:	e014      	b.n	80018b2 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0xf2>
		}

	} else if (stat == simA7672_OK
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d111      	bne.n	80018b2 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0xf2>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 8001894:	3308      	adds	r3, #8
 8001896:	68f9      	ldr	r1, [r7, #12]
					Rx_info.Rxcount) == checking.sys_err) {
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800189e:	f8b2 2078 	ldrh.w	r2, [r2, #120]	@ 0x78
 80018a2:	b292      	uxth	r2, r2
			&& checking.checkResponse_OK_ERR((const char*) Rxbuffer,
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fc2f 	bl	8002108 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	e000      	b.n	80018b2 <_ZN5Modem8simA767211getTimeDateEPcS1_S1_+0xf2>
			return;
 80018b0:	bf00      	nop
		/*ToDo*/
	} else {
		/*ToDo*/
	}

}
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	0800b638 	.word	0x0800b638
 80018bc:	0800b540 	.word	0x0800b540
 80018c0:	0800b54c 	.word	0x0800b54c
 80018c4:	0800b558 	.word	0x0800b558

080018c8 <_ZN5Modem8simA76728PrepRxTxEPKhtthNS0_6RxmodeE>:
	rst_event(tx_evt);
	serial_.TransmitData(Txbuf, len, timeout);

}
void simA7672::PrepRxTx(const uint8_t *Txbuf, uint16_t len, uint16_t timeout,
		uint8_t end_char, enum Rxmode Rxmode) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	460b      	mov	r3, r1
 80018d8:	80fb      	strh	r3, [r7, #6]
 80018da:	4613      	mov	r3, r2
 80018dc:	80bb      	strh	r3, [r7, #4]

	memset(Rxbuffer, 0, BufferLen);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f007 fbef 	bl	80090ca <memset>
	memset(Txbuffer, 0, 100);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f2:	2264      	movs	r2, #100	@ 0x64
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f007 fbe7 	bl	80090ca <memset>
	rst_event(rx_evt);
 80018fc:	2100      	movs	r1, #0
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 f85d 	bl	80019be <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>
	rst_event(tx_evt);
 8001904:	2101      	movs	r1, #1
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f859 	bl	80019be <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>

	Rx_info.end_char = end_char;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001912:	461a      	mov	r2, r3
 8001914:	7e3b      	ldrb	r3, [r7, #24]
 8001916:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
	Rx_info.rx_mode = Rxmode;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001920:	461a      	mov	r2, r3
 8001922:	7f3b      	ldrb	r3, [r7, #28]
 8001924:	f882 306f 	strb.w	r3, [r2, #111]	@ 0x6f
	Rx_info.detect_endchar = 0;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800192e:	2200      	movs	r2, #0
 8001930:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
	Rx_info.end_char_count = 0;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	Rx_info.release_event = -1;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001946:	22ff      	movs	r2, #255	@ 0xff
 8001948:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	Rx_info.Rx = Rxbuffer;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001954:	6753      	str	r3, [r2, #116]	@ 0x74
	Rx_info.Rxcount = 0;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800195c:	2200      	movs	r2, #0
 800195e:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
	serial_.RxintEn(Rx_info.Rx, BufferLen);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 8001968:	3304      	adds	r3, #4
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001970:	6f51      	ldr	r1, [r2, #116]	@ 0x74
 8001972:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fb8d 	bl	8002096 <_ZN13System_serial6serial7RxintEnEPht>
	serial_.TransmitData(Txbuf, len, timeout);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f503 5084 	add.w	r0, r3, #4224	@ 0x1080
 8001982:	3004      	adds	r0, #4
 8001984:	88bb      	ldrh	r3, [r7, #4]
 8001986:	88fa      	ldrh	r2, [r7, #6]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	f000 fb71 	bl	8002070 <_ZN13System_serial6serial12TransmitDataEPKhtm>

}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>:
inline void simA7672::set_event(enum eventType event) {
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	70fb      	strb	r3, [r7, #3]
	Event[event] = 1;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 80019ac:	3309      	adds	r3, #9
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_ZN5Modem8simA76729rst_eventENS0_9eventTypeE>:
inline void simA7672::rst_event(enum eventType event) {
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	460b      	mov	r3, r1
 80019c8:	70fb      	strb	r3, [r7, #3]
	Event[event] = 0;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 80019d4:	3309      	adds	r3, #9
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>:
enum simA7672::status simA7672::check_event(enum eventType event) {
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	70fb      	strb	r3, [r7, #3]

	status stat = simA7672_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]

	if (Event[event]) {
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 8001a00:	3309      	adds	r3, #9
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf14      	ite	ne
 8001a0a:	2301      	movne	r3, #1
 8001a0c:	2300      	moveq	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x34>
		stat = simA7672_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e010      	b.n	8001a3c <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
	} else if (!Event[event]) {
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 8001a24:	3309      	adds	r3, #9
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <_ZN5Modem8simA767211check_eventENS0_9eventTypeE+0x56>
		stat = simA7672_ERR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]

}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt>:

	return stat;

}
enum simA7672::status simA7672::check_eventTimeout(enum eventType event,
		uint16_t timeout) {
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	70fb      	strb	r3, [r7, #3]
 8001a56:	4613      	mov	r3, r2
 8001a58:	803b      	strh	r3, [r7, #0]
	status stat = simA7672_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]
	uint32_t prev_time = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]

	prev_time = HAL_GetTick(); //we get new time before going into while
 8001a62:	f001 fa6d 	bl	8002f40 <HAL_GetTick>
 8001a66:	60b8      	str	r0, [r7, #8]
	while ((check_event(event) != simA7672_OK)
 8001a68:	e002      	b.n	8001a70 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x26>
			&& (HAL_GetTick() - prev_time < timeout)) {
		//wait here until get event or time passes
		System_Rtos::delay(10);
 8001a6a:	200a      	movs	r0, #10
 8001a6c:	f000 f924 	bl	8001cb8 <_ZN11System_Rtos5delayEm>
	while ((check_event(event) != simA7672_OK)
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffb6 	bl	80019e6 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 8001a7a:	4603      	mov	r3, r0
			&& (HAL_GetTick() - prev_time < timeout)) {
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d009      	beq.n	8001a94 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x4a>
 8001a80:	f001 fa5e 	bl	8002f40 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad2      	subs	r2, r2, r3
 8001a8a:	883b      	ldrh	r3, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d201      	bcs.n	8001a94 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x4a>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x4c>
 8001a94:	2300      	movs	r3, #0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1e7      	bne.n	8001a6a <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x20>
	}

	if (check_event(event) != simA7672_OK) {
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa1 	bl	80019e6 <_ZN5Modem8simA767211check_eventENS0_9eventTypeE>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	bf14      	ite	ne
 8001aaa:	2301      	movne	r3, #1
 8001aac:	2300      	moveq	r3, #0
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <_ZN5Modem8simA767218check_eventTimeoutENS0_9eventTypeEt+0x6e>
		stat = simA7672::simA7672_ERR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
	}

	return stat;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]

}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_ZN5Modem8simA76724RxCBEh>:

/*Interrupt callbacks*/

void simA7672::RxCB(uint8_t data) {
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	70fb      	strb	r3, [r7, #3]
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvolatile"
	if (Rx_info.rx_mode == CMD_mode) {
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad4:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8096 	beq.w	8001c16 <_ZN5Modem8simA76724RxCBEh+0x154>
		*Rx_info.Rx++ = data;
 8001aea:	78f8      	ldrb	r0, [r7, #3]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8001afc:	674a      	str	r2, [r1, #116]	@ 0x74
 8001afe:	4602      	mov	r2, r0
 8001b00:	701a      	strb	r2, [r3, #0]
		Rx_info.Rxcount++;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b08:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b18:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

		if (Rx_info.end_char_count == 1) {
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b22:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00e      	beq.n	8001b54 <_ZN5Modem8simA76724RxCBEh+0x92>
			Rx_info.release_event++;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	3301      	adds	r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	b25a      	sxtb	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b50:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

		}

		if (Rx_info.detect_nextlinechar == 1 && (data == 'O' || data == 'E')) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b5a:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d107      	bne.n	8001b74 <_ZN5Modem8simA76724RxCBEh+0xb2>
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b4f      	cmp	r3, #79	@ 0x4f
 8001b68:	d002      	beq.n	8001b70 <_ZN5Modem8simA76724RxCBEh+0xae>
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	2b45      	cmp	r3, #69	@ 0x45
 8001b6e:	d101      	bne.n	8001b74 <_ZN5Modem8simA76724RxCBEh+0xb2>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <_ZN5Modem8simA76724RxCBEh+0xb4>
 8001b74:	2300      	movs	r3, #0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d01f      	beq.n	8001bba <_ZN5Modem8simA76724RxCBEh+0xf8>
			Rx_info.detect_nextlinechar = 0; //reset it
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
			Rx_info.end_char_count = 1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			if (data == 'O') {
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	2b4f      	cmp	r3, #79	@ 0x4f
 8001b96:	d106      	bne.n	8001ba6 <_ZN5Modem8simA76724RxCBEh+0xe4>
				Rx_info.total_char = 2;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001ba4:	e00f      	b.n	8001bc6 <_ZN5Modem8simA76724RxCBEh+0x104>
			} else if (data == 'E') {
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	2b45      	cmp	r3, #69	@ 0x45
 8001baa:	d10c      	bne.n	8001bc6 <_ZN5Modem8simA76724RxCBEh+0x104>
				Rx_info.total_char = 5;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001bb8:	e005      	b.n	8001bc6 <_ZN5Modem8simA76724RxCBEh+0x104>
			}

		} else {
			Rx_info.detect_nextlinechar = 0; //reset it
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e

		}

		if (data == simA7672::_LF) {
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	2b0a      	cmp	r3, #10
 8001bca:	d105      	bne.n	8001bd8 <_ZN5Modem8simA76724RxCBEh+0x116>
			Rx_info.detect_nextlinechar = 1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e

		}

		if (Rx_info.release_event >= Rx_info.total_char) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bde:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001be2:	b25b      	sxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bec:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	bfac      	ite	ge
 8001bf6:	2301      	movge	r3, #1
 8001bf8:	2300      	movlt	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00a      	beq.n	8001c16 <_ZN5Modem8simA76724RxCBEh+0x154>
			set_event(rx_evt);
 8001c00:	2100      	movs	r1, #0
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fec7 	bl	8001996 <_ZN5Modem8simA76729set_eventENS0_9eventTypeE>
			serial_.RxintDis();
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f503 5384 	add.w	r3, r3, #4224	@ 0x1080
 8001c0e:	3304      	adds	r3, #4
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fa52 	bl	80020ba <_ZN13System_serial6serial8RxintDisEv>
		}

	}
#pragma GCC diagnostic pop

}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh>:

void simA7672::TxCB(UART_HandleTypeDef *huart) {

}

void simA7672::RxCBStatic(UART_HandleTypeDef *huart, uint8_t data) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
	// Find the instance and call its instance method
	uint8_t i = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < numberofuart; i++) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	e009      	b.n	8001c4a <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x2a>
		if (ClassInstances[i].huart == huart) {
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	4a11      	ldr	r2, [pc, #68]	@ (8001c80 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8001c3a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d006      	beq.n	8001c52 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x32>
	for (i = 0; i < numberofuart; i++) {
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	3301      	adds	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d9f2      	bls.n	8001c36 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x16>
 8001c50:	e000      	b.n	8001c54 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x34>
			break;
 8001c52:	bf00      	nop
		}
	}

	if (ClassInstances[i].Instance) {
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x56>
		ClassInstances[i].Instance->RxCB(data); // Delegate to instance-specific method
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	4a06      	ldr	r2, [pc, #24]	@ (8001c80 <_ZN5Modem8simA767210RxCBStaticEP20__UART_HandleTypeDefh+0x60>)
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff26 	bl	8001ac2 <_ZN5Modem8simA76724RxCBEh>
	}

}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20001328 	.word	0x20001328

08001c84 <_ZN5Modem8simA767210TxCBStaticEP20__UART_HandleTypeDef>:
void simA7672::TxCBStatic(UART_HandleTypeDef *huart) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_ZN17sensor_liquidMeas12liquidSensorC1EP17ADC_HandleTypeDef>:
#include "adc.h"

namespace sensor_liquidMeas {


liquidSensor::liquidSensor(ADC_HandleTypeDef *hadc)
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
{
	hadc_sensor = hadc;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	601a      	str	r2, [r3, #0]
}
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <_ZN11System_Rtos5delayEm>:
#include "cstring"

namespace System_Rtos {

void delay(uint32_t d)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  vTaskDelay(pdMS_TO_TICKS(d));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <_ZN11System_Rtos5delayEm+0x28>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 fea6 	bl	8006a24 <vTaskDelay>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	10624dd3 	.word	0x10624dd3

08001ce4 <_ZN11System_Rtos14freertos_TasksC1EPFvPvEPKctS1_m>:

freertos_Tasks::freertos_Tasks(TaskFunction_t pxTaskCode_, const char *pcName_, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	807b      	strh	r3, [r7, #2]
const configSTACK_DEPTH_TYPE usStackDepth_, void *const pvParameters_,
		UBaseType_t uxPriority_): taskHandle(0) {
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]

	pxTask = pxTaskCode_;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	601a      	str	r2, [r3, #0]
	std::strcpy(pcName, pcName_);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3304      	adds	r3, #4
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f007 fb48 	bl	800939a <strcpy>
	usStackDepth = usStackDepth_;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	887a      	ldrh	r2, [r7, #2]
 8001d0e:	829a      	strh	r2, [r3, #20]
	pvParameters = pvParameters_;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	619a      	str	r2, [r3, #24]
	uxPriority = uxPriority_;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	61da      	str	r2, [r3, #28]


}
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZN11System_Rtos14freertos_Tasks10createTaskEv>:

void freertos_Tasks::createTask() {
 8001d26:	b5b0      	push	{r4, r5, r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af02      	add	r7, sp, #8
 8001d2c:	6078      	str	r0, [r7, #4]
	xTaskCreate(pxTask, pcName, usStackDepth, pvParameters, uxPriority,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	1d19      	adds	r1, r3, #4
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	8a9c      	ldrh	r4, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699d      	ldr	r5, [r3, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	3220      	adds	r2, #32
 8001d46:	9201      	str	r2, [sp, #4]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	462b      	mov	r3, r5
 8001d4c:	4622      	mov	r2, r4
 8001d4e:	f004 fd0b 	bl	8006768 <xTaskCreate>
			&taskHandle);
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d5c <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E>:

void setDisplayCallback(DisplayRxCB Rxcb, DisplayTxCB TxCB) {
	LocalDisplayRxCB = Rxcb;
	LocalDisplayTxCB = TxCB;
}
void setModemCallback(ModemRxCB Rxcb, ModemTxCB TxCB) {
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
	LocalModemRxCB = Rxcb;
 8001d66:	4a06      	ldr	r2, [pc, #24]	@ (8001d80 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x24>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6013      	str	r3, [r2, #0]
	LocalModemTxCB = TxCB;
 8001d6c:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <_Z16setModemCallbackPFvP20__UART_HandleTypeDefhEPFvS0_E+0x28>)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6013      	str	r3, [r2, #0]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20001348 	.word	0x20001348
 8001d84:	20001354 	.word	0x20001354

08001d88 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>:
void setInverterCallback(InverterRxCB Rxcb, InverterTxCB TxCB) {
	LocalInverterRxCB = Rxcb;
	LocalInverterTxCB = TxCB;
}

HAL_StatusTypeDef My_UART_Receive_Endless(UART_HandleTypeDef *huart) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]


	uint16_t uhErr = (uint16_t) huart->ErrorCode;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d94:	81bb      	strh	r3, [r7, #12]
	uint16_t uhData;

	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b22      	cmp	r3, #34	@ 0x22
 8001da0:	bf0c      	ite	eq
 8001da2:	2301      	moveq	r3, #1
 8001da4:	2300      	movne	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d03f      	beq.n	8001e2c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa4>

		uhData = ((uint16_t) READ_REG(huart->Instance->DR)) & 0x00FF;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	81fb      	strh	r3, [r7, #14]

		if (uhErr != HAL_UART_ERROR_NONE)
 8001db8:	89bb      	ldrh	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x46>
			uhData |= (uhErr << 8);
 8001dbe:	89bb      	ldrh	r3, [r7, #12]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b21a      	sxth	r2, r3
 8001dc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	81fb      	strh	r3, [r7, #14]


		if (huart == &HMI_USART1) {
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e3c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xb4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10a      	bne.n	8001dec <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>

			if(LocalDisplayRxCB)
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xb8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x64>
			{
				LocalDisplayRxCB(huart,(uint8_t)uhData);
 8001dde:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xb8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	89fa      	ldrh	r2, [r7, #14]
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	4611      	mov	r1, r2
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
			}

		}

		if (huart == &GSM_USART2) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a15      	ldr	r2, [pc, #84]	@ (8001e44 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xbc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d10a      	bne.n	8001e0a <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x82>
			if(LocalModemRxCB)
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0x82>
			{
				LocalModemRxCB(huart,(uint8_t)uhData);
 8001dfc:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	89fa      	ldrh	r2, [r7, #14]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	4611      	mov	r1, r2
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	4798      	blx	r3
			}

		}

		if (huart == &INVERTER_USART6) {
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e4c <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10a      	bne.n	8001e28 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa0>

			if(LocalInverterRxCB)
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xa0>
			{
				LocalInverterRxCB(huart,(uint8_t)uhData);
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xc8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	89fa      	ldrh	r2, [r7, #14]
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	4611      	mov	r1, r2
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
			}

		}

		return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e003      	b.n	8001e34 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef+0xac>
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_FLUSH_DRREGISTER(huart);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]

		return HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
	}
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20001438 	.word	0x20001438
 8001e40:	20001344 	.word	0x20001344
 8001e44:	20001480 	.word	0x20001480
 8001e48:	20001348 	.word	0x20001348
 8001e4c:	200014c8 	.word	0x200014c8
 8001e50:	2000134c 	.word	0x2000134c

08001e54 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>:
	      __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
	 }
}


void My_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	613b      	str	r3, [r7, #16]
	  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	60fb      	str	r3, [r7, #12]
	  uint32_t errorflags = 0x00U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]

	  /* If no error occurs */
	  /* If no error occurs */
	  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	60bb      	str	r3, [r7, #8]
	  if (errorflags == RESET)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10d      	bne.n	8001ea2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	  {
	    /* UART in mode Receiver ---------------------------------------------------*/
	     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x4e>
	    {

	      My_UART_Receive_Endless(huart);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff74 	bl	8001d88 <_Z23My_UART_Receive_EndlessP20__UART_HandleTypeDef>


	      return;
 8001ea0:	e0bc      	b.n	800201c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
	    }
	  }

	  /* If some errors occur */
	  cr3its = READ_REG(huart->Instance->CR3);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	60fb      	str	r3, [r7, #12]
	  if(   (errorflags != RESET)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 8083 	beq.w	8001fb8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x72>
	         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d078      	beq.n	8001fb8 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x164>
	  {
	    /* UART parity error interrupt occurred -------------------------------------*/
	    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00f      	beq.n	8001ef0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x9c>
	    {

	      __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f06f 0201 	mvn.w	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	645a      	str	r2, [r3, #68]	@ 0x44


	    }

	    /* UART frame error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00f      	beq.n	8001f1a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xc6>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0202 	mvn.w	r2, #2
 8001f0c:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	f043 0204 	orr.w	r2, r3, #4
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* UART noise error interrupt occurred --------------------------------------*/
	    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00f      	beq.n	8001f44 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0xf0>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f06f 0204 	mvn.w	r2, #4
 8001f36:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3c:	f043 0202 	orr.w	r2, r3, #2
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	645a      	str	r2, [r3, #68]	@ 0x44
	    }

	    /* UART Over-Run interrupt occurred -----------------------------------------*/
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d014      	beq.n	8001f78 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f003 0320 	and.w	r3, r3, #32
	    if(((isrflags & USART_SR_ORE) != RESET) &&
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d104      	bne.n	8001f62 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x10e>
	       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x124>
	    {
	    	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f06f 0208 	mvn.w	r2, #8
 8001f6a:	601a      	str	r2, [r3, #0]

	      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f70:	f043 0208 	orr.w	r2, r3, #8
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	645a      	str	r2, [r3, #68]	@ 0x44

	    }

	    /* Call UART Error Call back function if need be --------------------------*/
	    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d045      	beq.n	8002016 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c2>
	    {
	      /* UART in mode Receiver ---------------------------------------------------*/
	      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x156>
	      {
	            // Erfassungs-SS weitermachen
	             huart->ErrorCode = HAL_UART_ERROR_NONE;   // loeschen
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	645a      	str	r2, [r3, #68]	@ 0x44
	            //__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);  // Clear RXNE interrupt flag

	             __HAL_UART_FLUSH_DRREGISTER(huart);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
	         consider error as blocking */
	      if (1)
	      {
	        /* Non Blocking error : transfer could go on.
	           Error is notified to user through user error callback */
	        HAL_UART_ErrorCallback(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f003 f8ae 	bl	800510c <HAL_UART_ErrorCallback>
	        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44
	      }
	    }



	    return;
 8001fb6:	e02e      	b.n	8002016 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c2>
	  } /* End if some error occurs */



	  /* UART in mode Transmitter ------------------------------------------------*/
	  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d02c      	beq.n	800201c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d027      	beq.n	800201c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
	  {
			if (huart == &HMI_USART1) {
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a15      	ldr	r2, [pc, #84]	@ (8002024 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d107      	bne.n	8001fe4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x190>

				if(LocalDisplayTxCB)
 8001fd4:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x190>
				{
					LocalDisplayTxCB(huart);
 8001fdc:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
				}

			}

			if (huart == &GSM_USART2) {
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a11      	ldr	r2, [pc, #68]	@ (800202c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1d8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d107      	bne.n	8001ffc <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a8>
				if(LocalModemTxCB)
 8001fec:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1dc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1a8>
				{
					LocalModemTxCB(huart);
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1dc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
				}

			}

			if (huart == &INVERTER_USART6) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8002034 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1e0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d10a      	bne.n	800201a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c6>

				if(LocalInverterTxCB)
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1e4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c6>
				{
					LocalInverterTxCB(huart);
 800200c:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1e4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
				}

			}
	    return;
 8002014:	e001      	b.n	800201a <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c6>
	    return;
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef+0x1c8>
	    return;
 800201a:	bf00      	nop
	  }



}
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20001438 	.word	0x20001438
 8002028:	20001350 	.word	0x20001350
 800202c:	20001480 	.word	0x20001480
 8002030:	20001354 	.word	0x20001354
 8002034:	200014c8 	.word	0x200014c8
 8002038:	20001358 	.word	0x20001358

0800203c <My_UART_IRQHandlerC>:
extern "C"
{


    void My_UART_IRQHandlerC(UART_HandleTypeDef *huart)
    {
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
    	My_UART_IRQHandler(huart);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff05 	bl	8001e54 <_Z18My_UART_IRQHandlerP20__UART_HandleTypeDef>
    }
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_ZN13System_serial6serialC1EP20__UART_HandleTypeDef>:

namespace System_serial {

//UART_HandleTypeDef *serial::Internal_UartHandler;

serial::serial(UART_HandleTypeDef *huart) {
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
	Internal_UartHandler = huart;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	601a      	str	r2, [r3, #0]
}
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_ZN13System_serial6serial12TransmitDataEPKhtm>:

void serial::TransmitData(const uint8_t *data, uint16_t size, uint32_t timeout) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(Internal_UartHandler, data, size, timeout);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	88fa      	ldrh	r2, [r7, #6]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	f002 fc37 	bl	80048fc <HAL_UART_Transmit>

}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_ZN13System_serial6serial7RxintEnEPht>:


void serial::RxintEn(uint8_t *buf,uint16_t size)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	4613      	mov	r3, r2
 80020a2:	80fb      	strh	r3, [r7, #6]
//	/__HAL_UART_CLEAR_OREFLAG(Internal_UartHandler);
	HAL_UART_Receive_IT(Internal_UartHandler, buf, size);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	88fa      	ldrh	r2, [r7, #6]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 fcb0 	bl	8004a12 <HAL_UART_Receive_IT>
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_ZN13System_serial6serial8RxintDisEv>:
	HAL_UART_Transmit_IT(Internal_UartHandler,buf, size);
}


void serial::RxintDis()
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortReceive_IT(Internal_UartHandler);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 fcc8 	bl	8004a5c <HAL_UART_AbortReceive_IT>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZSt6strchrPci>:
  memchr(void* __s, int __c, size_t __n)
  { return __builtin_memchr(__s, __c, __n); }

  inline char*
  strchr(char* __s, int __n)
  { return __builtin_strchr(__s, __n); }
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f006 fffa 	bl	80090da <strchr>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_ZN10System_sys16Parsing_CheckingC1Ev>:
#include "System_sys.hpp"


namespace System_sys {

Parsing_Checking::Parsing_Checking()
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
{

}
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct>:

enum Parsing_Checking::status Parsing_Checking::checkResponse_OK_ERR(const char *buffer,uint16_t bufferSize)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
	enum status stat = sys_notFound;
 8002116:	2302      	movs	r3, #2
 8002118:	75fb      	strb	r3, [r7, #23]

    if(std::strstr(buffer,"OK") != nullptr)
 800211a:	490c      	ldr	r1, [pc, #48]	@ (800214c <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x44>)
 800211c:	68b8      	ldr	r0, [r7, #8]
 800211e:	f007 f859 	bl	80091d4 <strstr>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x26>
    {
    	stat = sys_ok;
 8002128:	2300      	movs	r3, #0
 800212a:	75fb      	strb	r3, [r7, #23]
 800212c:	e008      	b.n	8002140 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>

    }
    else if(std::strstr(buffer, "ERROR") != nullptr)
 800212e:	4908      	ldr	r1, [pc, #32]	@ (8002150 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x48>)
 8002130:	68b8      	ldr	r0, [r7, #8]
 8002132:	f007 f84f 	bl	80091d4 <strstr>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <_ZN10System_sys16Parsing_Checking20checkResponse_OK_ERREPKct+0x38>
    {
    	stat = sys_err;
 800213c:	2301      	movs	r3, #1
 800213e:	75fb      	strb	r3, [r7, #23]

    }


    return stat;
 8002140:	7dfb      	ldrb	r3, [r7, #23]


}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	0800b55c 	.word	0x0800b55c
 8002150:	0800b560 	.word	0x0800b560

08002154 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_>:

enum Parsing_Checking::status Parsing_Checking::parseDate_Time_Timezone( char *buffer, uint16_t bufferLen ,char *datebuf, char *timebuf, char *timezonebuf)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b0b4      	sub	sp, #208	@ 0xd0
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	80fb      	strh	r3, [r7, #6]
	enum status stat = sys_ok;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7


	char temp[100];

	char compare_sign[10];
	int8_t useSign = -1;
 800216a:	23ff      	movs	r3, #255	@ 0xff
 800216c:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6


	std::strncpy(temp,buffer,bufferLen);
 8002170:	88fa      	ldrh	r2, [r7, #6]
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	68b9      	ldr	r1, [r7, #8]
 8002178:	4618      	mov	r0, r3
 800217a:	f006 ffbb 	bl	80090f4 <strncpy>

	if(!std::strstr((const char *)temp,"+CCLK:"))
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	497b      	ldr	r1, [pc, #492]	@ (8002370 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x21c>)
 8002184:	4618      	mov	r0, r3
 8002186:	f007 f825 	bl	80091d4 <strstr>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x40>
	{

		return sys_notFound;
 8002190:	2302      	movs	r3, #2
 8002192:	e0e9      	b.n	8002368 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x214>

	}

	Scolonpos = std::strchr(temp, ':');
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	213a      	movs	r1, #58	@ 0x3a
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff9a 	bl	80020d4 <_ZSt6strchrPci>
 80021a0:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0


	if(Scolonpos != nullptr)
 80021a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d018      	beq.n	80021de <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x8a>
	{
		Ncolonpos = Scolonpos - temp;
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
        Ncolonpos = Ncolonpos + 3;
 80021ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021be:	3303      	adds	r3, #3
 80021c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	else
	{
		return sys_notFound;
	}

	Scommapos = std::strchr(temp, ',');
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	212c      	movs	r1, #44	@ 0x2c
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff82 	bl	80020d4 <_ZSt6strchrPci>
 80021d0:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
	if(Scommapos != nullptr)
 80021d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01b      	beq.n	8002214 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0xc0>
 80021dc:	e001      	b.n	80021e2 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x8e>
		return sys_notFound;
 80021de:	2302      	movs	r3, #2
 80021e0:	e0c2      	b.n	8002368 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x214>
	{
		Ncommapos = Scommapos - temp;
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		Ncommapos = Ncommapos + 1;
 80021f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021f4:	3301      	adds	r3, #1
 80021f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	{
		return sys_notFound;
	}


	Sminuspos = std::strchr(temp, '-');
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	212d      	movs	r1, #45	@ 0x2d
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff67 	bl	80020d4 <_ZSt6strchrPci>
 8002206:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
	if(Sminuspos != nullptr)
 800220a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d011      	beq.n	8002236 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0xe2>
 8002212:	e001      	b.n	8002218 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0xc4>
		return sys_notFound;
 8002214:	2302      	movs	r3, #2
 8002216:	e0a7      	b.n	8002368 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x214>
	{
		Nminuspos = Sminuspos - temp;
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		std::strcpy(compare_sign,"-");
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	222d      	movs	r2, #45	@ 0x2d
 800222c:	801a      	strh	r2, [r3, #0]
		useSign = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
 8002234:	e01c      	b.n	8002270 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x11c>
	}
	else
	{
		Spluspos = std::strchr(temp, '+');
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	212b      	movs	r1, #43	@ 0x2b
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff49 	bl	80020d4 <_ZSt6strchrPci>
 8002242:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
		if(Spluspos != nullptr)
 8002246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00e      	beq.n	800226c <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x118>
		{
			Npluspos = Spluspos - temp;
 800224e:	f107 031c 	add.w	r3, r7, #28
 8002252:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			std::strcpy(compare_sign,"+");
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	222b      	movs	r2, #43	@ 0x2b
 8002262:	801a      	strh	r2, [r3, #0]
			useSign = 1;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
 800226a:	e001      	b.n	8002270 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x11c>
		}
		else
		{
		   return sys_notFound;
 800226c:	2302      	movs	r3, #2
 800226e:	e07b      	b.n	8002368 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x214>
	}




	DatePart = std::strtok(temp + Ncolonpos  , ",");
 8002270:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002274:	f107 021c 	add.w	r2, r7, #28
 8002278:	4413      	add	r3, r2
 800227a:	493e      	ldr	r1, [pc, #248]	@ (8002374 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x220>)
 800227c:	4618      	mov	r0, r3
 800227e:	f006 ff4d 	bl	800911c <strtok>
 8002282:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0



	if(DatePart != nullptr)
 8002286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d04c      	beq.n	8002328 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x1d4>
	{
	    // Split the date part into day, month, and year
	    char* year = std::strtok(DatePart, "/");
 800228e:	493a      	ldr	r1, [pc, #232]	@ (8002378 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x224>)
 8002290:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002294:	f006 ff42 	bl	800911c <strtok>
 8002298:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
	    int year_ = std::atoi(year);
 800229c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80022a0:	f006 f8da 	bl	8008458 <atoi>
 80022a4:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
	    char* monthStr = std::strtok(DatePart+4, "/");
 80022a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022ac:	3304      	adds	r3, #4
 80022ae:	4932      	ldr	r1, [pc, #200]	@ (8002378 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x224>)
 80022b0:	4618      	mov	r0, r3
 80022b2:	f006 ff33 	bl	800911c <strtok>
 80022b6:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    int month = std::atoi(monthStr);
 80022ba:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80022be:	f006 f8cb 	bl	8008458 <atoi>
 80022c2:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	    char* day = std::strtok(DatePart+7, "/");
 80022c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022ca:	3307      	adds	r3, #7
 80022cc:	492a      	ldr	r1, [pc, #168]	@ (8002378 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x224>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	f006 ff24 	bl	800911c <strtok>
 80022d4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	    int day_ = std::atoi(day);
 80022d8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80022dc:	f006 f8bc 	bl	8008458 <atoi>
 80022e0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

	    std::snprintf(datebuf, 20, "%02d-%s-%02d", day_, months[month], year_);
 80022e4:	4a25      	ldr	r2, [pc, #148]	@ (800237c <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x228>)
 80022e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80022f2:	9201      	str	r2, [sp, #4]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022fa:	4a21      	ldr	r2, [pc, #132]	@ (8002380 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x22c>)
 80022fc:	2114      	movs	r1, #20
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	f006 fe4c 	bl	8008f9c <sniprintf>
	}




	TimePart = std::strtok(temp + Ncommapos  , compare_sign);
 8002304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002308:	f107 021c 	add.w	r2, r7, #28
 800230c:	4413      	add	r3, r2
 800230e:	f107 0210 	add.w	r2, r7, #16
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f006 ff01 	bl	800911c <strtok>
 800231a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

	if(TimePart != nullptr)
 800231e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002322:	2b00      	cmp	r3, #0
 8002324:	d01f      	beq.n	8002366 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x212>
 8002326:	e001      	b.n	800232c <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x1d8>
		return sys_notFound;
 8002328:	2302      	movs	r3, #2
 800232a:	e01d      	b.n	8002368 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x214>
	{
		std::strcpy(timebuf,TimePart);
 800232c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002330:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002334:	f007 f831 	bl	800939a <strcpy>
	  return sys_notFound;

	}


	uint16_t len = strlen(TimePart);
 8002338:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800233c:	f7fd ffa0 	bl	8000280 <strlen>
 8002340:	4603      	mov	r3, r0
 8002342:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

	std::strncpy(timezonebuf,buffer + Ncommapos + len  ,3);
 8002346:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800234a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800234e:	4413      	add	r3, r2
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	4413      	add	r3, r2
 8002354:	2203      	movs	r2, #3
 8002356:	4619      	mov	r1, r3
 8002358:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800235c:	f006 feca 	bl	80090f4 <strncpy>



	  return stat;
 8002360:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8002364:	e000      	b.n	8002368 <_ZN10System_sys16Parsing_Checking23parseDate_Time_TimezoneEPctS1_S1_S1_+0x214>
	  return sys_notFound;
 8002366:	2302      	movs	r3, #2

}
 8002368:	4618      	mov	r0, r3
 800236a:	37c8      	adds	r7, #200	@ 0xc8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	0800b59c 	.word	0x0800b59c
 8002374:	0800b5a4 	.word	0x0800b5a4
 8002378:	0800b5a8 	.word	0x0800b5a8
 800237c:	20000000 	.word	0x20000000
 8002380:	0800b5ac 	.word	0x0800b5ac

08002384 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_>:

enum Parsing_Checking::status Parsing_Checking::parseSkipCharnDTillEndChar(char *buffer, uint16_t bufferLen,char *CheckString,
		                                                         uint8_t skipChar,uint8_t endChar,char *databuf)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b0a2      	sub	sp, #136	@ 0x88
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	80fb      	strh	r3, [r7, #6]


	enum status stat = sys_notFound;
 8002394:	2302      	movs	r3, #2
 8002396:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    uint16_t len = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	char temp[100];

	std::strncpy(temp,buffer,bufferLen);
 80023a0:	88fa      	ldrh	r2, [r7, #6]
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f006 fea3 	bl	80090f4 <strncpy>

	if(!std::strstr((const char *)temp,CheckString))
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f006 ff0d 	bl	80091d4 <strstr>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x40>
	{

		return sys_notFound;
 80023c0:	2302      	movs	r3, #2
 80023c2:	e068      	b.n	8002496 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x112>
	char *Scolonpos;
	int Nendpos;
	char *Sendpos;


	Scolonpos = std::strchr(temp, skipChar);
 80023c4:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fe80 	bl	80020d4 <_ZSt6strchrPci>
 80023d4:	67b8      	str	r0, [r7, #120]	@ 0x78


	if(Scolonpos != nullptr)
 80023d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d015      	beq.n	8002408 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x84>
	{
		Ncolonpos = Scolonpos - temp;
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		if(skipChar == ':')
 80023e8:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80023ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80023ee:	d105      	bne.n	80023fc <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x78>
        {
			Ncolonpos = Ncolonpos + 2;
 80023f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023f4:	3302      	adds	r3, #2
 80023f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023fa:	e007      	b.n	800240c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x88>
        }
		else
		{
			Ncolonpos = Ncolonpos + 1;
 80023fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002400:	3301      	adds	r3, #1
 8002402:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002406:	e001      	b.n	800240c <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x88>
		}
	}
	else
	{
		return sys_notFound;
 8002408:	2302      	movs	r3, #2
 800240a:	e044      	b.n	8002496 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x112>
	}


	uint16_t buf_index = Ncolonpos;
 800240c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002410:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 8002414:	e030      	b.n	8002478 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xf4>
	{

		if(buffer[buf_index] != endChar)
 8002416:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	4413      	add	r3, r2
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 8002424:	429a      	cmp	r2, r3
 8002426:	d00b      	beq.n	8002440 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xbc>
		{
			databuf[len] = buffer[buf_index];
 8002428:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	441a      	add	r2, r3
 8002430:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002434:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002438:	440b      	add	r3, r1
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	701a      	strb	r2, [r3, #0]
 800243e:	e011      	b.n	8002464 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xe0>

		}else if(buffer[buf_index] == endChar)
 8002440:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	4413      	add	r3, r2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 800244e:	429a      	cmp	r2, r3
 8002450:	d108      	bne.n	8002464 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0xe0>
		{
			databuf[len] = 0x00;
 8002452:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002456:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800245a:	4413      	add	r3, r2
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
			return sys_ok;
 8002460:	2300      	movs	r3, #0
 8002462:	e018      	b.n	8002496 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x112>
		}


		buf_index++;
 8002464:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8002468:	3301      	adds	r3, #1
 800246a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		len++;
 800246e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002472:	3301      	adds	r3, #1
 8002474:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	while(len < bufferLen - Ncolonpos && buf_index < bufferLen)
 8002478:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800247c:	88f9      	ldrh	r1, [r7, #6]
 800247e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002482:	1acb      	subs	r3, r1, r3
 8002484:	429a      	cmp	r2, r3
 8002486:	da04      	bge.n	8002492 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x10e>
 8002488:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	429a      	cmp	r2, r3
 8002490:	d3c1      	bcc.n	8002416 <_ZN10System_sys16Parsing_Checking26parseSkipCharnDTillEndCharEPctS1_hhS1_+0x92>

	}


	  return stat;
 8002492:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
}
 8002496:	4618      	mov	r0, r3
 8002498:	3788      	adds	r7, #136	@ 0x88
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024a6:	463b      	mov	r3, r7
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024b2:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024b4:	4a21      	ldr	r2, [pc, #132]	@ (800253c <MX_ADC1_Init+0x9c>)
 80024b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80024c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024d2:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024da:	4b17      	ldr	r3, [pc, #92]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024dc:	2200      	movs	r2, #0
 80024de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024e0:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024e2:	4a17      	ldr	r2, [pc, #92]	@ (8002540 <MX_ADC1_Init+0xa0>)
 80024e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024e6:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024f2:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <MX_ADC1_Init+0x98>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002500:	480d      	ldr	r0, [pc, #52]	@ (8002538 <MX_ADC1_Init+0x98>)
 8002502:	f000 fd29 	bl	8002f58 <HAL_ADC_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800250c:	f000 f960 	bl	80027d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002510:	2300      	movs	r3, #0
 8002512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002514:	2301      	movs	r3, #1
 8002516:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002518:	2307      	movs	r3, #7
 800251a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800251c:	463b      	mov	r3, r7
 800251e:	4619      	mov	r1, r3
 8002520:	4805      	ldr	r0, [pc, #20]	@ (8002538 <MX_ADC1_Init+0x98>)
 8002522:	f000 fd5d 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800252c:	f000 f950 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	2000135c 	.word	0x2000135c
 800253c:	40012000 	.word	0x40012000
 8002540:	0f000001 	.word	0x0f000001

08002544 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	@ 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a17      	ldr	r2, [pc, #92]	@ (80025c0 <HAL_ADC_MspInit+0x7c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d127      	bne.n	80025b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <HAL_ADC_MspInit+0x80>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256e:	4a15      	ldr	r2, [pc, #84]	@ (80025c4 <HAL_ADC_MspInit+0x80>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002574:	6453      	str	r3, [r2, #68]	@ 0x44
 8002576:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <HAL_ADC_MspInit+0x80>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <HAL_ADC_MspInit+0x80>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	4a0e      	ldr	r2, [pc, #56]	@ (80025c4 <HAL_ADC_MspInit+0x80>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6313      	str	r3, [r2, #48]	@ 0x30
 8002592:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <HAL_ADC_MspInit+0x80>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_0_LevelSensor_Pin;
 800259e:	2301      	movs	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025a2:	2303      	movs	r3, #3
 80025a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_0_LevelSensor_GPIO_Port, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	4805      	ldr	r0, [pc, #20]	@ (80025c8 <HAL_ADC_MspInit+0x84>)
 80025b2:	f001 f8a7 	bl	8003704 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80025b6:	bf00      	nop
 80025b8:	3728      	adds	r7, #40	@ 0x28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40012000 	.word	0x40012000
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020000 	.word	0x40020000

080025cc <MX_FREERTOS_Init>:
#include "main.h"
#include "app_main.hpp"

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

void MX_FREERTOS_Init(void) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0


	app_mainC();
 80025d0:	f7fe fd14 	bl	8000ffc <app_mainC>
    vTaskStartScheduler();
 80025d4:	f004 fa5c 	bl	8006a90 <vTaskStartScheduler>
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	4b2a      	ldr	r3, [pc, #168]	@ (80026a0 <MX_GPIO_Init+0xc4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	4a29      	ldr	r2, [pc, #164]	@ (80026a0 <MX_GPIO_Init+0xc4>)
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	6313      	str	r3, [r2, #48]	@ 0x30
 8002602:	4b27      	ldr	r3, [pc, #156]	@ (80026a0 <MX_GPIO_Init+0xc4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	4b23      	ldr	r3, [pc, #140]	@ (80026a0 <MX_GPIO_Init+0xc4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	4a22      	ldr	r2, [pc, #136]	@ (80026a0 <MX_GPIO_Init+0xc4>)
 8002618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800261c:	6313      	str	r3, [r2, #48]	@ 0x30
 800261e:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <MX_GPIO_Init+0xc4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <MX_GPIO_Init+0xc4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	4a1b      	ldr	r2, [pc, #108]	@ (80026a0 <MX_GPIO_Init+0xc4>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6313      	str	r3, [r2, #48]	@ 0x30
 800263a:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <MX_GPIO_Init+0xc4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(alive_led_GPIO_Port, alive_led_Pin, GPIO_PIN_RESET);
 8002646:	2200      	movs	r2, #0
 8002648:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800264c:	4815      	ldr	r0, [pc, #84]	@ (80026a4 <MX_GPIO_Init+0xc8>)
 800264e:	f001 f9dd 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8002652:	2200      	movs	r2, #0
 8002654:	2110      	movs	r1, #16
 8002656:	4814      	ldr	r0, [pc, #80]	@ (80026a8 <MX_GPIO_Init+0xcc>)
 8002658:	f001 f9d8 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = alive_led_Pin;
 800265c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002662:	2301      	movs	r3, #1
 8002664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(alive_led_GPIO_Port, &GPIO_InitStruct);
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	4619      	mov	r1, r3
 8002674:	480b      	ldr	r0, [pc, #44]	@ (80026a4 <MX_GPIO_Init+0xc8>)
 8002676:	f001 f845 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800267a:	2310      	movs	r3, #16
 800267c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267e:	2301      	movs	r3, #1
 8002680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800268a:	f107 030c 	add.w	r3, r7, #12
 800268e:	4619      	mov	r1, r3
 8002690:	4805      	ldr	r0, [pc, #20]	@ (80026a8 <MX_GPIO_Init+0xcc>)
 8002692:	f001 f837 	bl	8003704 <HAL_GPIO_Init>

}
 8002696:	bf00      	nop
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020800 	.word	0x40020800
 80026a8:	40020000 	.word	0x40020000

080026ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026b0:	f000 fc10 	bl	8002ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026b4:	f000 f810 	bl	80026d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026b8:	f7ff ff90 	bl	80025dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80026bc:	f000 fa98 	bl	8002bf0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80026c0:	f000 fac0 	bl	8002c44 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80026c4:	f000 fae8 	bl	8002c98 <MX_USART6_UART_Init>
  MX_TIM11_Init();
 80026c8:	f000 fa4c 	bl	8002b64 <MX_TIM11_Init>
  MX_ADC1_Init();
 80026cc:	f7ff fee8 	bl	80024a0 <MX_ADC1_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#endif
  MX_FREERTOS_Init();
 80026d0:	f7ff ff7c 	bl	80025cc <MX_FREERTOS_Init>
  while (1)
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <main+0x28>

080026d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b094      	sub	sp, #80	@ 0x50
 80026dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026de:	f107 0320 	add.w	r3, r7, #32
 80026e2:	2230      	movs	r2, #48	@ 0x30
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f006 fcef 	bl	80090ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	4b28      	ldr	r3, [pc, #160]	@ (80027a4 <SystemClock_Config+0xcc>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	4a27      	ldr	r2, [pc, #156]	@ (80027a4 <SystemClock_Config+0xcc>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270a:	6413      	str	r3, [r2, #64]	@ 0x40
 800270c:	4b25      	ldr	r3, [pc, #148]	@ (80027a4 <SystemClock_Config+0xcc>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <SystemClock_Config+0xd0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002724:	4a20      	ldr	r2, [pc, #128]	@ (80027a8 <SystemClock_Config+0xd0>)
 8002726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <SystemClock_Config+0xd0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002738:	2301      	movs	r3, #1
 800273a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800273c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002742:	2302      	movs	r3, #2
 8002744:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002746:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800274a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800274c:	2319      	movs	r3, #25
 800274e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002750:	23a8      	movs	r3, #168	@ 0xa8
 8002752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002754:	2302      	movs	r3, #2
 8002756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002758:	2304      	movs	r3, #4
 800275a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800275c:	f107 0320 	add.w	r3, r7, #32
 8002760:	4618      	mov	r0, r3
 8002762:	f001 f987 	bl	8003a74 <HAL_RCC_OscConfig>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800276c:	f000 f830 	bl	80027d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002770:	230f      	movs	r3, #15
 8002772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002774:	2302      	movs	r3, #2
 8002776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800277c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	2102      	movs	r1, #2
 800278c:	4618      	mov	r0, r3
 800278e:	f001 fbe9 	bl	8003f64 <HAL_RCC_ClockConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002798:	f000 f81a 	bl	80027d0 <Error_Handler>
  }
}
 800279c:	bf00      	nop
 800279e:	3750      	adds	r7, #80	@ 0x50
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40007000 	.word	0x40007000

080027ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027be:	f000 fbab 	bl	8002f18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40000400 	.word	0x40000400

080027d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
}
 80027d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <Error_Handler+0x8>

080027dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_MspInit+0x54>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <HAL_MspInit+0x54>)
 80027ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <HAL_MspInit+0x54>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_MspInit+0x54>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	4a0a      	ldr	r2, [pc, #40]	@ (8002830 <HAL_MspInit+0x54>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	@ 0x40
 800280e:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_MspInit+0x54>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	210f      	movs	r1, #15
 800281e:	f06f 0001 	mvn.w	r0, #1
 8002822:	f000 feb3 	bl	800358c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800

08002834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08e      	sub	sp, #56	@ 0x38
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	4b33      	ldr	r3, [pc, #204]	@ (8002918 <HAL_InitTick+0xe4>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	4a32      	ldr	r2, [pc, #200]	@ (8002918 <HAL_InitTick+0xe4>)
 800284e:	f043 0302 	orr.w	r3, r3, #2
 8002852:	6413      	str	r3, [r2, #64]	@ 0x40
 8002854:	4b30      	ldr	r3, [pc, #192]	@ (8002918 <HAL_InitTick+0xe4>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002860:	f107 0210 	add.w	r2, r7, #16
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f001 fd5a 	bl	8004324 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800287a:	f001 fd2b 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 800287e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002880:	e004      	b.n	800288c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002882:	f001 fd27 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8002886:	4603      	mov	r3, r0
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800288c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800288e:	4a23      	ldr	r2, [pc, #140]	@ (800291c <HAL_InitTick+0xe8>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	0c9b      	lsrs	r3, r3, #18
 8002896:	3b01      	subs	r3, #1
 8002898:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800289a:	4b21      	ldr	r3, [pc, #132]	@ (8002920 <HAL_InitTick+0xec>)
 800289c:	4a21      	ldr	r2, [pc, #132]	@ (8002924 <HAL_InitTick+0xf0>)
 800289e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80028a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002920 <HAL_InitTick+0xec>)
 80028a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028a6:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80028a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002920 <HAL_InitTick+0xec>)
 80028aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ac:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80028ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002920 <HAL_InitTick+0xec>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002920 <HAL_InitTick+0xec>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ba:	4b19      	ldr	r3, [pc, #100]	@ (8002920 <HAL_InitTick+0xec>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80028c0:	4817      	ldr	r0, [pc, #92]	@ (8002920 <HAL_InitTick+0xec>)
 80028c2:	f001 fd61 	bl	8004388 <HAL_TIM_Base_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80028cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d11b      	bne.n	800290c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80028d4:	4812      	ldr	r0, [pc, #72]	@ (8002920 <HAL_InitTick+0xec>)
 80028d6:	f001 fda7 	bl	8004428 <HAL_TIM_Base_Start_IT>
 80028da:	4603      	mov	r3, r0
 80028dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80028e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d111      	bne.n	800290c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028e8:	201d      	movs	r0, #29
 80028ea:	f000 fe6b 	bl	80035c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b0f      	cmp	r3, #15
 80028f2:	d808      	bhi.n	8002906 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80028f4:	2200      	movs	r2, #0
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	201d      	movs	r0, #29
 80028fa:	f000 fe47 	bl	800358c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002928 <HAL_InitTick+0xf4>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e002      	b.n	800290c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800290c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002910:	4618      	mov	r0, r3
 8002912:	3738      	adds	r7, #56	@ 0x38
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	431bde83 	.word	0x431bde83
 8002920:	200013a4 	.word	0x200013a4
 8002924:	40000400 	.word	0x40000400
 8002928:	20000038 	.word	0x20000038

0800292c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <NMI_Handler+0x4>

08002934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <HardFault_Handler+0x4>

0800293c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <MemManage_Handler+0x4>

08002944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <BusFault_Handler+0x4>

0800294c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <UsageFault_Handler+0x4>

08002954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002968:	4802      	ldr	r0, [pc, #8]	@ (8002974 <TIM3_IRQHandler+0x10>)
 800296a:	f001 fdbf 	bl	80044ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200013a4 	.word	0x200013a4

08002978 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800297c:	4802      	ldr	r0, [pc, #8]	@ (8002988 <USART1_IRQHandler+0x10>)
 800297e:	f002 f91f 	bl	8004bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20001438 	.word	0x20001438

0800298c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif

  My_UART_IRQHandlerC(&huart2);
 8002990:	4802      	ldr	r0, [pc, #8]	@ (800299c <USART2_IRQHandler+0x10>)
 8002992:	f7ff fb53 	bl	800203c <My_UART_IRQHandlerC>
  /* USER CODE END USART2_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20001480 	.word	0x20001480

080029a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80029a4:	4802      	ldr	r0, [pc, #8]	@ (80029b0 <USART6_IRQHandler+0x10>)
 80029a6:	f002 f90b 	bl	8004bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200014c8 	.word	0x200014c8

080029b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return 1;
 80029b8:	2301      	movs	r3, #1
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_kill>:

int _kill(int pid, int sig)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029ce:	f006 fcb7 	bl	8009340 <__errno>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2216      	movs	r2, #22
 80029d6:	601a      	str	r2, [r3, #0]
  return -1;
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_exit>:

void _exit (int status)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ffe7 	bl	80029c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029f6:	bf00      	nop
 80029f8:	e7fd      	b.n	80029f6 <_exit+0x12>

080029fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	e00a      	b.n	8002a22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a0c:	f3af 8000 	nop.w
 8002a10:	4601      	mov	r1, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	60ba      	str	r2, [r7, #8]
 8002a18:	b2ca      	uxtb	r2, r1
 8002a1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	dbf0      	blt.n	8002a0c <_read+0x12>
  }

  return len;
 8002a2a:	687b      	ldr	r3, [r7, #4]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e009      	b.n	8002a5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	60ba      	str	r2, [r7, #8]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3301      	adds	r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	dbf1      	blt.n	8002a46 <_write+0x12>
  }
  return len;
 8002a62:	687b      	ldr	r3, [r7, #4]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_close>:

int _close(int file)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a94:	605a      	str	r2, [r3, #4]
  return 0;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_isatty>:

int _isatty(int file)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002adc:	4a14      	ldr	r2, [pc, #80]	@ (8002b30 <_sbrk+0x5c>)
 8002ade:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <_sbrk+0x60>)
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ae8:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <_sbrk+0x64>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af0:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <_sbrk+0x64>)
 8002af2:	4a12      	ldr	r2, [pc, #72]	@ (8002b3c <_sbrk+0x68>)
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002af6:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <_sbrk+0x64>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d207      	bcs.n	8002b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b04:	f006 fc1c 	bl	8009340 <__errno>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	e009      	b.n	8002b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b14:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <_sbrk+0x64>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <_sbrk+0x64>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	4a05      	ldr	r2, [pc, #20]	@ (8002b38 <_sbrk+0x64>)
 8002b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20010000 	.word	0x20010000
 8002b34:	00000400 	.word	0x00000400
 8002b38:	200013ec 	.word	0x200013ec
 8002b3c:	20009978 	.word	0x20009978

08002b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b44:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <SystemInit+0x20>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4a:	4a05      	ldr	r2, [pc, #20]	@ (8002b60 <SystemInit+0x20>)
 8002b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002b68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba4 <MX_TIM11_Init+0x40>)
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba8 <MX_TIM11_Init+0x44>)
 8002b6c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <MX_TIM11_Init+0x40>)
 8002b70:	2253      	movs	r2, #83	@ 0x53
 8002b72:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <MX_TIM11_Init+0x40>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba4 <MX_TIM11_Init+0x40>)
 8002b7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b80:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b82:	4b08      	ldr	r3, [pc, #32]	@ (8002ba4 <MX_TIM11_Init+0x40>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <MX_TIM11_Init+0x40>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b8e:	4805      	ldr	r0, [pc, #20]	@ (8002ba4 <MX_TIM11_Init+0x40>)
 8002b90:	f001 fbfa 	bl	8004388 <HAL_TIM_Base_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002b9a:	f7ff fe19 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200013f0 	.word	0x200013f0
 8002ba8:	40014800 	.word	0x40014800

08002bac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8002be8 <HAL_TIM_Base_MspInit+0x3c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10d      	bne.n	8002bda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <HAL_TIM_Base_MspInit+0x40>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	4a09      	ldr	r2, [pc, #36]	@ (8002bec <HAL_TIM_Base_MspInit+0x40>)
 8002bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bce:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <HAL_TIM_Base_MspInit+0x40>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40014800 	.word	0x40014800
 8002bec:	40023800 	.word	0x40023800

08002bf0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <MX_USART1_UART_Init+0x4c>)
 8002bf6:	4a12      	ldr	r2, [pc, #72]	@ (8002c40 <MX_USART1_UART_Init+0x50>)
 8002bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bfa:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <MX_USART1_UART_Init+0x4c>)
 8002bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c02:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <MX_USART1_UART_Init+0x4c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c08:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <MX_USART1_UART_Init+0x4c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <MX_USART1_UART_Init+0x4c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c14:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <MX_USART1_UART_Init+0x4c>)
 8002c16:	220c      	movs	r2, #12
 8002c18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1a:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <MX_USART1_UART_Init+0x4c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c20:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <MX_USART1_UART_Init+0x4c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c26:	4805      	ldr	r0, [pc, #20]	@ (8002c3c <MX_USART1_UART_Init+0x4c>)
 8002c28:	f001 fe18 	bl	800485c <HAL_UART_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c32:	f7ff fdcd 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20001438 	.word	0x20001438
 8002c40:	40011000 	.word	0x40011000

08002c44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c48:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <MX_USART2_UART_Init+0x4c>)
 8002c4a:	4a12      	ldr	r2, [pc, #72]	@ (8002c94 <MX_USART2_UART_Init+0x50>)
 8002c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <MX_USART2_UART_Init+0x4c>)
 8002c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <MX_USART2_UART_Init+0x4c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <MX_USART2_UART_Init+0x4c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <MX_USART2_UART_Init+0x4c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c68:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <MX_USART2_UART_Init+0x4c>)
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <MX_USART2_UART_Init+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <MX_USART2_UART_Init+0x4c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c7a:	4805      	ldr	r0, [pc, #20]	@ (8002c90 <MX_USART2_UART_Init+0x4c>)
 8002c7c:	f001 fdee 	bl	800485c <HAL_UART_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c86:	f7ff fda3 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20001480 	.word	0x20001480
 8002c94:	40004400 	.word	0x40004400

08002c98 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <MX_USART6_UART_Init+0x4c>)
 8002c9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ce8 <MX_USART6_UART_Init+0x50>)
 8002ca0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002ca2:	4b10      	ldr	r3, [pc, #64]	@ (8002ce4 <MX_USART6_UART_Init+0x4c>)
 8002ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ca8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002caa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <MX_USART6_UART_Init+0x4c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce4 <MX_USART6_UART_Init+0x4c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <MX_USART6_UART_Init+0x4c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <MX_USART6_UART_Init+0x4c>)
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc2:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <MX_USART6_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <MX_USART6_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002cce:	4805      	ldr	r0, [pc, #20]	@ (8002ce4 <MX_USART6_UART_Init+0x4c>)
 8002cd0:	f001 fdc4 	bl	800485c <HAL_UART_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002cda:	f7ff fd79 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200014c8 	.word	0x200014c8
 8002ce8:	40011400 	.word	0x40011400

08002cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08e      	sub	sp, #56	@ 0x38
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a58      	ldr	r2, [pc, #352]	@ (8002e6c <HAL_UART_MspInit+0x180>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d135      	bne.n	8002d7a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	4b57      	ldr	r3, [pc, #348]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	4a56      	ldr	r2, [pc, #344]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002d18:	f043 0310 	orr.w	r3, r3, #16
 8002d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1e:	4b54      	ldr	r3, [pc, #336]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	623b      	str	r3, [r7, #32]
 8002d28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	4b50      	ldr	r3, [pc, #320]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	4a4f      	ldr	r2, [pc, #316]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = HMI_USART1_TX_Pin|HMI_USART1_RX_Pin;
 8002d46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d58:	2307      	movs	r3, #7
 8002d5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d60:	4619      	mov	r1, r3
 8002d62:	4844      	ldr	r0, [pc, #272]	@ (8002e74 <HAL_UART_MspInit+0x188>)
 8002d64:	f000 fcce 	bl	8003704 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2105      	movs	r1, #5
 8002d6c:	2025      	movs	r0, #37	@ 0x25
 8002d6e:	f000 fc0d 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d72:	2025      	movs	r0, #37	@ 0x25
 8002d74:	f000 fc26 	bl	80035c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002d78:	e073      	b.n	8002e62 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e78 <HAL_UART_MspInit+0x18c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d134      	bne.n	8002dee <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	4b39      	ldr	r3, [pc, #228]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	4a38      	ldr	r2, [pc, #224]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d94:	4b36      	ldr	r3, [pc, #216]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	4b32      	ldr	r3, [pc, #200]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da8:	4a31      	ldr	r2, [pc, #196]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db0:	4b2f      	ldr	r3, [pc, #188]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GSM_USART2_TX_Pin|GSM_USART2_RX_Pin;
 8002dbc:	230c      	movs	r3, #12
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dcc:	2307      	movs	r3, #7
 8002dce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4827      	ldr	r0, [pc, #156]	@ (8002e74 <HAL_UART_MspInit+0x188>)
 8002dd8:	f000 fc94 	bl	8003704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2105      	movs	r1, #5
 8002de0:	2026      	movs	r0, #38	@ 0x26
 8002de2:	f000 fbd3 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002de6:	2026      	movs	r0, #38	@ 0x26
 8002de8:	f000 fbec 	bl	80035c4 <HAL_NVIC_EnableIRQ>
}
 8002dec:	e039      	b.n	8002e62 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART6)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a22      	ldr	r2, [pc, #136]	@ (8002e7c <HAL_UART_MspInit+0x190>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d134      	bne.n	8002e62 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002df8:	2300      	movs	r3, #0
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e00:	4a1b      	ldr	r2, [pc, #108]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002e02:	f043 0320 	orr.w	r3, r3, #32
 8002e06:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e08:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1c:	4a14      	ldr	r2, [pc, #80]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e24:	4b12      	ldr	r3, [pc, #72]	@ (8002e70 <HAL_UART_MspInit+0x184>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INVERTER_USART6_TX_Pin|INVERTER_USART6_RX_Pin;
 8002e30:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e42:	2308      	movs	r3, #8
 8002e44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4809      	ldr	r0, [pc, #36]	@ (8002e74 <HAL_UART_MspInit+0x188>)
 8002e4e:	f000 fc59 	bl	8003704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2105      	movs	r1, #5
 8002e56:	2047      	movs	r0, #71	@ 0x47
 8002e58:	f000 fb98 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e5c:	2047      	movs	r0, #71	@ 0x47
 8002e5e:	f000 fbb1 	bl	80035c4 <HAL_NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3738      	adds	r7, #56	@ 0x38
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40011000 	.word	0x40011000
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40004400 	.word	0x40004400
 8002e7c:	40011400 	.word	0x40011400

08002e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e84:	f7ff fe5c 	bl	8002b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e88:	480c      	ldr	r0, [pc, #48]	@ (8002ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e8a:	490d      	ldr	r1, [pc, #52]	@ (8002ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e90:	e002      	b.n	8002e98 <LoopCopyDataInit>

08002e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e96:	3304      	adds	r3, #4

08002e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e9c:	d3f9      	bcc.n	8002e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea4:	e001      	b.n	8002eaa <LoopFillZerobss>

08002ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea8:	3204      	adds	r2, #4

08002eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eac:	d3fb      	bcc.n	8002ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eae:	f006 fa4d 	bl	800934c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eb2:	f7ff fbfb 	bl	80026ac <main>
  bx  lr    
 8002eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002eb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002ec4:	0800ba80 	.word	0x0800ba80
  ldr r2, =_sbss
 8002ec8:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002ecc:	20009974 	.word	0x20009974

08002ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed0:	e7fe      	b.n	8002ed0 <ADC_IRQHandler>
	...

08002ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <HAL_Init+0x40>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <HAL_Init+0x40>)
 8002ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f14 <HAL_Init+0x40>)
 8002eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a07      	ldr	r2, [pc, #28]	@ (8002f14 <HAL_Init+0x40>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002efc:	2003      	movs	r0, #3
 8002efe:	f000 fb3a 	bl	8003576 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f02:	200f      	movs	r0, #15
 8002f04:	f7ff fc96 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f08:	f7ff fc68 	bl	80027dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023c00 	.word	0x40023c00

08002f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <HAL_IncTick+0x20>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_IncTick+0x24>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	4a04      	ldr	r2, [pc, #16]	@ (8002f3c <HAL_IncTick+0x24>)
 8002f2a:	6013      	str	r3, [r2, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	2000003c 	.word	0x2000003c
 8002f3c:	20001510 	.word	0x20001510

08002f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return uwTick;
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <HAL_GetTick+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20001510 	.word	0x20001510

08002f58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e033      	b.n	8002fd6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff fae4 	bl	8002544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d118      	bne.n	8002fc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f9e:	f023 0302 	bic.w	r3, r3, #2
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f93a 	bl	8003224 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	f043 0201 	orr.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fc6:	e001      	b.n	8002fcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x1c>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e105      	b.n	8003208 <HAL_ADC_ConfigChannel+0x228>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b09      	cmp	r3, #9
 800300a:	d925      	bls.n	8003058 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	3b1e      	subs	r3, #30
 8003022:	2207      	movs	r2, #7
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43da      	mvns	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	400a      	ands	r2, r1
 8003030:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68d9      	ldr	r1, [r3, #12]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	4618      	mov	r0, r3
 8003044:	4603      	mov	r3, r0
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4403      	add	r3, r0
 800304a:	3b1e      	subs	r3, #30
 800304c:	409a      	lsls	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	e022      	b.n	800309e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6919      	ldr	r1, [r3, #16]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	2207      	movs	r2, #7
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	400a      	ands	r2, r1
 800307a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6919      	ldr	r1, [r3, #16]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	4618      	mov	r0, r3
 800308e:	4603      	mov	r3, r0
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4403      	add	r3, r0
 8003094:	409a      	lsls	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d824      	bhi.n	80030f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	3b05      	subs	r3, #5
 80030b8:	221f      	movs	r2, #31
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	400a      	ands	r2, r1
 80030c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b05      	subs	r3, #5
 80030e2:	fa00 f203 	lsl.w	r2, r0, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80030ee:	e04c      	b.n	800318a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b0c      	cmp	r3, #12
 80030f6:	d824      	bhi.n	8003142 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	3b23      	subs	r3, #35	@ 0x23
 800310a:	221f      	movs	r2, #31
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43da      	mvns	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	400a      	ands	r2, r1
 8003118:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	4618      	mov	r0, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b23      	subs	r3, #35	@ 0x23
 8003134:	fa00 f203 	lsl.w	r2, r0, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003140:	e023      	b.n	800318a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	3b41      	subs	r3, #65	@ 0x41
 8003154:	221f      	movs	r2, #31
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	400a      	ands	r2, r1
 8003162:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	4618      	mov	r0, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	3b41      	subs	r3, #65	@ 0x41
 800317e:	fa00 f203 	lsl.w	r2, r0, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800318a:	4b22      	ldr	r3, [pc, #136]	@ (8003214 <HAL_ADC_ConfigChannel+0x234>)
 800318c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a21      	ldr	r2, [pc, #132]	@ (8003218 <HAL_ADC_ConfigChannel+0x238>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d109      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x1cc>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b12      	cmp	r3, #18
 800319e:	d105      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a19      	ldr	r2, [pc, #100]	@ (8003218 <HAL_ADC_ConfigChannel+0x238>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d123      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x21e>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d003      	beq.n	80031c6 <HAL_ADC_ConfigChannel+0x1e6>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b11      	cmp	r3, #17
 80031c4:	d11b      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d111      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <HAL_ADC_ConfigChannel+0x23c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a10      	ldr	r2, [pc, #64]	@ (8003220 <HAL_ADC_ConfigChannel+0x240>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	0c9a      	lsrs	r2, r3, #18
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031f0:	e002      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f9      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40012300 	.word	0x40012300
 8003218:	40012000 	.word	0x40012000
 800321c:	20000034 	.word	0x20000034
 8003220:	431bde83 	.word	0x431bde83

08003224 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800322c:	4b79      	ldr	r3, [pc, #484]	@ (8003414 <ADC_Init+0x1f0>)
 800322e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	431a      	orrs	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	021a      	lsls	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800327c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800329e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	4a58      	ldr	r2, [pc, #352]	@ (8003418 <ADC_Init+0x1f4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6899      	ldr	r1, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6899      	ldr	r1, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	e00f      	b.n	8003322 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003320:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0202 	bic.w	r2, r2, #2
 8003330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6899      	ldr	r1, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7e1b      	ldrb	r3, [r3, #24]
 800333c:	005a      	lsls	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800335e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800336e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	3b01      	subs	r3, #1
 800337c:	035a      	lsls	r2, r3, #13
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	e007      	b.n	8003398 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003396:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	051a      	lsls	r2, r3, #20
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033da:	025a      	lsls	r2, r3, #9
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6899      	ldr	r1, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	029a      	lsls	r2, r3, #10
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	609a      	str	r2, [r3, #8]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40012300 	.word	0x40012300
 8003418:	0f000001 	.word	0x0f000001

0800341c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800342c:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003444:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	@ (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003468:	4b04      	ldr	r3, [pc, #16]	@ (800347c <__NVIC_GetPriorityGrouping+0x18>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 0307 	and.w	r3, r3, #7
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4907      	ldr	r1, [pc, #28]	@ (80034b8 <__NVIC_EnableIRQ+0x38>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db0a      	blt.n	80034e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	490c      	ldr	r1, [pc, #48]	@ (8003508 <__NVIC_SetPriority+0x4c>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	440b      	add	r3, r1
 80034e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e4:	e00a      	b.n	80034fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4908      	ldr	r1, [pc, #32]	@ (800350c <__NVIC_SetPriority+0x50>)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	3b04      	subs	r3, #4
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	440b      	add	r3, r1
 80034fa:	761a      	strb	r2, [r3, #24]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000e100 	.word	0xe000e100
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	@ 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f1c3 0307 	rsb	r3, r3, #7
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf28      	it	cs
 800352e:	2304      	movcs	r3, #4
 8003530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3304      	adds	r3, #4
 8003536:	2b06      	cmp	r3, #6
 8003538:	d902      	bls.n	8003540 <NVIC_EncodePriority+0x30>
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3b03      	subs	r3, #3
 800353e:	e000      	b.n	8003542 <NVIC_EncodePriority+0x32>
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	401a      	ands	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003558:	f04f 31ff 	mov.w	r1, #4294967295
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43d9      	mvns	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	4313      	orrs	r3, r2
         );
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	@ 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ff4c 	bl	800341c <__NVIC_SetPriorityGrouping>
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800359e:	f7ff ff61 	bl	8003464 <__NVIC_GetPriorityGrouping>
 80035a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	6978      	ldr	r0, [r7, #20]
 80035aa:	f7ff ffb1 	bl	8003510 <NVIC_EncodePriority>
 80035ae:	4602      	mov	r2, r0
 80035b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff80 	bl	80034bc <__NVIC_SetPriority>
}
 80035bc:	bf00      	nop
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff54 	bl	8003480 <__NVIC_EnableIRQ>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035ee:	f7ff fca7 	bl	8002f40 <HAL_GetTick>
 80035f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d008      	beq.n	8003612 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2280      	movs	r2, #128	@ 0x80
 8003604:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e052      	b.n	80036b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0216 	bic.w	r2, r2, #22
 8003620:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003630:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <HAL_DMA_Abort+0x62>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0208 	bic.w	r2, r2, #8
 8003650:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003662:	e013      	b.n	800368c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003664:	f7ff fc6c 	bl	8002f40 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b05      	cmp	r3, #5
 8003670:	d90c      	bls.n	800368c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2203      	movs	r2, #3
 800367c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e015      	b.n	80036b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e4      	bne.n	8003664 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369e:	223f      	movs	r2, #63	@ 0x3f
 80036a0:	409a      	lsls	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d004      	beq.n	80036de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2280      	movs	r2, #128	@ 0x80
 80036d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e00c      	b.n	80036f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2205      	movs	r2, #5
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	@ 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e159      	b.n	80039d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003720:	2201      	movs	r2, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	429a      	cmp	r2, r3
 800373a:	f040 8148 	bne.w	80039ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d005      	beq.n	8003756 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003752:	2b02      	cmp	r3, #2
 8003754:	d130      	bne.n	80037b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	2203      	movs	r2, #3
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800378c:	2201      	movs	r2, #1
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 0201 	and.w	r2, r3, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d017      	beq.n	80037f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d123      	bne.n	8003848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	08da      	lsrs	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3208      	adds	r2, #8
 8003808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	220f      	movs	r2, #15
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	08da      	lsrs	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3208      	adds	r2, #8
 8003842:	69b9      	ldr	r1, [r7, #24]
 8003844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	2203      	movs	r2, #3
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0203 	and.w	r2, r3, #3
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a2 	beq.w	80039ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b57      	ldr	r3, [pc, #348]	@ (80039ec <HAL_GPIO_Init+0x2e8>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003892:	4a56      	ldr	r2, [pc, #344]	@ (80039ec <HAL_GPIO_Init+0x2e8>)
 8003894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003898:	6453      	str	r3, [r2, #68]	@ 0x44
 800389a:	4b54      	ldr	r3, [pc, #336]	@ (80039ec <HAL_GPIO_Init+0x2e8>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a6:	4a52      	ldr	r2, [pc, #328]	@ (80039f0 <HAL_GPIO_Init+0x2ec>)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	220f      	movs	r2, #15
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a49      	ldr	r2, [pc, #292]	@ (80039f4 <HAL_GPIO_Init+0x2f0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d019      	beq.n	8003906 <HAL_GPIO_Init+0x202>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a48      	ldr	r2, [pc, #288]	@ (80039f8 <HAL_GPIO_Init+0x2f4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_GPIO_Init+0x1fe>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a47      	ldr	r2, [pc, #284]	@ (80039fc <HAL_GPIO_Init+0x2f8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00d      	beq.n	80038fe <HAL_GPIO_Init+0x1fa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a46      	ldr	r2, [pc, #280]	@ (8003a00 <HAL_GPIO_Init+0x2fc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <HAL_GPIO_Init+0x1f6>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a45      	ldr	r2, [pc, #276]	@ (8003a04 <HAL_GPIO_Init+0x300>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_GPIO_Init+0x1f2>
 80038f2:	2304      	movs	r3, #4
 80038f4:	e008      	b.n	8003908 <HAL_GPIO_Init+0x204>
 80038f6:	2307      	movs	r3, #7
 80038f8:	e006      	b.n	8003908 <HAL_GPIO_Init+0x204>
 80038fa:	2303      	movs	r3, #3
 80038fc:	e004      	b.n	8003908 <HAL_GPIO_Init+0x204>
 80038fe:	2302      	movs	r3, #2
 8003900:	e002      	b.n	8003908 <HAL_GPIO_Init+0x204>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_GPIO_Init+0x204>
 8003906:	2300      	movs	r3, #0
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	f002 0203 	and.w	r2, r2, #3
 800390e:	0092      	lsls	r2, r2, #2
 8003910:	4093      	lsls	r3, r2
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003918:	4935      	ldr	r1, [pc, #212]	@ (80039f0 <HAL_GPIO_Init+0x2ec>)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	089b      	lsrs	r3, r3, #2
 800391e:	3302      	adds	r3, #2
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003926:	4b38      	ldr	r3, [pc, #224]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800394a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003950:	4b2d      	ldr	r3, [pc, #180]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003974:	4a24      	ldr	r2, [pc, #144]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800397a:	4b23      	ldr	r3, [pc, #140]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800399e:	4a1a      	ldr	r2, [pc, #104]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039a4:	4b18      	ldr	r3, [pc, #96]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3301      	adds	r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b0f      	cmp	r3, #15
 80039d8:	f67f aea2 	bls.w	8003720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	3724      	adds	r7, #36	@ 0x24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40013800 	.word	0x40013800
 80039f4:	40020000 	.word	0x40020000
 80039f8:	40020400 	.word	0x40020400
 80039fc:	40020800 	.word	0x40020800
 8003a00:	40020c00 	.word	0x40020c00
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40013c00 	.word	0x40013c00

08003a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a1c:	787b      	ldrb	r3, [r7, #1]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a28:	e003      	b.n	8003a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	041a      	lsls	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	619a      	str	r2, [r3, #24]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a50:	887a      	ldrh	r2, [r7, #2]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4013      	ands	r3, r2
 8003a56:	041a      	lsls	r2, r3, #16
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	43d9      	mvns	r1, r3
 8003a5c:	887b      	ldrh	r3, [r7, #2]
 8003a5e:	400b      	ands	r3, r1
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	619a      	str	r2, [r3, #24]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e267      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d075      	beq.n	8003b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a92:	4b88      	ldr	r3, [pc, #544]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d00c      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9e:	4b85      	ldr	r3, [pc, #532]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d112      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aaa:	4b82      	ldr	r3, [pc, #520]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	4b7e      	ldr	r3, [pc, #504]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d05b      	beq.n	8003b7c <HAL_RCC_OscConfig+0x108>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d157      	bne.n	8003b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e242      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad8:	d106      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x74>
 8003ada:	4b76      	ldr	r3, [pc, #472]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a75      	ldr	r2, [pc, #468]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e01d      	b.n	8003b24 <HAL_RCC_OscConfig+0xb0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x98>
 8003af2:	4b70      	ldr	r3, [pc, #448]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6f      	ldr	r2, [pc, #444]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b6d      	ldr	r3, [pc, #436]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6c      	ldr	r2, [pc, #432]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0xb0>
 8003b0c:	4b69      	ldr	r3, [pc, #420]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a68      	ldr	r2, [pc, #416]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b66      	ldr	r3, [pc, #408]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a65      	ldr	r2, [pc, #404]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7ff fa08 	bl	8002f40 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7ff fa04 	bl	8002f40 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	@ 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e207      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b5b      	ldr	r3, [pc, #364]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0xc0>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7ff f9f4 	bl	8002f40 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7ff f9f0 	bl	8002f40 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	@ 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e1f3      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	4b51      	ldr	r3, [pc, #324]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0xe8>
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d063      	beq.n	8003c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b96:	4b47      	ldr	r3, [pc, #284]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d11c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba2:	4b44      	ldr	r3, [pc, #272]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d116      	bne.n	8003bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	4b41      	ldr	r3, [pc, #260]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x152>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e1c7      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4937      	ldr	r1, [pc, #220]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bda:	e03a      	b.n	8003c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be4:	4b34      	ldr	r3, [pc, #208]	@ (8003cb8 <HAL_RCC_OscConfig+0x244>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7ff f9a9 	bl	8002f40 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf2:	f7ff f9a5 	bl	8002f40 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e1a8      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c10:	4b28      	ldr	r3, [pc, #160]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4925      	ldr	r1, [pc, #148]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
 8003c24:	e015      	b.n	8003c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c26:	4b24      	ldr	r3, [pc, #144]	@ (8003cb8 <HAL_RCC_OscConfig+0x244>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7ff f988 	bl	8002f40 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c34:	f7ff f984 	bl	8002f40 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e187      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d036      	beq.n	8003ccc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d016      	beq.n	8003c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c66:	4b15      	ldr	r3, [pc, #84]	@ (8003cbc <HAL_RCC_OscConfig+0x248>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7ff f968 	bl	8002f40 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c74:	f7ff f964 	bl	8002f40 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e167      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_RCC_OscConfig+0x240>)
 8003c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x200>
 8003c92:	e01b      	b.n	8003ccc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c94:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <HAL_RCC_OscConfig+0x248>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9a:	f7ff f951 	bl	8002f40 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca0:	e00e      	b.n	8003cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca2:	f7ff f94d 	bl	8002f40 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d907      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e150      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	42470000 	.word	0x42470000
 8003cbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc0:	4b88      	ldr	r3, [pc, #544]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ea      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8097 	beq.w	8003e08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cde:	4b81      	ldr	r3, [pc, #516]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10f      	bne.n	8003d0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	4b7d      	ldr	r3, [pc, #500]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b77      	ldr	r3, [pc, #476]	@ (8003ee8 <HAL_RCC_OscConfig+0x474>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d118      	bne.n	8003d48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d16:	4b74      	ldr	r3, [pc, #464]	@ (8003ee8 <HAL_RCC_OscConfig+0x474>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a73      	ldr	r2, [pc, #460]	@ (8003ee8 <HAL_RCC_OscConfig+0x474>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d22:	f7ff f90d 	bl	8002f40 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2a:	f7ff f909 	bl	8002f40 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e10c      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee8 <HAL_RCC_OscConfig+0x474>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x2ea>
 8003d50:	4b64      	ldr	r3, [pc, #400]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d54:	4a63      	ldr	r2, [pc, #396]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d5c:	e01c      	b.n	8003d98 <HAL_RCC_OscConfig+0x324>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x30c>
 8003d66:	4b5f      	ldr	r3, [pc, #380]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	f043 0304 	orr.w	r3, r3, #4
 8003d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d72:	4b5c      	ldr	r3, [pc, #368]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d76:	4a5b      	ldr	r2, [pc, #364]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0x324>
 8003d80:	4b58      	ldr	r3, [pc, #352]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d84:	4a57      	ldr	r2, [pc, #348]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8c:	4b55      	ldr	r3, [pc, #340]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d90:	4a54      	ldr	r2, [pc, #336]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003d92:	f023 0304 	bic.w	r3, r3, #4
 8003d96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d015      	beq.n	8003dcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da0:	f7ff f8ce 	bl	8002f40 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7ff f8ca 	bl	8002f40 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e0cb      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbe:	4b49      	ldr	r3, [pc, #292]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0ee      	beq.n	8003da8 <HAL_RCC_OscConfig+0x334>
 8003dca:	e014      	b.n	8003df6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dcc:	f7ff f8b8 	bl	8002f40 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd4:	f7ff f8b4 	bl	8002f40 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e0b5      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dea:	4b3e      	ldr	r3, [pc, #248]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1ee      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d105      	bne.n	8003e08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfc:	4b39      	ldr	r3, [pc, #228]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e00:	4a38      	ldr	r2, [pc, #224]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80a1 	beq.w	8003f54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e12:	4b34      	ldr	r3, [pc, #208]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d05c      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d141      	bne.n	8003eaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e26:	4b31      	ldr	r3, [pc, #196]	@ (8003eec <HAL_RCC_OscConfig+0x478>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7ff f888 	bl	8002f40 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e34:	f7ff f884 	bl	8002f40 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e087      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	4b27      	ldr	r3, [pc, #156]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	019b      	lsls	r3, r3, #6
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	491b      	ldr	r1, [pc, #108]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eec <HAL_RCC_OscConfig+0x478>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7ff f85d 	bl	8002f40 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7ff f859 	bl	8002f40 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e05c      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x416>
 8003ea8:	e054      	b.n	8003f54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	4b10      	ldr	r3, [pc, #64]	@ (8003eec <HAL_RCC_OscConfig+0x478>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7ff f846 	bl	8002f40 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7ff f842 	bl	8002f40 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e045      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x444>
 8003ed6:	e03d      	b.n	8003f54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e038      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40007000 	.word	0x40007000
 8003eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f60 <HAL_RCC_OscConfig+0x4ec>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d028      	beq.n	8003f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d121      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d11a      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f20:	4013      	ands	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d111      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800

08003f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0cc      	b.n	8004112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f78:	4b68      	ldr	r3, [pc, #416]	@ (800411c <HAL_RCC_ClockConfig+0x1b8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d90c      	bls.n	8003fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b65      	ldr	r3, [pc, #404]	@ (800411c <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b63      	ldr	r3, [pc, #396]	@ (800411c <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0b8      	b.n	8004112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d020      	beq.n	8003fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb8:	4b59      	ldr	r3, [pc, #356]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4a58      	ldr	r2, [pc, #352]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd0:	4b53      	ldr	r3, [pc, #332]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4a52      	ldr	r2, [pc, #328]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fdc:	4b50      	ldr	r3, [pc, #320]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	494d      	ldr	r1, [pc, #308]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d044      	beq.n	8004084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d107      	bne.n	8004012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	4b47      	ldr	r3, [pc, #284]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d119      	bne.n	8004042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e07f      	b.n	8004112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d003      	beq.n	8004022 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401e:	2b03      	cmp	r3, #3
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004022:	4b3f      	ldr	r3, [pc, #252]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e06f      	b.n	8004112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004032:	4b3b      	ldr	r3, [pc, #236]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e067      	b.n	8004112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004042:	4b37      	ldr	r3, [pc, #220]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f023 0203 	bic.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4934      	ldr	r1, [pc, #208]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	4313      	orrs	r3, r2
 8004052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004054:	f7fe ff74 	bl	8002f40 <HAL_GetTick>
 8004058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405a:	e00a      	b.n	8004072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405c:	f7fe ff70 	bl	8002f40 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e04f      	b.n	8004112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	4b2b      	ldr	r3, [pc, #172]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 020c 	and.w	r2, r3, #12
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	429a      	cmp	r2, r3
 8004082:	d1eb      	bne.n	800405c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004084:	4b25      	ldr	r3, [pc, #148]	@ (800411c <HAL_RCC_ClockConfig+0x1b8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d20c      	bcs.n	80040ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b22      	ldr	r3, [pc, #136]	@ (800411c <HAL_RCC_ClockConfig+0x1b8>)
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b20      	ldr	r3, [pc, #128]	@ (800411c <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e032      	b.n	8004112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b8:	4b19      	ldr	r3, [pc, #100]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4916      	ldr	r1, [pc, #88]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040d6:	4b12      	ldr	r3, [pc, #72]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	490e      	ldr	r1, [pc, #56]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ea:	f000 f821 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80040ee:	4602      	mov	r2, r0
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	490a      	ldr	r1, [pc, #40]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 80040fc:	5ccb      	ldrb	r3, [r1, r3]
 80040fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004102:	4a09      	ldr	r2, [pc, #36]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004106:	4b09      	ldr	r3, [pc, #36]	@ (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe fb92 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023c00 	.word	0x40023c00
 8004120:	40023800 	.word	0x40023800
 8004124:	0800b67c 	.word	0x0800b67c
 8004128:	20000034 	.word	0x20000034
 800412c:	20000038 	.word	0x20000038

08004130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004134:	b090      	sub	sp, #64	@ 0x40
 8004136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004148:	4b59      	ldr	r3, [pc, #356]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b08      	cmp	r3, #8
 8004152:	d00d      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x40>
 8004154:	2b08      	cmp	r3, #8
 8004156:	f200 80a1 	bhi.w	800429c <HAL_RCC_GetSysClockFreq+0x16c>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x34>
 800415e:	2b04      	cmp	r3, #4
 8004160:	d003      	beq.n	800416a <HAL_RCC_GetSysClockFreq+0x3a>
 8004162:	e09b      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004164:	4b53      	ldr	r3, [pc, #332]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004166:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004168:	e09b      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800416a:	4b53      	ldr	r3, [pc, #332]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800416c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800416e:	e098      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004170:	4b4f      	ldr	r3, [pc, #316]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004178:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800417a:	4b4d      	ldr	r3, [pc, #308]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d028      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004186:	4b4a      	ldr	r3, [pc, #296]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	099b      	lsrs	r3, r3, #6
 800418c:	2200      	movs	r2, #0
 800418e:	623b      	str	r3, [r7, #32]
 8004190:	627a      	str	r2, [r7, #36]	@ 0x24
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004198:	2100      	movs	r1, #0
 800419a:	4b47      	ldr	r3, [pc, #284]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800419c:	fb03 f201 	mul.w	r2, r3, r1
 80041a0:	2300      	movs	r3, #0
 80041a2:	fb00 f303 	mul.w	r3, r0, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	4a43      	ldr	r2, [pc, #268]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041aa:	fba0 1202 	umull	r1, r2, r0, r2
 80041ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041b0:	460a      	mov	r2, r1
 80041b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041b6:	4413      	add	r3, r2
 80041b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041bc:	2200      	movs	r2, #0
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	61fa      	str	r2, [r7, #28]
 80041c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041ca:	f7fc fcf5 	bl	8000bb8 <__aeabi_uldivmod>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4613      	mov	r3, r2
 80041d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041d6:	e053      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d8:	4b35      	ldr	r3, [pc, #212]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	099b      	lsrs	r3, r3, #6
 80041de:	2200      	movs	r2, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	617a      	str	r2, [r7, #20]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041ea:	f04f 0b00 	mov.w	fp, #0
 80041ee:	4652      	mov	r2, sl
 80041f0:	465b      	mov	r3, fp
 80041f2:	f04f 0000 	mov.w	r0, #0
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	0159      	lsls	r1, r3, #5
 80041fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004200:	0150      	lsls	r0, r2, #5
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	ebb2 080a 	subs.w	r8, r2, sl
 800420a:	eb63 090b 	sbc.w	r9, r3, fp
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800421a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800421e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004222:	ebb2 0408 	subs.w	r4, r2, r8
 8004226:	eb63 0509 	sbc.w	r5, r3, r9
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	00eb      	lsls	r3, r5, #3
 8004234:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004238:	00e2      	lsls	r2, r4, #3
 800423a:	4614      	mov	r4, r2
 800423c:	461d      	mov	r5, r3
 800423e:	eb14 030a 	adds.w	r3, r4, sl
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	eb45 030b 	adc.w	r3, r5, fp
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004256:	4629      	mov	r1, r5
 8004258:	028b      	lsls	r3, r1, #10
 800425a:	4621      	mov	r1, r4
 800425c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004260:	4621      	mov	r1, r4
 8004262:	028a      	lsls	r2, r1, #10
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426a:	2200      	movs	r2, #0
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	60fa      	str	r2, [r7, #12]
 8004270:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004274:	f7fc fca0 	bl	8000bb8 <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4613      	mov	r3, r2
 800427e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004280:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	3301      	adds	r3, #1
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004290:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800429a:	e002      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800429c:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800429e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3740      	adds	r7, #64	@ 0x40
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800
 80042b4:	00f42400 	.word	0x00f42400
 80042b8:	017d7840 	.word	0x017d7840

080042bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c0:	4b03      	ldr	r3, [pc, #12]	@ (80042d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c2:	681b      	ldr	r3, [r3, #0]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000034 	.word	0x20000034

080042d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042d8:	f7ff fff0 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0a9b      	lsrs	r3, r3, #10
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4903      	ldr	r1, [pc, #12]	@ (80042f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	0800b68c 	.word	0x0800b68c

080042fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004300:	f7ff ffdc 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	0b5b      	lsrs	r3, r3, #13
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4903      	ldr	r1, [pc, #12]	@ (8004320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40023800 	.word	0x40023800
 8004320:	0800b68c 	.word	0x0800b68c

08004324 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	220f      	movs	r2, #15
 8004332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004334:	4b12      	ldr	r3, [pc, #72]	@ (8004380 <HAL_RCC_GetClockConfig+0x5c>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 0203 	and.w	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004340:	4b0f      	ldr	r3, [pc, #60]	@ (8004380 <HAL_RCC_GetClockConfig+0x5c>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <HAL_RCC_GetClockConfig+0x5c>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004358:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <HAL_RCC_GetClockConfig+0x5c>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004366:	4b07      	ldr	r3, [pc, #28]	@ (8004384 <HAL_RCC_GetClockConfig+0x60>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0207 	and.w	r2, r3, #7
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	601a      	str	r2, [r3, #0]
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800
 8004384:	40023c00 	.word	0x40023c00

08004388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e041      	b.n	800441e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fe fbfc 	bl	8002bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f000 f9a8 	bl	800471c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d001      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e044      	b.n	80044ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1e      	ldr	r2, [pc, #120]	@ (80044d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d018      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x6c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446a:	d013      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x6c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1a      	ldr	r2, [pc, #104]	@ (80044dc <HAL_TIM_Base_Start_IT+0xb4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00e      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x6c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a19      	ldr	r2, [pc, #100]	@ (80044e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d009      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x6c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a17      	ldr	r2, [pc, #92]	@ (80044e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x6c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a16      	ldr	r2, [pc, #88]	@ (80044e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d111      	bne.n	80044b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d010      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0201 	orr.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b6:	e007      	b.n	80044c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40010000 	.word	0x40010000
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40000c00 	.word	0x40000c00
 80044e8:	40014000 	.word	0x40014000

080044ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d020      	beq.n	8004550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01b      	beq.n	8004550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0202 	mvn.w	r2, #2
 8004520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f8d2 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f8c4 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f8d5 	bl	80046f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d020      	beq.n	800459c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01b      	beq.n	800459c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0204 	mvn.w	r2, #4
 800456c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8ac 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f89e 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f8af 	bl	80046f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d020      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01b      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0208 	mvn.w	r2, #8
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2204      	movs	r2, #4
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f886 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f878 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f889 	bl	80046f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d020      	beq.n	8004634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0210 	mvn.w	r2, #16
 8004604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2208      	movs	r2, #8
 800460a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f860 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f852 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f863 	bl	80046f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0201 	mvn.w	r2, #1
 8004650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fe f8aa 	bl	80027ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f8e6 	bl	8004848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00c      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d007      	beq.n	80046a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f834 	bl	8004708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00c      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0220 	mvn.w	r2, #32
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f8b8 	bl	8004834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a3a      	ldr	r2, [pc, #232]	@ (8004818 <TIM_Base_SetConfig+0xfc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00f      	beq.n	8004754 <TIM_Base_SetConfig+0x38>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473a:	d00b      	beq.n	8004754 <TIM_Base_SetConfig+0x38>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a37      	ldr	r2, [pc, #220]	@ (800481c <TIM_Base_SetConfig+0x100>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d007      	beq.n	8004754 <TIM_Base_SetConfig+0x38>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a36      	ldr	r2, [pc, #216]	@ (8004820 <TIM_Base_SetConfig+0x104>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d003      	beq.n	8004754 <TIM_Base_SetConfig+0x38>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a35      	ldr	r2, [pc, #212]	@ (8004824 <TIM_Base_SetConfig+0x108>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d108      	bne.n	8004766 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2b      	ldr	r2, [pc, #172]	@ (8004818 <TIM_Base_SetConfig+0xfc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01b      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004774:	d017      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a28      	ldr	r2, [pc, #160]	@ (800481c <TIM_Base_SetConfig+0x100>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a27      	ldr	r2, [pc, #156]	@ (8004820 <TIM_Base_SetConfig+0x104>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00f      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a26      	ldr	r2, [pc, #152]	@ (8004824 <TIM_Base_SetConfig+0x108>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00b      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a25      	ldr	r2, [pc, #148]	@ (8004828 <TIM_Base_SetConfig+0x10c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a24      	ldr	r2, [pc, #144]	@ (800482c <TIM_Base_SetConfig+0x110>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a23      	ldr	r2, [pc, #140]	@ (8004830 <TIM_Base_SetConfig+0x114>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d108      	bne.n	80047b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a0e      	ldr	r2, [pc, #56]	@ (8004818 <TIM_Base_SetConfig+0xfc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d103      	bne.n	80047ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d105      	bne.n	800480a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	611a      	str	r2, [r3, #16]
  }
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40010000 	.word	0x40010000
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40000c00 	.word	0x40000c00
 8004828:	40014000 	.word	0x40014000
 800482c:	40014400 	.word	0x40014400
 8004830:	40014800 	.word	0x40014800

08004834 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e042      	b.n	80048f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fe fa32 	bl	8002cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	@ 0x24
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800489e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fe9b 	bl	80055dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	@ 0x28
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	4613      	mov	r3, r2
 800490a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b20      	cmp	r3, #32
 800491a:	d175      	bne.n	8004a08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_UART_Transmit+0x2c>
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e06e      	b.n	8004a0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2221      	movs	r2, #33	@ 0x21
 8004936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800493a:	f7fe fb01 	bl	8002f40 <HAL_GetTick>
 800493e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	88fa      	ldrh	r2, [r7, #6]
 800494a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004954:	d108      	bne.n	8004968 <HAL_UART_Transmit+0x6c>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d104      	bne.n	8004968 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	e003      	b.n	8004970 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004970:	e02e      	b.n	80049d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	2180      	movs	r1, #128	@ 0x80
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fbe5 	bl	800514c <UART_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e03a      	b.n	8004a0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	3302      	adds	r3, #2
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	e007      	b.n	80049c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	781a      	ldrb	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	3301      	adds	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1cb      	bne.n	8004972 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2140      	movs	r1, #64	@ 0x40
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fbb1 	bl	800514c <UART_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e006      	b.n	8004a0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e000      	b.n	8004a0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d112      	bne.n	8004a52 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_UART_Receive_IT+0x26>
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e00b      	b.n	8004a54 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	461a      	mov	r2, r3
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fbd8 	bl	80051fe <UART_Start_Receive_IT>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	e000      	b.n	8004a54 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b09a      	sub	sp, #104	@ 0x68
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a84:	657a      	str	r2, [r7, #84]	@ 0x54
 8004a86:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004a8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ab8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004abe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d119      	bne.n	8004b08 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f023 0310 	bic.w	r3, r3, #16
 8004aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004af4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e5      	bne.n	8004ad4 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b12:	2b40      	cmp	r3, #64	@ 0x40
 8004b14:	d13f      	bne.n	8004b96 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3314      	adds	r3, #20
 8004b1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3314      	adds	r3, #20
 8004b34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b36:	61ba      	str	r2, [r7, #24]
 8004b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6979      	ldr	r1, [r7, #20]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	613b      	str	r3, [r7, #16]
   return(result);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d013      	beq.n	8004b7a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b56:	4a19      	ldr	r2, [pc, #100]	@ (8004bbc <HAL_UART_AbortReceive_IT+0x160>)
 8004b58:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fdae 	bl	80036c0 <HAL_DMA_Abort_IT>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d022      	beq.n	8004bb0 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b74:	4610      	mov	r0, r2
 8004b76:	4798      	blx	r3
 8004b78:	e01a      	b.n	8004bb0 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fac6 	bl	8005120 <HAL_UART_AbortReceiveCpltCallback>
 8004b94:	e00c      	b.n	8004bb0 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fab8 	bl	8005120 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3768      	adds	r7, #104	@ 0x68
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	08005361 	.word	0x08005361

08004bc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b0ba      	sub	sp, #232	@ 0xe8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_UART_IRQHandler+0x66>
 8004c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fc1e 	bl	8005460 <UART_Receive_IT>
      return;
 8004c24:	e25b      	b.n	80050de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 80de 	beq.w	8004dec <HAL_UART_IRQHandler+0x22c>
 8004c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d106      	bne.n	8004c4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 80d1 	beq.w	8004dec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00b      	beq.n	8004c6e <HAL_UART_IRQHandler+0xae>
 8004c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c66:	f043 0201 	orr.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_UART_IRQHandler+0xd2>
 8004c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8a:	f043 0202 	orr.w	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_UART_IRQHandler+0xf6>
 8004c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cae:	f043 0204 	orr.w	r2, r3, #4
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d011      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x126>
 8004cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d105      	bne.n	8004cda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cde:	f043 0208 	orr.w	r2, r3, #8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 81f2 	beq.w	80050d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_UART_IRQHandler+0x14e>
 8004cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fba9 	bl	8005460 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d18:	2b40      	cmp	r3, #64	@ 0x40
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <HAL_UART_IRQHandler+0x17a>
 8004d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d04f      	beq.n	8004dda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa99 	bl	8005272 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4a:	2b40      	cmp	r3, #64	@ 0x40
 8004d4c:	d141      	bne.n	8004dd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3314      	adds	r3, #20
 8004d54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3314      	adds	r3, #20
 8004d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1d9      	bne.n	8004d4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d013      	beq.n	8004dca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da6:	4a7e      	ldr	r2, [pc, #504]	@ (8004fa0 <HAL_UART_IRQHandler+0x3e0>)
 8004da8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fc86 	bl	80036c0 <HAL_DMA_Abort_IT>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d016      	beq.n	8004de8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc8:	e00e      	b.n	8004de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f99e 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd0:	e00a      	b.n	8004de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f99a 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	e006      	b.n	8004de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f996 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004de6:	e175      	b.n	80050d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de8:	bf00      	nop
    return;
 8004dea:	e173      	b.n	80050d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	f040 814f 	bne.w	8005094 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8148 	beq.w	8005094 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8141 	beq.w	8005094 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e12:	2300      	movs	r3, #0
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e32:	2b40      	cmp	r3, #64	@ 0x40
 8004e34:	f040 80b6 	bne.w	8004fa4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8145 	beq.w	80050d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e56:	429a      	cmp	r2, r3
 8004e58:	f080 813e 	bcs.w	80050d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e6e:	f000 8088 	beq.w	8004f82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004e9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1d9      	bne.n	8004e72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3314      	adds	r3, #20
 8004ec4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ed0:	f023 0301 	bic.w	r3, r3, #1
 8004ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3314      	adds	r3, #20
 8004ede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ee2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004eea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e1      	bne.n	8004ebe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3314      	adds	r3, #20
 8004f00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3314      	adds	r3, #20
 8004f1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e3      	bne.n	8004efa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f52:	f023 0310 	bic.w	r3, r3, #16
 8004f56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004f64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e3      	bne.n	8004f40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe fb2f 	bl	80035e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	4619      	mov	r1, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f8cb 	bl	8005134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f9e:	e09b      	b.n	80050d8 <HAL_UART_IRQHandler+0x518>
 8004fa0:	08005339 	.word	0x08005339
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 808e 	beq.w	80050dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8089 	beq.w	80050dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	330c      	adds	r3, #12
 8004fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004fee:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ff0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e3      	bne.n	8004fca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3314      	adds	r3, #20
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	623b      	str	r3, [r7, #32]
   return(result);
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3314      	adds	r3, #20
 8005022:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005026:	633a      	str	r2, [r7, #48]	@ 0x30
 8005028:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800502c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e3      	bne.n	8005002 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	330c      	adds	r3, #12
 800504e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	60fb      	str	r3, [r7, #12]
   return(result);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0310 	bic.w	r3, r3, #16
 800505e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	330c      	adds	r3, #12
 8005068:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800506c:	61fa      	str	r2, [r7, #28]
 800506e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	69b9      	ldr	r1, [r7, #24]
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	617b      	str	r3, [r7, #20]
   return(result);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e3      	bne.n	8005048 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005086:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f851 	bl	8005134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005092:	e023      	b.n	80050dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d009      	beq.n	80050b4 <HAL_UART_IRQHandler+0x4f4>
 80050a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f96f 	bl	8005390 <UART_Transmit_IT>
    return;
 80050b2:	e014      	b.n	80050de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00e      	beq.n	80050de <HAL_UART_IRQHandler+0x51e>
 80050c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f9af 	bl	8005430 <UART_EndTransmit_IT>
    return;
 80050d2:	e004      	b.n	80050de <HAL_UART_IRQHandler+0x51e>
    return;
 80050d4:	bf00      	nop
 80050d6:	e002      	b.n	80050de <HAL_UART_IRQHandler+0x51e>
      return;
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <HAL_UART_IRQHandler+0x51e>
      return;
 80050dc:	bf00      	nop
  }
}
 80050de:	37e8      	adds	r7, #232	@ 0xe8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	4613      	mov	r3, r2
 800515a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515c:	e03b      	b.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005164:	d037      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005166:	f7fd feeb 	bl	8002f40 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	6a3a      	ldr	r2, [r7, #32]
 8005172:	429a      	cmp	r2, r3
 8005174:	d302      	bcc.n	800517c <UART_WaitOnFlagUntilTimeout+0x30>
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e03a      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	d023      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b80      	cmp	r3, #128	@ 0x80
 8005192:	d020      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b40      	cmp	r3, #64	@ 0x40
 8005198:	d01d      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d116      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f857 	bl	8005272 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2208      	movs	r2, #8
 80051c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e00f      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4013      	ands	r3, r2
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	bf0c      	ite	eq
 80051e6:	2301      	moveq	r3, #1
 80051e8:	2300      	movne	r3, #0
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d0b4      	beq.n	800515e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	4613      	mov	r3, r2
 800520a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	88fa      	ldrh	r2, [r7, #6]
 8005216:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2222      	movs	r2, #34	@ 0x22
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005242:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695a      	ldr	r2, [r3, #20]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0220 	orr.w	r2, r2, #32
 8005262:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005272:	b480      	push	{r7}
 8005274:	b095      	sub	sp, #84	@ 0x54
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800529a:	643a      	str	r2, [r7, #64]	@ 0x40
 800529c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e5      	bne.n	800527a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e5      	bne.n	80052ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d119      	bne.n	800531e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f023 0310 	bic.w	r3, r3, #16
 8005300:	647b      	str	r3, [r7, #68]	@ 0x44
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800530a:	61ba      	str	r2, [r7, #24]
 800530c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6979      	ldr	r1, [r7, #20]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	613b      	str	r3, [r7, #16]
   return(result);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e5      	bne.n	80052ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800532c:	bf00      	nop
 800532e:	3754      	adds	r7, #84	@ 0x54
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005344:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff feda 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7ff fecc 	bl	8005120 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b21      	cmp	r3, #33	@ 0x21
 80053a2:	d13e      	bne.n	8005422 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ac:	d114      	bne.n	80053d8 <UART_Transmit_IT+0x48>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d110      	bne.n	80053d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	1c9a      	adds	r2, r3, #2
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	621a      	str	r2, [r3, #32]
 80053d6:	e008      	b.n	80053ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	1c59      	adds	r1, r3, #1
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6211      	str	r1, [r2, #32]
 80053e2:	781a      	ldrb	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	4619      	mov	r1, r3
 80053f8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10f      	bne.n	800541e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800540c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800541c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005446:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff fe47 	bl	80050e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08c      	sub	sp, #48	@ 0x30
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b22      	cmp	r3, #34	@ 0x22
 8005472:	f040 80ae 	bne.w	80055d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547e:	d117      	bne.n	80054b0 <UART_Receive_IT+0x50>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d113      	bne.n	80054b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549e:	b29a      	uxth	r2, r3
 80054a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a8:	1c9a      	adds	r2, r3, #2
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80054ae:	e026      	b.n	80054fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c2:	d007      	beq.n	80054d4 <UART_Receive_IT+0x74>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <UART_Receive_IT+0x82>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d106      	bne.n	80054e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e008      	b.n	80054f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29b      	uxth	r3, r3
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	4619      	mov	r1, r3
 800550c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800550e:	2b00      	cmp	r3, #0
 8005510:	d15d      	bne.n	80055ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0220 	bic.w	r2, r2, #32
 8005520:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005530:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695a      	ldr	r2, [r3, #20]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0201 	bic.w	r2, r2, #1
 8005540:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005554:	2b01      	cmp	r3, #1
 8005556:	d135      	bne.n	80055c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	330c      	adds	r3, #12
 8005564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	613b      	str	r3, [r7, #16]
   return(result);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f023 0310 	bic.w	r3, r3, #16
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	330c      	adds	r3, #12
 800557c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800557e:	623a      	str	r2, [r7, #32]
 8005580:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	69f9      	ldr	r1, [r7, #28]
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	61bb      	str	r3, [r7, #24]
   return(result);
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e5      	bne.n	800555e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	2b10      	cmp	r3, #16
 800559e:	d10a      	bne.n	80055b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff fdb9 	bl	8005134 <HAL_UARTEx_RxEventCallback>
 80055c2:	e002      	b.n	80055ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fd97 	bl	80050f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e002      	b.n	80055d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	e000      	b.n	80055d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80055d2:	2302      	movs	r3, #2
  }
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3730      	adds	r7, #48	@ 0x30
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b0c0      	sub	sp, #256	@ 0x100
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f8:	68d9      	ldr	r1, [r3, #12]
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	ea40 0301 	orr.w	r3, r0, r1
 8005604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	431a      	orrs	r2, r3
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	431a      	orrs	r2, r3
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005634:	f021 010c 	bic.w	r1, r1, #12
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005642:	430b      	orrs	r3, r1
 8005644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005656:	6999      	ldr	r1, [r3, #24]
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	ea40 0301 	orr.w	r3, r0, r1
 8005662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b8f      	ldr	r3, [pc, #572]	@ (80058a8 <UART_SetConfig+0x2cc>)
 800566c:	429a      	cmp	r2, r3
 800566e:	d005      	beq.n	800567c <UART_SetConfig+0xa0>
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b8d      	ldr	r3, [pc, #564]	@ (80058ac <UART_SetConfig+0x2d0>)
 8005678:	429a      	cmp	r2, r3
 800567a:	d104      	bne.n	8005686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7fe fe3e 	bl	80042fc <HAL_RCC_GetPCLK2Freq>
 8005680:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005684:	e003      	b.n	800568e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005686:	f7fe fe25 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 800568a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005698:	f040 810c 	bne.w	80058b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800569c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056ae:	4622      	mov	r2, r4
 80056b0:	462b      	mov	r3, r5
 80056b2:	1891      	adds	r1, r2, r2
 80056b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056b6:	415b      	adcs	r3, r3
 80056b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056be:	4621      	mov	r1, r4
 80056c0:	eb12 0801 	adds.w	r8, r2, r1
 80056c4:	4629      	mov	r1, r5
 80056c6:	eb43 0901 	adc.w	r9, r3, r1
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056de:	4690      	mov	r8, r2
 80056e0:	4699      	mov	r9, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	eb18 0303 	adds.w	r3, r8, r3
 80056e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056ec:	462b      	mov	r3, r5
 80056ee:	eb49 0303 	adc.w	r3, r9, r3
 80056f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005702:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800570a:	460b      	mov	r3, r1
 800570c:	18db      	adds	r3, r3, r3
 800570e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005710:	4613      	mov	r3, r2
 8005712:	eb42 0303 	adc.w	r3, r2, r3
 8005716:	657b      	str	r3, [r7, #84]	@ 0x54
 8005718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800571c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005720:	f7fb fa4a 	bl	8000bb8 <__aeabi_uldivmod>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4b61      	ldr	r3, [pc, #388]	@ (80058b0 <UART_SetConfig+0x2d4>)
 800572a:	fba3 2302 	umull	r2, r3, r3, r2
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	011c      	lsls	r4, r3, #4
 8005732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005736:	2200      	movs	r2, #0
 8005738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800573c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005744:	4642      	mov	r2, r8
 8005746:	464b      	mov	r3, r9
 8005748:	1891      	adds	r1, r2, r2
 800574a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800574c:	415b      	adcs	r3, r3
 800574e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005754:	4641      	mov	r1, r8
 8005756:	eb12 0a01 	adds.w	sl, r2, r1
 800575a:	4649      	mov	r1, r9
 800575c:	eb43 0b01 	adc.w	fp, r3, r1
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800576c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005774:	4692      	mov	sl, r2
 8005776:	469b      	mov	fp, r3
 8005778:	4643      	mov	r3, r8
 800577a:	eb1a 0303 	adds.w	r3, sl, r3
 800577e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005782:	464b      	mov	r3, r9
 8005784:	eb4b 0303 	adc.w	r3, fp, r3
 8005788:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005798:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800579c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057a0:	460b      	mov	r3, r1
 80057a2:	18db      	adds	r3, r3, r3
 80057a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80057a6:	4613      	mov	r3, r2
 80057a8:	eb42 0303 	adc.w	r3, r2, r3
 80057ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057b6:	f7fb f9ff 	bl	8000bb8 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	4b3b      	ldr	r3, [pc, #236]	@ (80058b0 <UART_SetConfig+0x2d4>)
 80057c2:	fba3 2301 	umull	r2, r3, r3, r1
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2264      	movs	r2, #100	@ 0x64
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	1acb      	subs	r3, r1, r3
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057d6:	4b36      	ldr	r3, [pc, #216]	@ (80058b0 <UART_SetConfig+0x2d4>)
 80057d8:	fba3 2302 	umull	r2, r3, r3, r2
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057e4:	441c      	add	r4, r3
 80057e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	1891      	adds	r1, r2, r2
 80057fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005800:	415b      	adcs	r3, r3
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005808:	4641      	mov	r1, r8
 800580a:	1851      	adds	r1, r2, r1
 800580c:	6339      	str	r1, [r7, #48]	@ 0x30
 800580e:	4649      	mov	r1, r9
 8005810:	414b      	adcs	r3, r1
 8005812:	637b      	str	r3, [r7, #52]	@ 0x34
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005820:	4659      	mov	r1, fp
 8005822:	00cb      	lsls	r3, r1, #3
 8005824:	4651      	mov	r1, sl
 8005826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800582a:	4651      	mov	r1, sl
 800582c:	00ca      	lsls	r2, r1, #3
 800582e:	4610      	mov	r0, r2
 8005830:	4619      	mov	r1, r3
 8005832:	4603      	mov	r3, r0
 8005834:	4642      	mov	r2, r8
 8005836:	189b      	adds	r3, r3, r2
 8005838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800583c:	464b      	mov	r3, r9
 800583e:	460a      	mov	r2, r1
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005854:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800585c:	460b      	mov	r3, r1
 800585e:	18db      	adds	r3, r3, r3
 8005860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005862:	4613      	mov	r3, r2
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800586e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005872:	f7fb f9a1 	bl	8000bb8 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4b0d      	ldr	r3, [pc, #52]	@ (80058b0 <UART_SetConfig+0x2d4>)
 800587c:	fba3 1302 	umull	r1, r3, r3, r2
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	2164      	movs	r1, #100	@ 0x64
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	3332      	adds	r3, #50	@ 0x32
 800588e:	4a08      	ldr	r2, [pc, #32]	@ (80058b0 <UART_SetConfig+0x2d4>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	f003 0207 	and.w	r2, r3, #7
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4422      	add	r2, r4
 80058a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058a4:	e106      	b.n	8005ab4 <UART_SetConfig+0x4d8>
 80058a6:	bf00      	nop
 80058a8:	40011000 	.word	0x40011000
 80058ac:	40011400 	.word	0x40011400
 80058b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058c6:	4642      	mov	r2, r8
 80058c8:	464b      	mov	r3, r9
 80058ca:	1891      	adds	r1, r2, r2
 80058cc:	6239      	str	r1, [r7, #32]
 80058ce:	415b      	adcs	r3, r3
 80058d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058d6:	4641      	mov	r1, r8
 80058d8:	1854      	adds	r4, r2, r1
 80058da:	4649      	mov	r1, r9
 80058dc:	eb43 0501 	adc.w	r5, r3, r1
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	00eb      	lsls	r3, r5, #3
 80058ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ee:	00e2      	lsls	r2, r4, #3
 80058f0:	4614      	mov	r4, r2
 80058f2:	461d      	mov	r5, r3
 80058f4:	4643      	mov	r3, r8
 80058f6:	18e3      	adds	r3, r4, r3
 80058f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058fc:	464b      	mov	r3, r9
 80058fe:	eb45 0303 	adc.w	r3, r5, r3
 8005902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005912:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005922:	4629      	mov	r1, r5
 8005924:	008b      	lsls	r3, r1, #2
 8005926:	4621      	mov	r1, r4
 8005928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800592c:	4621      	mov	r1, r4
 800592e:	008a      	lsls	r2, r1, #2
 8005930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005934:	f7fb f940 	bl	8000bb8 <__aeabi_uldivmod>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4b60      	ldr	r3, [pc, #384]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 800593e:	fba3 2302 	umull	r2, r3, r3, r2
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	011c      	lsls	r4, r3, #4
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594a:	2200      	movs	r2, #0
 800594c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005950:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005958:	4642      	mov	r2, r8
 800595a:	464b      	mov	r3, r9
 800595c:	1891      	adds	r1, r2, r2
 800595e:	61b9      	str	r1, [r7, #24]
 8005960:	415b      	adcs	r3, r3
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005968:	4641      	mov	r1, r8
 800596a:	1851      	adds	r1, r2, r1
 800596c:	6139      	str	r1, [r7, #16]
 800596e:	4649      	mov	r1, r9
 8005970:	414b      	adcs	r3, r1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005980:	4659      	mov	r1, fp
 8005982:	00cb      	lsls	r3, r1, #3
 8005984:	4651      	mov	r1, sl
 8005986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800598a:	4651      	mov	r1, sl
 800598c:	00ca      	lsls	r2, r1, #3
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	4603      	mov	r3, r0
 8005994:	4642      	mov	r2, r8
 8005996:	189b      	adds	r3, r3, r2
 8005998:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800599c:	464b      	mov	r3, r9
 800599e:	460a      	mov	r2, r1
 80059a0:	eb42 0303 	adc.w	r3, r2, r3
 80059a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059c0:	4649      	mov	r1, r9
 80059c2:	008b      	lsls	r3, r1, #2
 80059c4:	4641      	mov	r1, r8
 80059c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ca:	4641      	mov	r1, r8
 80059cc:	008a      	lsls	r2, r1, #2
 80059ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059d2:	f7fb f8f1 	bl	8000bb8 <__aeabi_uldivmod>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	4b38      	ldr	r3, [pc, #224]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 80059de:	fba3 2301 	umull	r2, r3, r3, r1
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	2264      	movs	r2, #100	@ 0x64
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	1acb      	subs	r3, r1, r3
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	3332      	adds	r3, #50	@ 0x32
 80059f0:	4a33      	ldr	r2, [pc, #204]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059fc:	441c      	add	r4, r3
 80059fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a02:	2200      	movs	r2, #0
 8005a04:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a06:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	1891      	adds	r1, r2, r2
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	415b      	adcs	r3, r3
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	1851      	adds	r1, r2, r1
 8005a20:	6039      	str	r1, [r7, #0]
 8005a22:	4649      	mov	r1, r9
 8005a24:	414b      	adcs	r3, r1
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a34:	4659      	mov	r1, fp
 8005a36:	00cb      	lsls	r3, r1, #3
 8005a38:	4651      	mov	r1, sl
 8005a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a3e:	4651      	mov	r1, sl
 8005a40:	00ca      	lsls	r2, r1, #3
 8005a42:	4610      	mov	r0, r2
 8005a44:	4619      	mov	r1, r3
 8005a46:	4603      	mov	r3, r0
 8005a48:	4642      	mov	r2, r8
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a4e:	464b      	mov	r3, r9
 8005a50:	460a      	mov	r2, r1
 8005a52:	eb42 0303 	adc.w	r3, r2, r3
 8005a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a62:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a70:	4649      	mov	r1, r9
 8005a72:	008b      	lsls	r3, r1, #2
 8005a74:	4641      	mov	r1, r8
 8005a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	008a      	lsls	r2, r1, #2
 8005a7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a82:	f7fb f899 	bl	8000bb8 <__aeabi_uldivmod>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 8005a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a90:	095b      	lsrs	r3, r3, #5
 8005a92:	2164      	movs	r1, #100	@ 0x64
 8005a94:	fb01 f303 	mul.w	r3, r1, r3
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	3332      	adds	r3, #50	@ 0x32
 8005a9e:	4a08      	ldr	r2, [pc, #32]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 8005aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	f003 020f 	and.w	r2, r3, #15
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4422      	add	r2, r4
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005aba:	46bd      	mov	sp, r7
 8005abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac0:	51eb851f 	.word	0x51eb851f

08005ac4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ac8:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <SysTick_Handler+0x1c>)
 8005aca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005acc:	f001 fc44 	bl	8007358 <xTaskGetSchedulerState>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d001      	beq.n	8005ada <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ad6:	f002 fa3f 	bl	8007f58 <xPortSysTickHandler>
  }
}
 8005ada:	bf00      	nop
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	e000e010 	.word	0xe000e010

08005ae4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a07      	ldr	r2, [pc, #28]	@ (8005b10 <vApplicationGetIdleTaskMemory+0x2c>)
 8005af4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4a06      	ldr	r2, [pc, #24]	@ (8005b14 <vApplicationGetIdleTaskMemory+0x30>)
 8005afa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2280      	movs	r2, #128	@ 0x80
 8005b00:	601a      	str	r2, [r3, #0]
}
 8005b02:	bf00      	nop
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20001514 	.word	0x20001514
 8005b14:	200015bc 	.word	0x200015bc

08005b18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a07      	ldr	r2, [pc, #28]	@ (8005b44 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4a06      	ldr	r2, [pc, #24]	@ (8005b48 <vApplicationGetTimerTaskMemory+0x30>)
 8005b2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b36:	601a      	str	r2, [r3, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	200017bc 	.word	0x200017bc
 8005b48:	20001864 	.word	0x20001864

08005b4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f103 0208 	add.w	r2, r3, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f04f 32ff 	mov.w	r2, #4294967295
 8005b64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f103 0208 	add.w	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f103 0208 	add.w	r2, r3, #8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d103      	bne.n	8005c0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e00c      	b.n	8005c28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3308      	adds	r3, #8
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e002      	b.n	8005c1c <vListInsert+0x2e>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d2f6      	bcs.n	8005c16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	601a      	str	r2, [r3, #0]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6892      	ldr	r2, [r2, #8]
 8005c76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6852      	ldr	r2, [r2, #4]
 8005c80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d103      	bne.n	8005c94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	1e5a      	subs	r2, r3, #1
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ce0:	f002 f8aa 	bl	8007e38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cec:	68f9      	ldr	r1, [r7, #12]
 8005cee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	441a      	add	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d10:	3b01      	subs	r3, #1
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	441a      	add	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	22ff      	movs	r2, #255	@ 0xff
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	22ff      	movs	r2, #255	@ 0xff
 8005d2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d114      	bne.n	8005d60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01a      	beq.n	8005d74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3310      	adds	r3, #16
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 f942 	bl	8006fcc <xTaskRemoveFromEventList>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d012      	beq.n	8005d74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <xQueueGenericReset+0xd0>)
 8005d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	e009      	b.n	8005d74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3310      	adds	r3, #16
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff fef1 	bl	8005b4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3324      	adds	r3, #36	@ 0x24
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff feec 	bl	8005b4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d74:	f002 f892 	bl	8007e9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d78:	2301      	movs	r3, #1
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	e000ed04 	.word	0xe000ed04

08005d88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08e      	sub	sp, #56	@ 0x38
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10b      	bne.n	8005db4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	e7fd      	b.n	8005db0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	e7fd      	b.n	8005dce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <xQueueGenericCreateStatic+0x56>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <xQueueGenericCreateStatic+0x5a>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <xQueueGenericCreateStatic+0x5c>
 8005de2:	2300      	movs	r3, #0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	623b      	str	r3, [r7, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	bf00      	nop
 8005dfe:	e7fd      	b.n	8005dfc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <xQueueGenericCreateStatic+0x84>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <xQueueGenericCreateStatic+0x88>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <xQueueGenericCreateStatic+0x8a>
 8005e10:	2300      	movs	r3, #0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	61fb      	str	r3, [r7, #28]
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	e7fd      	b.n	8005e2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e2e:	2350      	movs	r3, #80	@ 0x50
 8005e30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b50      	cmp	r3, #80	@ 0x50
 8005e36:	d00b      	beq.n	8005e50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	61bb      	str	r3, [r7, #24]
}
 8005e4a:	bf00      	nop
 8005e4c:	bf00      	nop
 8005e4e:	e7fd      	b.n	8005e4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00d      	beq.n	8005e78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	68b9      	ldr	r1, [r7, #8]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 f805 	bl	8005e82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3730      	adds	r7, #48	@ 0x30
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e002      	b.n	8005ea4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	69b8      	ldr	r0, [r7, #24]
 8005eb4:	f7ff fefe 	bl	8005cb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	78fa      	ldrb	r2, [r7, #3]
 8005ebc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ec0:	bf00      	nop
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08e      	sub	sp, #56	@ 0x38
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10b      	bne.n	8005efc <xQueueGenericSend+0x34>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d103      	bne.n	8005f0a <xQueueGenericSend+0x42>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <xQueueGenericSend+0x46>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueGenericSend+0x48>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <xQueueGenericSend+0x64>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	e7fd      	b.n	8005f28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d103      	bne.n	8005f3a <xQueueGenericSend+0x72>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <xQueueGenericSend+0x76>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <xQueueGenericSend+0x78>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10b      	bne.n	8005f5c <xQueueGenericSend+0x94>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	623b      	str	r3, [r7, #32]
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	e7fd      	b.n	8005f58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f5c:	f001 f9fc 	bl	8007358 <xTaskGetSchedulerState>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d102      	bne.n	8005f6c <xQueueGenericSend+0xa4>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <xQueueGenericSend+0xa8>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <xQueueGenericSend+0xaa>
 8005f70:	2300      	movs	r3, #0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10b      	bne.n	8005f8e <xQueueGenericSend+0xc6>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	61fb      	str	r3, [r7, #28]
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f8e:	f001 ff53 	bl	8007e38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d302      	bcc.n	8005fa4 <xQueueGenericSend+0xdc>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d129      	bne.n	8005ff8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005faa:	f000 fa0f 	bl	80063cc <prvCopyDataToQueue>
 8005fae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d010      	beq.n	8005fda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fba:	3324      	adds	r3, #36	@ 0x24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 f805 	bl	8006fcc <xTaskRemoveFromEventList>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d013      	beq.n	8005ff0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80060c8 <xQueueGenericSend+0x200>)
 8005fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	e00a      	b.n	8005ff0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fe0:	4b39      	ldr	r3, [pc, #228]	@ (80060c8 <xQueueGenericSend+0x200>)
 8005fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ff0:	f001 ff54 	bl	8007e9c <vPortExitCritical>
				return pdPASS;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e063      	b.n	80060c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ffe:	f001 ff4d 	bl	8007e9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006002:	2300      	movs	r3, #0
 8006004:	e05c      	b.n	80060c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	4618      	mov	r0, r3
 8006012:	f001 f83f 	bl	8007094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006016:	2301      	movs	r3, #1
 8006018:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800601a:	f001 ff3f 	bl	8007e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800601e:	f000 fda7 	bl	8006b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006022:	f001 ff09 	bl	8007e38 <vPortEnterCritical>
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800602c:	b25b      	sxtb	r3, r3
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d103      	bne.n	800603c <xQueueGenericSend+0x174>
 8006034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006042:	b25b      	sxtb	r3, r3
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d103      	bne.n	8006052 <xQueueGenericSend+0x18a>
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006052:	f001 ff23 	bl	8007e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006056:	1d3a      	adds	r2, r7, #4
 8006058:	f107 0314 	add.w	r3, r7, #20
 800605c:	4611      	mov	r1, r2
 800605e:	4618      	mov	r0, r3
 8006060:	f001 f82e 	bl	80070c0 <xTaskCheckForTimeOut>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d124      	bne.n	80060b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800606a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800606c:	f000 faa6 	bl	80065bc <prvIsQueueFull>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d018      	beq.n	80060a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006078:	3310      	adds	r3, #16
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4611      	mov	r1, r2
 800607e:	4618      	mov	r0, r3
 8006080:	f000 ff52 	bl	8006f28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006086:	f000 fa31 	bl	80064ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800608a:	f000 fd7f 	bl	8006b8c <xTaskResumeAll>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	f47f af7c 	bne.w	8005f8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006096:	4b0c      	ldr	r3, [pc, #48]	@ (80060c8 <xQueueGenericSend+0x200>)
 8006098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	e772      	b.n	8005f8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060aa:	f000 fa1f 	bl	80064ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ae:	f000 fd6d 	bl	8006b8c <xTaskResumeAll>
 80060b2:	e76c      	b.n	8005f8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060b6:	f000 fa19 	bl	80064ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060ba:	f000 fd67 	bl	8006b8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3738      	adds	r7, #56	@ 0x38
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b090      	sub	sp, #64	@ 0x40
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10b      	bne.n	80060fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80060f6:	bf00      	nop
 80060f8:	bf00      	nop
 80060fa:	e7fd      	b.n	80060f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d103      	bne.n	800610a <xQueueGenericSendFromISR+0x3e>
 8006102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <xQueueGenericSendFromISR+0x42>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <xQueueGenericSendFromISR+0x44>
 800610e:	2300      	movs	r3, #0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b02      	cmp	r3, #2
 8006130:	d103      	bne.n	800613a <xQueueGenericSendFromISR+0x6e>
 8006132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <xQueueGenericSendFromISR+0x72>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <xQueueGenericSendFromISR+0x74>
 800613e:	2300      	movs	r3, #0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10b      	bne.n	800615c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	623b      	str	r3, [r7, #32]
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800615c:	f001 ff4c 	bl	8007ff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006160:	f3ef 8211 	mrs	r2, BASEPRI
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	61fa      	str	r2, [r7, #28]
 8006176:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006178:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800617a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800617c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800617e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006184:	429a      	cmp	r2, r3
 8006186:	d302      	bcc.n	800618e <xQueueGenericSendFromISR+0xc2>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d12f      	bne.n	80061ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800618e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006190:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006194:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80061a4:	f000 f912 	bl	80063cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d112      	bne.n	80061d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d016      	beq.n	80061e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061bc:	3324      	adds	r3, #36	@ 0x24
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 ff04 	bl	8006fcc <xTaskRemoveFromEventList>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00e      	beq.n	80061e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e007      	b.n	80061e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80061dc:	3301      	adds	r3, #1
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	b25a      	sxtb	r2, r3
 80061e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80061e8:	2301      	movs	r3, #1
 80061ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80061ec:	e001      	b.n	80061f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006200:	4618      	mov	r0, r3
 8006202:	3740      	adds	r7, #64	@ 0x40
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08c      	sub	sp, #48	@ 0x30
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006214:	2300      	movs	r3, #0
 8006216:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800621c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10b      	bne.n	800623a <xQueueReceive+0x32>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	623b      	str	r3, [r7, #32]
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	e7fd      	b.n	8006236 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <xQueueReceive+0x40>
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <xQueueReceive+0x44>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <xQueueReceive+0x46>
 800624c:	2300      	movs	r3, #0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <xQueueReceive+0x62>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	61fb      	str	r3, [r7, #28]
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800626a:	f001 f875 	bl	8007358 <xTaskGetSchedulerState>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d102      	bne.n	800627a <xQueueReceive+0x72>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <xQueueReceive+0x76>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <xQueueReceive+0x78>
 800627e:	2300      	movs	r3, #0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10b      	bne.n	800629c <xQueueReceive+0x94>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	61bb      	str	r3, [r7, #24]
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	e7fd      	b.n	8006298 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800629c:	f001 fdcc 	bl	8007e38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01f      	beq.n	80062ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062b0:	f000 f8f6 	bl	80064a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	1e5a      	subs	r2, r3, #1
 80062b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00f      	beq.n	80062e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c6:	3310      	adds	r3, #16
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fe7f 	bl	8006fcc <xTaskRemoveFromEventList>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062d4:	4b3c      	ldr	r3, [pc, #240]	@ (80063c8 <xQueueReceive+0x1c0>)
 80062d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062e4:	f001 fdda 	bl	8007e9c <vPortExitCritical>
				return pdPASS;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e069      	b.n	80063c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062f2:	f001 fdd3 	bl	8007e9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e062      	b.n	80063c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d106      	bne.n	800630e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006300:	f107 0310 	add.w	r3, r7, #16
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fec5 	bl	8007094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800630a:	2301      	movs	r3, #1
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800630e:	f001 fdc5 	bl	8007e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006312:	f000 fc2d 	bl	8006b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006316:	f001 fd8f 	bl	8007e38 <vPortEnterCritical>
 800631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006320:	b25b      	sxtb	r3, r3
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	d103      	bne.n	8006330 <xQueueReceive+0x128>
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006332:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006336:	b25b      	sxtb	r3, r3
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d103      	bne.n	8006346 <xQueueReceive+0x13e>
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006346:	f001 fda9 	bl	8007e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800634a:	1d3a      	adds	r2, r7, #4
 800634c:	f107 0310 	add.w	r3, r7, #16
 8006350:	4611      	mov	r1, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f000 feb4 	bl	80070c0 <xTaskCheckForTimeOut>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d123      	bne.n	80063a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800635e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006360:	f000 f916 	bl	8006590 <prvIsQueueEmpty>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d017      	beq.n	800639a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	3324      	adds	r3, #36	@ 0x24
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4611      	mov	r1, r2
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fdd8 	bl	8006f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800637a:	f000 f8b7 	bl	80064ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800637e:	f000 fc05 	bl	8006b8c <xTaskResumeAll>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d189      	bne.n	800629c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006388:	4b0f      	ldr	r3, [pc, #60]	@ (80063c8 <xQueueReceive+0x1c0>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	e780      	b.n	800629c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800639a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800639c:	f000 f8a6 	bl	80064ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063a0:	f000 fbf4 	bl	8006b8c <xTaskResumeAll>
 80063a4:	e77a      	b.n	800629c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063a8:	f000 f8a0 	bl	80064ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ac:	f000 fbee 	bl	8006b8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063b2:	f000 f8ed 	bl	8006590 <prvIsQueueEmpty>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f43f af6f 	beq.w	800629c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3730      	adds	r7, #48	@ 0x30
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10d      	bne.n	8006406 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d14d      	bne.n	800648e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 ffcc 	bl	8007394 <xTaskPriorityDisinherit>
 80063fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	609a      	str	r2, [r3, #8]
 8006404:	e043      	b.n	800648e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d119      	bne.n	8006440 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6858      	ldr	r0, [r3, #4]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006414:	461a      	mov	r2, r3
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	f002 ffc7 	bl	80093aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006424:	441a      	add	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	429a      	cmp	r2, r3
 8006434:	d32b      	bcc.n	800648e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	605a      	str	r2, [r3, #4]
 800643e:	e026      	b.n	800648e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68d8      	ldr	r0, [r3, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006448:	461a      	mov	r2, r3
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	f002 ffad 	bl	80093aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	425b      	negs	r3, r3
 800645a:	441a      	add	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d207      	bcs.n	800647c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006474:	425b      	negs	r3, r3
 8006476:	441a      	add	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d105      	bne.n	800648e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	3b01      	subs	r3, #1
 800648c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006496:	697b      	ldr	r3, [r7, #20]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d018      	beq.n	80064e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ba:	441a      	add	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d303      	bcc.n	80064d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68d9      	ldr	r1, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064dc:	461a      	mov	r2, r3
 80064de:	6838      	ldr	r0, [r7, #0]
 80064e0:	f002 ff63 	bl	80093aa <memcpy>
	}
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064f4:	f001 fca0 	bl	8007e38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006500:	e011      	b.n	8006526 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d012      	beq.n	8006530 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3324      	adds	r3, #36	@ 0x24
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fd5c 	bl	8006fcc <xTaskRemoveFromEventList>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800651a:	f000 fe35 	bl	8007188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	3b01      	subs	r3, #1
 8006522:	b2db      	uxtb	r3, r3
 8006524:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dce9      	bgt.n	8006502 <prvUnlockQueue+0x16>
 800652e:	e000      	b.n	8006532 <prvUnlockQueue+0x46>
					break;
 8006530:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	22ff      	movs	r2, #255	@ 0xff
 8006536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800653a:	f001 fcaf 	bl	8007e9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800653e:	f001 fc7b 	bl	8007e38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006548:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800654a:	e011      	b.n	8006570 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d012      	beq.n	800657a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3310      	adds	r3, #16
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fd37 	bl	8006fcc <xTaskRemoveFromEventList>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006564:	f000 fe10 	bl	8007188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	3b01      	subs	r3, #1
 800656c:	b2db      	uxtb	r3, r3
 800656e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006574:	2b00      	cmp	r3, #0
 8006576:	dce9      	bgt.n	800654c <prvUnlockQueue+0x60>
 8006578:	e000      	b.n	800657c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800657a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	22ff      	movs	r2, #255	@ 0xff
 8006580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006584:	f001 fc8a 	bl	8007e9c <vPortExitCritical>
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006598:	f001 fc4e 	bl	8007e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e001      	b.n	80065ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ae:	f001 fc75 	bl	8007e9c <vPortExitCritical>

	return xReturn;
 80065b2:	68fb      	ldr	r3, [r7, #12]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065c4:	f001 fc38 	bl	8007e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d102      	bne.n	80065da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	e001      	b.n	80065de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065de:	f001 fc5d 	bl	8007e9c <vPortExitCritical>

	return xReturn;
 80065e2:	68fb      	ldr	r3, [r7, #12]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	e014      	b.n	8006626 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065fc:	4a0f      	ldr	r2, [pc, #60]	@ (800663c <vQueueAddToRegistry+0x50>)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006608:	490c      	ldr	r1, [pc, #48]	@ (800663c <vQueueAddToRegistry+0x50>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006612:	4a0a      	ldr	r2, [pc, #40]	@ (800663c <vQueueAddToRegistry+0x50>)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	4413      	add	r3, r2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800661e:	e006      	b.n	800662e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b07      	cmp	r3, #7
 800662a:	d9e7      	bls.n	80065fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20001c64 	.word	0x20001c64

08006640 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006650:	f001 fbf2 	bl	8007e38 <vPortEnterCritical>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800665a:	b25b      	sxtb	r3, r3
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006660:	d103      	bne.n	800666a <vQueueWaitForMessageRestricted+0x2a>
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006670:	b25b      	sxtb	r3, r3
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d103      	bne.n	8006680 <vQueueWaitForMessageRestricted+0x40>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006680:	f001 fc0c 	bl	8007e9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	3324      	adds	r3, #36	@ 0x24
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fc6d 	bl	8006f74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800669a:	6978      	ldr	r0, [r7, #20]
 800669c:	f7ff ff26 	bl	80064ec <prvUnlockQueue>
	}
 80066a0:	bf00      	nop
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08e      	sub	sp, #56	@ 0x38
 80066ac:	af04      	add	r7, sp, #16
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10b      	bne.n	80066d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	623b      	str	r3, [r7, #32]
}
 80066ce:	bf00      	nop
 80066d0:	bf00      	nop
 80066d2:	e7fd      	b.n	80066d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	61fb      	str	r3, [r7, #28]
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066f2:	23a8      	movs	r3, #168	@ 0xa8
 80066f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2ba8      	cmp	r3, #168	@ 0xa8
 80066fa:	d00b      	beq.n	8006714 <xTaskCreateStatic+0x6c>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	61bb      	str	r3, [r7, #24]
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006714:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01e      	beq.n	800675a <xTaskCreateStatic+0xb2>
 800671c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800671e:	2b00      	cmp	r3, #0
 8006720:	d01b      	beq.n	800675a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	2202      	movs	r2, #2
 8006730:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006734:	2300      	movs	r3, #0
 8006736:	9303      	str	r3, [sp, #12]
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	9302      	str	r3, [sp, #8]
 800673c:	f107 0314 	add.w	r3, r7, #20
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f851 	bl	80067f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006752:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006754:	f000 f8f6 	bl	8006944 <prvAddNewTaskToReadyList>
 8006758:	e001      	b.n	800675e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800675e:	697b      	ldr	r3, [r7, #20]
	}
 8006760:	4618      	mov	r0, r3
 8006762:	3728      	adds	r7, #40	@ 0x28
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08c      	sub	sp, #48	@ 0x30
 800676c:	af04      	add	r7, sp, #16
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	4613      	mov	r3, r2
 8006776:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006778:	88fb      	ldrh	r3, [r7, #6]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fc7d 	bl	800807c <pvPortMalloc>
 8006782:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00e      	beq.n	80067a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800678a:	20a8      	movs	r0, #168	@ 0xa8
 800678c:	f001 fc76 	bl	800807c <pvPortMalloc>
 8006790:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	631a      	str	r2, [r3, #48]	@ 0x30
 800679e:	e005      	b.n	80067ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067a0:	6978      	ldr	r0, [r7, #20]
 80067a2:	f001 fd39 	bl	8008218 <vPortFree>
 80067a6:	e001      	b.n	80067ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d017      	beq.n	80067e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	2300      	movs	r3, #0
 80067be:	9303      	str	r3, [sp, #12]
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	9302      	str	r3, [sp, #8]
 80067c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f80f 	bl	80067f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067d6:	69f8      	ldr	r0, [r7, #28]
 80067d8:	f000 f8b4 	bl	8006944 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067dc:	2301      	movs	r3, #1
 80067de:	61bb      	str	r3, [r7, #24]
 80067e0:	e002      	b.n	80067e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067e2:	f04f 33ff 	mov.w	r3, #4294967295
 80067e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067e8:	69bb      	ldr	r3, [r7, #24]
	}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3720      	adds	r7, #32
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	461a      	mov	r2, r3
 800680c:	21a5      	movs	r1, #165	@ 0xa5
 800680e:	f002 fc5c 	bl	80090ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800681c:	3b01      	subs	r3, #1
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f023 0307 	bic.w	r3, r3, #7
 800682a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	617b      	str	r3, [r7, #20]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01f      	beq.n	8006894 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e012      	b.n	8006880 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	7819      	ldrb	r1, [r3, #0]
 8006862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	4413      	add	r3, r2
 8006868:	3334      	adds	r3, #52	@ 0x34
 800686a:	460a      	mov	r2, r1
 800686c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	4413      	add	r3, r2
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d006      	beq.n	8006888 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	3301      	adds	r3, #1
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	2b0f      	cmp	r3, #15
 8006884:	d9e9      	bls.n	800685a <prvInitialiseNewTask+0x66>
 8006886:	e000      	b.n	800688a <prvInitialiseNewTask+0x96>
			{
				break;
 8006888:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006892:	e003      	b.n	800689c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689e:	2b37      	cmp	r3, #55	@ 0x37
 80068a0:	d901      	bls.n	80068a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068a2:	2337      	movs	r3, #55	@ 0x37
 80068a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	2200      	movs	r2, #0
 80068b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ba:	3304      	adds	r3, #4
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff f965 	bl	8005b8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	3318      	adds	r3, #24
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff f960 	bl	8005b8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	3354      	adds	r3, #84	@ 0x54
 80068f6:	224c      	movs	r2, #76	@ 0x4c
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f002 fbe5 	bl	80090ca <memset>
 8006900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006902:	4a0d      	ldr	r2, [pc, #52]	@ (8006938 <prvInitialiseNewTask+0x144>)
 8006904:	659a      	str	r2, [r3, #88]	@ 0x58
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	4a0c      	ldr	r2, [pc, #48]	@ (800693c <prvInitialiseNewTask+0x148>)
 800690a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	4a0c      	ldr	r2, [pc, #48]	@ (8006940 <prvInitialiseNewTask+0x14c>)
 8006910:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	68f9      	ldr	r1, [r7, #12]
 8006916:	69b8      	ldr	r0, [r7, #24]
 8006918:	f001 f95a 	bl	8007bd0 <pxPortInitialiseStack>
 800691c:	4602      	mov	r2, r0
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800692c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800692e:	bf00      	nop
 8006930:	3720      	adds	r7, #32
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20009828 	.word	0x20009828
 800693c:	20009890 	.word	0x20009890
 8006940:	200098f8 	.word	0x200098f8

08006944 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800694c:	f001 fa74 	bl	8007e38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006950:	4b2d      	ldr	r3, [pc, #180]	@ (8006a08 <prvAddNewTaskToReadyList+0xc4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a2c      	ldr	r2, [pc, #176]	@ (8006a08 <prvAddNewTaskToReadyList+0xc4>)
 8006958:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800695a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006962:	4a2a      	ldr	r2, [pc, #168]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006968:	4b27      	ldr	r3, [pc, #156]	@ (8006a08 <prvAddNewTaskToReadyList+0xc4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d110      	bne.n	8006992 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006970:	f000 fc2e 	bl	80071d0 <prvInitialiseTaskLists>
 8006974:	e00d      	b.n	8006992 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006976:	4b26      	ldr	r3, [pc, #152]	@ (8006a10 <prvAddNewTaskToReadyList+0xcc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800697e:	4b23      	ldr	r3, [pc, #140]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	429a      	cmp	r2, r3
 800698a:	d802      	bhi.n	8006992 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800698c:	4a1f      	ldr	r2, [pc, #124]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006992:	4b20      	ldr	r3, [pc, #128]	@ (8006a14 <prvAddNewTaskToReadyList+0xd0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	4a1e      	ldr	r2, [pc, #120]	@ (8006a14 <prvAddNewTaskToReadyList+0xd0>)
 800699a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800699c:	4b1d      	ldr	r3, [pc, #116]	@ (8006a14 <prvAddNewTaskToReadyList+0xd0>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a18 <prvAddNewTaskToReadyList+0xd4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d903      	bls.n	80069b8 <prvAddNewTaskToReadyList+0x74>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	4a18      	ldr	r2, [pc, #96]	@ (8006a18 <prvAddNewTaskToReadyList+0xd4>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4a15      	ldr	r2, [pc, #84]	@ (8006a1c <prvAddNewTaskToReadyList+0xd8>)
 80069c6:	441a      	add	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7ff f8e9 	bl	8005ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069d4:	f001 fa62 	bl	8007e9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <prvAddNewTaskToReadyList+0xcc>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00e      	beq.n	80069fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069e0:	4b0a      	ldr	r3, [pc, #40]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d207      	bcs.n	80069fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006a20 <prvAddNewTaskToReadyList+0xdc>)
 80069f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	20002178 	.word	0x20002178
 8006a0c:	20001ca4 	.word	0x20001ca4
 8006a10:	20002184 	.word	0x20002184
 8006a14:	20002194 	.word	0x20002194
 8006a18:	20002180 	.word	0x20002180
 8006a1c:	20001ca8 	.word	0x20001ca8
 8006a20:	e000ed04 	.word	0xe000ed04

08006a24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d018      	beq.n	8006a68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a36:	4b14      	ldr	r3, [pc, #80]	@ (8006a88 <vTaskDelay+0x64>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <vTaskDelay+0x32>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	60bb      	str	r3, [r7, #8]
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	e7fd      	b.n	8006a52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a56:	f000 f88b 	bl	8006b70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fd09 	bl	8007474 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a62:	f000 f893 	bl	8006b8c <xTaskResumeAll>
 8006a66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d107      	bne.n	8006a7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006a6e:	4b07      	ldr	r3, [pc, #28]	@ (8006a8c <vTaskDelay+0x68>)
 8006a70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	200021a0 	.word	0x200021a0
 8006a8c:	e000ed04 	.word	0xe000ed04

08006a90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	@ 0x28
 8006a94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a9e:	463a      	mov	r2, r7
 8006aa0:	1d39      	adds	r1, r7, #4
 8006aa2:	f107 0308 	add.w	r3, r7, #8
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff f81c 	bl	8005ae4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	9202      	str	r2, [sp, #8]
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	2300      	movs	r3, #0
 8006abc:	460a      	mov	r2, r1
 8006abe:	4924      	ldr	r1, [pc, #144]	@ (8006b50 <vTaskStartScheduler+0xc0>)
 8006ac0:	4824      	ldr	r0, [pc, #144]	@ (8006b54 <vTaskStartScheduler+0xc4>)
 8006ac2:	f7ff fdf1 	bl	80066a8 <xTaskCreateStatic>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4a23      	ldr	r2, [pc, #140]	@ (8006b58 <vTaskStartScheduler+0xc8>)
 8006aca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006acc:	4b22      	ldr	r3, [pc, #136]	@ (8006b58 <vTaskStartScheduler+0xc8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e001      	b.n	8006ade <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d102      	bne.n	8006aea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ae4:	f000 fd1a 	bl	800751c <xTimerCreateTimerTask>
 8006ae8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d11b      	bne.n	8006b28 <vTaskStartScheduler+0x98>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	613b      	str	r3, [r7, #16]
}
 8006b02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b04:	4b15      	ldr	r3, [pc, #84]	@ (8006b5c <vTaskStartScheduler+0xcc>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3354      	adds	r3, #84	@ 0x54
 8006b0a:	4a15      	ldr	r2, [pc, #84]	@ (8006b60 <vTaskStartScheduler+0xd0>)
 8006b0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b0e:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <vTaskStartScheduler+0xd4>)
 8006b10:	f04f 32ff 	mov.w	r2, #4294967295
 8006b14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b16:	4b14      	ldr	r3, [pc, #80]	@ (8006b68 <vTaskStartScheduler+0xd8>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b1c:	4b13      	ldr	r3, [pc, #76]	@ (8006b6c <vTaskStartScheduler+0xdc>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b22:	f001 f8e5 	bl	8007cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b26:	e00f      	b.n	8006b48 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d10b      	bne.n	8006b48 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60fb      	str	r3, [r7, #12]
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	e7fd      	b.n	8006b44 <vTaskStartScheduler+0xb4>
}
 8006b48:	bf00      	nop
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	0800b5bc 	.word	0x0800b5bc
 8006b54:	080071a1 	.word	0x080071a1
 8006b58:	2000219c 	.word	0x2000219c
 8006b5c:	20001ca4 	.word	0x20001ca4
 8006b60:	20000050 	.word	0x20000050
 8006b64:	20002198 	.word	0x20002198
 8006b68:	20002184 	.word	0x20002184
 8006b6c:	2000217c 	.word	0x2000217c

08006b70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b74:	4b04      	ldr	r3, [pc, #16]	@ (8006b88 <vTaskSuspendAll+0x18>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	4a03      	ldr	r2, [pc, #12]	@ (8006b88 <vTaskSuspendAll+0x18>)
 8006b7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b7e:	bf00      	nop
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	200021a0 	.word	0x200021a0

08006b8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b9a:	4b42      	ldr	r3, [pc, #264]	@ (8006ca4 <xTaskResumeAll+0x118>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10b      	bne.n	8006bba <xTaskResumeAll+0x2e>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	603b      	str	r3, [r7, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	e7fd      	b.n	8006bb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bba:	f001 f93d 	bl	8007e38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bbe:	4b39      	ldr	r3, [pc, #228]	@ (8006ca4 <xTaskResumeAll+0x118>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	4a37      	ldr	r2, [pc, #220]	@ (8006ca4 <xTaskResumeAll+0x118>)
 8006bc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bc8:	4b36      	ldr	r3, [pc, #216]	@ (8006ca4 <xTaskResumeAll+0x118>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d162      	bne.n	8006c96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bd0:	4b35      	ldr	r3, [pc, #212]	@ (8006ca8 <xTaskResumeAll+0x11c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d05e      	beq.n	8006c96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bd8:	e02f      	b.n	8006c3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bda:	4b34      	ldr	r3, [pc, #208]	@ (8006cac <xTaskResumeAll+0x120>)
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3318      	adds	r3, #24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff f83a 	bl	8005c60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff f835 	bl	8005c60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8006cb0 <xTaskResumeAll+0x124>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d903      	bls.n	8006c0a <xTaskResumeAll+0x7e>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c06:	4a2a      	ldr	r2, [pc, #168]	@ (8006cb0 <xTaskResumeAll+0x124>)
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4a27      	ldr	r2, [pc, #156]	@ (8006cb4 <xTaskResumeAll+0x128>)
 8006c18:	441a      	add	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f7fe ffc0 	bl	8005ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c2a:	4b23      	ldr	r3, [pc, #140]	@ (8006cb8 <xTaskResumeAll+0x12c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d302      	bcc.n	8006c3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006c34:	4b21      	ldr	r3, [pc, #132]	@ (8006cbc <xTaskResumeAll+0x130>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8006cac <xTaskResumeAll+0x120>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1cb      	bne.n	8006bda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c48:	f000 fb66 	bl	8007318 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006cc0 <xTaskResumeAll+0x134>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d010      	beq.n	8006c7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c58:	f000 f846 	bl	8006ce8 <xTaskIncrementTick>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006c62:	4b16      	ldr	r3, [pc, #88]	@ (8006cbc <xTaskResumeAll+0x130>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1f1      	bne.n	8006c58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006c74:	4b12      	ldr	r3, [pc, #72]	@ (8006cc0 <xTaskResumeAll+0x134>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c7a:	4b10      	ldr	r3, [pc, #64]	@ (8006cbc <xTaskResumeAll+0x130>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c82:	2301      	movs	r3, #1
 8006c84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c86:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc4 <xTaskResumeAll+0x138>)
 8006c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c96:	f001 f901 	bl	8007e9c <vPortExitCritical>

	return xAlreadyYielded;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	200021a0 	.word	0x200021a0
 8006ca8:	20002178 	.word	0x20002178
 8006cac:	20002138 	.word	0x20002138
 8006cb0:	20002180 	.word	0x20002180
 8006cb4:	20001ca8 	.word	0x20001ca8
 8006cb8:	20001ca4 	.word	0x20001ca4
 8006cbc:	2000218c 	.word	0x2000218c
 8006cc0:	20002188 	.word	0x20002188
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cce:	4b05      	ldr	r3, [pc, #20]	@ (8006ce4 <xTaskGetTickCount+0x1c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006cd4:	687b      	ldr	r3, [r7, #4]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	2000217c 	.word	0x2000217c

08006ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8006e30 <xTaskIncrementTick+0x148>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f040 8090 	bne.w	8006e1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e34 <xTaskIncrementTick+0x14c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3301      	adds	r3, #1
 8006d02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d04:	4a4b      	ldr	r2, [pc, #300]	@ (8006e34 <xTaskIncrementTick+0x14c>)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d121      	bne.n	8006d54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d10:	4b49      	ldr	r3, [pc, #292]	@ (8006e38 <xTaskIncrementTick+0x150>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00b      	beq.n	8006d32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	603b      	str	r3, [r7, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	bf00      	nop
 8006d30:	e7fd      	b.n	8006d2e <xTaskIncrementTick+0x46>
 8006d32:	4b41      	ldr	r3, [pc, #260]	@ (8006e38 <xTaskIncrementTick+0x150>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	4b40      	ldr	r3, [pc, #256]	@ (8006e3c <xTaskIncrementTick+0x154>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e38 <xTaskIncrementTick+0x150>)
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	4a3e      	ldr	r2, [pc, #248]	@ (8006e3c <xTaskIncrementTick+0x154>)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	4b3e      	ldr	r3, [pc, #248]	@ (8006e40 <xTaskIncrementTick+0x158>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e40 <xTaskIncrementTick+0x158>)
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	f000 fae2 	bl	8007318 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d54:	4b3b      	ldr	r3, [pc, #236]	@ (8006e44 <xTaskIncrementTick+0x15c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d349      	bcc.n	8006df2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d5e:	4b36      	ldr	r3, [pc, #216]	@ (8006e38 <xTaskIncrementTick+0x150>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d68:	4b36      	ldr	r3, [pc, #216]	@ (8006e44 <xTaskIncrementTick+0x15c>)
 8006d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6e:	601a      	str	r2, [r3, #0]
					break;
 8006d70:	e03f      	b.n	8006df2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d72:	4b31      	ldr	r3, [pc, #196]	@ (8006e38 <xTaskIncrementTick+0x150>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d203      	bcs.n	8006d92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8006e44 <xTaskIncrementTick+0x15c>)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d90:	e02f      	b.n	8006df2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	3304      	adds	r3, #4
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe ff62 	bl	8005c60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	3318      	adds	r3, #24
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fe ff59 	bl	8005c60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db2:	4b25      	ldr	r3, [pc, #148]	@ (8006e48 <xTaskIncrementTick+0x160>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d903      	bls.n	8006dc2 <xTaskIncrementTick+0xda>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbe:	4a22      	ldr	r2, [pc, #136]	@ (8006e48 <xTaskIncrementTick+0x160>)
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4a1f      	ldr	r2, [pc, #124]	@ (8006e4c <xTaskIncrementTick+0x164>)
 8006dd0:	441a      	add	r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	f7fe fee4 	bl	8005ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e50 <xTaskIncrementTick+0x168>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d3b8      	bcc.n	8006d5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006dec:	2301      	movs	r3, #1
 8006dee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006df0:	e7b5      	b.n	8006d5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006df2:	4b17      	ldr	r3, [pc, #92]	@ (8006e50 <xTaskIncrementTick+0x168>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df8:	4914      	ldr	r1, [pc, #80]	@ (8006e4c <xTaskIncrementTick+0x164>)
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d901      	bls.n	8006e0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e0e:	4b11      	ldr	r3, [pc, #68]	@ (8006e54 <xTaskIncrementTick+0x16c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006e16:	2301      	movs	r3, #1
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	e004      	b.n	8006e26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e58 <xTaskIncrementTick+0x170>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	4a0d      	ldr	r2, [pc, #52]	@ (8006e58 <xTaskIncrementTick+0x170>)
 8006e24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e26:	697b      	ldr	r3, [r7, #20]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	200021a0 	.word	0x200021a0
 8006e34:	2000217c 	.word	0x2000217c
 8006e38:	20002130 	.word	0x20002130
 8006e3c:	20002134 	.word	0x20002134
 8006e40:	20002190 	.word	0x20002190
 8006e44:	20002198 	.word	0x20002198
 8006e48:	20002180 	.word	0x20002180
 8006e4c:	20001ca8 	.word	0x20001ca8
 8006e50:	20001ca4 	.word	0x20001ca4
 8006e54:	2000218c 	.word	0x2000218c
 8006e58:	20002188 	.word	0x20002188

08006e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e62:	4b2b      	ldr	r3, [pc, #172]	@ (8006f10 <vTaskSwitchContext+0xb4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8006f14 <vTaskSwitchContext+0xb8>)
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e70:	e047      	b.n	8006f02 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006e72:	4b28      	ldr	r3, [pc, #160]	@ (8006f14 <vTaskSwitchContext+0xb8>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e78:	4b27      	ldr	r3, [pc, #156]	@ (8006f18 <vTaskSwitchContext+0xbc>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	e011      	b.n	8006ea4 <vTaskSwitchContext+0x48>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <vTaskSwitchContext+0x42>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	607b      	str	r3, [r7, #4]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <vTaskSwitchContext+0x3e>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	491d      	ldr	r1, [pc, #116]	@ (8006f1c <vTaskSwitchContext+0xc0>)
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0e3      	beq.n	8006e80 <vTaskSwitchContext+0x24>
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4a16      	ldr	r2, [pc, #88]	@ (8006f1c <vTaskSwitchContext+0xc0>)
 8006ec4:	4413      	add	r3, r2
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	605a      	str	r2, [r3, #4]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d104      	bne.n	8006ee8 <vTaskSwitchContext+0x8c>
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	605a      	str	r2, [r3, #4]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	4a0c      	ldr	r2, [pc, #48]	@ (8006f20 <vTaskSwitchContext+0xc4>)
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	4a09      	ldr	r2, [pc, #36]	@ (8006f18 <vTaskSwitchContext+0xbc>)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ef8:	4b09      	ldr	r3, [pc, #36]	@ (8006f20 <vTaskSwitchContext+0xc4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3354      	adds	r3, #84	@ 0x54
 8006efe:	4a09      	ldr	r2, [pc, #36]	@ (8006f24 <vTaskSwitchContext+0xc8>)
 8006f00:	6013      	str	r3, [r2, #0]
}
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	200021a0 	.word	0x200021a0
 8006f14:	2000218c 	.word	0x2000218c
 8006f18:	20002180 	.word	0x20002180
 8006f1c:	20001ca8 	.word	0x20001ca8
 8006f20:	20001ca4 	.word	0x20001ca4
 8006f24:	20000050 	.word	0x20000050

08006f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10b      	bne.n	8006f50 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	60fb      	str	r3, [r7, #12]
}
 8006f4a:	bf00      	nop
 8006f4c:	bf00      	nop
 8006f4e:	e7fd      	b.n	8006f4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f50:	4b07      	ldr	r3, [pc, #28]	@ (8006f70 <vTaskPlaceOnEventList+0x48>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3318      	adds	r3, #24
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fe fe48 	bl	8005bee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f5e:	2101      	movs	r1, #1
 8006f60:	6838      	ldr	r0, [r7, #0]
 8006f62:	f000 fa87 	bl	8007474 <prvAddCurrentTaskToDelayedList>
}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20001ca4 	.word	0x20001ca4

08006f74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10b      	bne.n	8006f9e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	617b      	str	r3, [r7, #20]
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	e7fd      	b.n	8006f9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3318      	adds	r3, #24
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7fe fdfd 	bl	8005ba6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	68b8      	ldr	r0, [r7, #8]
 8006fbc:	f000 fa5a 	bl	8007474 <prvAddCurrentTaskToDelayedList>
	}
 8006fc0:	bf00      	nop
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20001ca4 	.word	0x20001ca4

08006fcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60fb      	str	r3, [r7, #12]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3318      	adds	r3, #24
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fe2e 	bl	8005c60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007004:	4b1d      	ldr	r3, [pc, #116]	@ (800707c <xTaskRemoveFromEventList+0xb0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11d      	bne.n	8007048 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe fe25 	bl	8005c60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701a:	4b19      	ldr	r3, [pc, #100]	@ (8007080 <xTaskRemoveFromEventList+0xb4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d903      	bls.n	800702a <xTaskRemoveFromEventList+0x5e>
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	4a16      	ldr	r2, [pc, #88]	@ (8007080 <xTaskRemoveFromEventList+0xb4>)
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4a13      	ldr	r2, [pc, #76]	@ (8007084 <xTaskRemoveFromEventList+0xb8>)
 8007038:	441a      	add	r2, r3
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe fdb0 	bl	8005ba6 <vListInsertEnd>
 8007046:	e005      	b.n	8007054 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3318      	adds	r3, #24
 800704c:	4619      	mov	r1, r3
 800704e:	480e      	ldr	r0, [pc, #56]	@ (8007088 <xTaskRemoveFromEventList+0xbc>)
 8007050:	f7fe fda9 	bl	8005ba6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007058:	4b0c      	ldr	r3, [pc, #48]	@ (800708c <xTaskRemoveFromEventList+0xc0>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	429a      	cmp	r2, r3
 8007060:	d905      	bls.n	800706e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007062:	2301      	movs	r3, #1
 8007064:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007066:	4b0a      	ldr	r3, [pc, #40]	@ (8007090 <xTaskRemoveFromEventList+0xc4>)
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	e001      	b.n	8007072 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007072:	697b      	ldr	r3, [r7, #20]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	200021a0 	.word	0x200021a0
 8007080:	20002180 	.word	0x20002180
 8007084:	20001ca8 	.word	0x20001ca8
 8007088:	20002138 	.word	0x20002138
 800708c:	20001ca4 	.word	0x20001ca4
 8007090:	2000218c 	.word	0x2000218c

08007094 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800709c:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <vTaskInternalSetTimeOutState+0x24>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070a4:	4b05      	ldr	r3, [pc, #20]	@ (80070bc <vTaskInternalSetTimeOutState+0x28>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	605a      	str	r2, [r3, #4]
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	20002190 	.word	0x20002190
 80070bc:	2000217c 	.word	0x2000217c

080070c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	613b      	str	r3, [r7, #16]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	60fb      	str	r3, [r7, #12]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007106:	f000 fe97 	bl	8007e38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800710a:	4b1d      	ldr	r3, [pc, #116]	@ (8007180 <xTaskCheckForTimeOut+0xc0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007122:	d102      	bne.n	800712a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	e023      	b.n	8007172 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b15      	ldr	r3, [pc, #84]	@ (8007184 <xTaskCheckForTimeOut+0xc4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d007      	beq.n	8007146 <xTaskCheckForTimeOut+0x86>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	429a      	cmp	r2, r3
 800713e:	d302      	bcc.n	8007146 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007140:	2301      	movs	r3, #1
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	e015      	b.n	8007172 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	429a      	cmp	r2, r3
 800714e:	d20b      	bcs.n	8007168 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff99 	bl	8007094 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007162:	2300      	movs	r3, #0
 8007164:	61fb      	str	r3, [r7, #28]
 8007166:	e004      	b.n	8007172 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800716e:	2301      	movs	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007172:	f000 fe93 	bl	8007e9c <vPortExitCritical>

	return xReturn;
 8007176:	69fb      	ldr	r3, [r7, #28]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	2000217c 	.word	0x2000217c
 8007184:	20002190 	.word	0x20002190

08007188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800718c:	4b03      	ldr	r3, [pc, #12]	@ (800719c <vTaskMissedYield+0x14>)
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	bf00      	nop
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	2000218c 	.word	0x2000218c

080071a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071a8:	f000 f852 	bl	8007250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071ac:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <prvIdleTask+0x28>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d9f9      	bls.n	80071a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071b4:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <prvIdleTask+0x2c>)
 80071b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071c4:	e7f0      	b.n	80071a8 <prvIdleTask+0x8>
 80071c6:	bf00      	nop
 80071c8:	20001ca8 	.word	0x20001ca8
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071d6:	2300      	movs	r3, #0
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	e00c      	b.n	80071f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4a12      	ldr	r2, [pc, #72]	@ (8007230 <prvInitialiseTaskLists+0x60>)
 80071e8:	4413      	add	r3, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fcae 	bl	8005b4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3301      	adds	r3, #1
 80071f4:	607b      	str	r3, [r7, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b37      	cmp	r3, #55	@ 0x37
 80071fa:	d9ef      	bls.n	80071dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071fc:	480d      	ldr	r0, [pc, #52]	@ (8007234 <prvInitialiseTaskLists+0x64>)
 80071fe:	f7fe fca5 	bl	8005b4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007202:	480d      	ldr	r0, [pc, #52]	@ (8007238 <prvInitialiseTaskLists+0x68>)
 8007204:	f7fe fca2 	bl	8005b4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007208:	480c      	ldr	r0, [pc, #48]	@ (800723c <prvInitialiseTaskLists+0x6c>)
 800720a:	f7fe fc9f 	bl	8005b4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800720e:	480c      	ldr	r0, [pc, #48]	@ (8007240 <prvInitialiseTaskLists+0x70>)
 8007210:	f7fe fc9c 	bl	8005b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007214:	480b      	ldr	r0, [pc, #44]	@ (8007244 <prvInitialiseTaskLists+0x74>)
 8007216:	f7fe fc99 	bl	8005b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800721a:	4b0b      	ldr	r3, [pc, #44]	@ (8007248 <prvInitialiseTaskLists+0x78>)
 800721c:	4a05      	ldr	r2, [pc, #20]	@ (8007234 <prvInitialiseTaskLists+0x64>)
 800721e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007220:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <prvInitialiseTaskLists+0x7c>)
 8007222:	4a05      	ldr	r2, [pc, #20]	@ (8007238 <prvInitialiseTaskLists+0x68>)
 8007224:	601a      	str	r2, [r3, #0]
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20001ca8 	.word	0x20001ca8
 8007234:	20002108 	.word	0x20002108
 8007238:	2000211c 	.word	0x2000211c
 800723c:	20002138 	.word	0x20002138
 8007240:	2000214c 	.word	0x2000214c
 8007244:	20002164 	.word	0x20002164
 8007248:	20002130 	.word	0x20002130
 800724c:	20002134 	.word	0x20002134

08007250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007256:	e019      	b.n	800728c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007258:	f000 fdee 	bl	8007e38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725c:	4b10      	ldr	r3, [pc, #64]	@ (80072a0 <prvCheckTasksWaitingTermination+0x50>)
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3304      	adds	r3, #4
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe fcf9 	bl	8005c60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800726e:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <prvCheckTasksWaitingTermination+0x54>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3b01      	subs	r3, #1
 8007274:	4a0b      	ldr	r2, [pc, #44]	@ (80072a4 <prvCheckTasksWaitingTermination+0x54>)
 8007276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007278:	4b0b      	ldr	r3, [pc, #44]	@ (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	4a0a      	ldr	r2, [pc, #40]	@ (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 8007280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007282:	f000 fe0b 	bl	8007e9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f810 	bl	80072ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800728c:	4b06      	ldr	r3, [pc, #24]	@ (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e1      	bne.n	8007258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	2000214c 	.word	0x2000214c
 80072a4:	20002178 	.word	0x20002178
 80072a8:	20002160 	.word	0x20002160

080072ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3354      	adds	r3, #84	@ 0x54
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 ffb5 	bl	8009228 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d108      	bne.n	80072da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 ffa3 	bl	8008218 <vPortFree>
				vPortFree( pxTCB );
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 ffa0 	bl	8008218 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072d8:	e019      	b.n	800730e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d103      	bne.n	80072ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 ff97 	bl	8008218 <vPortFree>
	}
 80072ea:	e010      	b.n	800730e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d00b      	beq.n	800730e <prvDeleteTCB+0x62>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	60fb      	str	r3, [r7, #12]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <prvDeleteTCB+0x5e>
	}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800731e:	4b0c      	ldr	r3, [pc, #48]	@ (8007350 <prvResetNextTaskUnblockTime+0x38>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <prvResetNextTaskUnblockTime+0x3c>)
 800732a:	f04f 32ff 	mov.w	r2, #4294967295
 800732e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007330:	e008      	b.n	8007344 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007332:	4b07      	ldr	r3, [pc, #28]	@ (8007350 <prvResetNextTaskUnblockTime+0x38>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4a04      	ldr	r2, [pc, #16]	@ (8007354 <prvResetNextTaskUnblockTime+0x3c>)
 8007342:	6013      	str	r3, [r2, #0]
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20002130 	.word	0x20002130
 8007354:	20002198 	.word	0x20002198

08007358 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800735e:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <xTaskGetSchedulerState+0x34>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007366:	2301      	movs	r3, #1
 8007368:	607b      	str	r3, [r7, #4]
 800736a:	e008      	b.n	800737e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800736c:	4b08      	ldr	r3, [pc, #32]	@ (8007390 <xTaskGetSchedulerState+0x38>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007374:	2302      	movs	r3, #2
 8007376:	607b      	str	r3, [r7, #4]
 8007378:	e001      	b.n	800737e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800737a:	2300      	movs	r3, #0
 800737c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800737e:	687b      	ldr	r3, [r7, #4]
	}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	20002184 	.word	0x20002184
 8007390:	200021a0 	.word	0x200021a0

08007394 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d058      	beq.n	800745c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007468 <xTaskPriorityDisinherit+0xd4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d00b      	beq.n	80073cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	60fb      	str	r3, [r7, #12]
}
 80073c6:	bf00      	nop
 80073c8:	bf00      	nop
 80073ca:	e7fd      	b.n	80073c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10b      	bne.n	80073ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	60bb      	str	r3, [r7, #8]
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	e7fd      	b.n	80073e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f0:	1e5a      	subs	r2, r3, #1
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073fe:	429a      	cmp	r2, r3
 8007400:	d02c      	beq.n	800745c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007406:	2b00      	cmp	r3, #0
 8007408:	d128      	bne.n	800745c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3304      	adds	r3, #4
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fc26 	bl	8005c60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742c:	4b0f      	ldr	r3, [pc, #60]	@ (800746c <xTaskPriorityDisinherit+0xd8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d903      	bls.n	800743c <xTaskPriorityDisinherit+0xa8>
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007438:	4a0c      	ldr	r2, [pc, #48]	@ (800746c <xTaskPriorityDisinherit+0xd8>)
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4a09      	ldr	r2, [pc, #36]	@ (8007470 <xTaskPriorityDisinherit+0xdc>)
 800744a:	441a      	add	r2, r3
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	3304      	adds	r3, #4
 8007450:	4619      	mov	r1, r3
 8007452:	4610      	mov	r0, r2
 8007454:	f7fe fba7 	bl	8005ba6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007458:	2301      	movs	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800745c:	697b      	ldr	r3, [r7, #20]
	}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20001ca4 	.word	0x20001ca4
 800746c:	20002180 	.word	0x20002180
 8007470:	20001ca8 	.word	0x20001ca8

08007474 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800747e:	4b21      	ldr	r3, [pc, #132]	@ (8007504 <prvAddCurrentTaskToDelayedList+0x90>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007484:	4b20      	ldr	r3, [pc, #128]	@ (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3304      	adds	r3, #4
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fbe8 	bl	8005c60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d10a      	bne.n	80074ae <prvAddCurrentTaskToDelayedList+0x3a>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d007      	beq.n	80074ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800749e:	4b1a      	ldr	r3, [pc, #104]	@ (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3304      	adds	r3, #4
 80074a4:	4619      	mov	r1, r3
 80074a6:	4819      	ldr	r0, [pc, #100]	@ (800750c <prvAddCurrentTaskToDelayedList+0x98>)
 80074a8:	f7fe fb7d 	bl	8005ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074ac:	e026      	b.n	80074fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074b6:	4b14      	ldr	r3, [pc, #80]	@ (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d209      	bcs.n	80074da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074c6:	4b12      	ldr	r3, [pc, #72]	@ (8007510 <prvAddCurrentTaskToDelayedList+0x9c>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3304      	adds	r3, #4
 80074d0:	4619      	mov	r1, r3
 80074d2:	4610      	mov	r0, r2
 80074d4:	f7fe fb8b 	bl	8005bee <vListInsert>
}
 80074d8:	e010      	b.n	80074fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074da:	4b0e      	ldr	r3, [pc, #56]	@ (8007514 <prvAddCurrentTaskToDelayedList+0xa0>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4b0a      	ldr	r3, [pc, #40]	@ (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f7fe fb81 	bl	8005bee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d202      	bcs.n	80074fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074f6:	4a08      	ldr	r2, [pc, #32]	@ (8007518 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	6013      	str	r3, [r2, #0]
}
 80074fc:	bf00      	nop
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	2000217c 	.word	0x2000217c
 8007508:	20001ca4 	.word	0x20001ca4
 800750c:	20002164 	.word	0x20002164
 8007510:	20002134 	.word	0x20002134
 8007514:	20002130 	.word	0x20002130
 8007518:	20002198 	.word	0x20002198

0800751c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	@ 0x28
 8007520:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007522:	2300      	movs	r3, #0
 8007524:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007526:	f000 fb13 	bl	8007b50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800752a:	4b1d      	ldr	r3, [pc, #116]	@ (80075a0 <xTimerCreateTimerTask+0x84>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d021      	beq.n	8007576 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007536:	2300      	movs	r3, #0
 8007538:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800753a:	1d3a      	adds	r2, r7, #4
 800753c:	f107 0108 	add.w	r1, r7, #8
 8007540:	f107 030c 	add.w	r3, r7, #12
 8007544:	4618      	mov	r0, r3
 8007546:	f7fe fae7 	bl	8005b18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	9202      	str	r2, [sp, #8]
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	2337      	movs	r3, #55	@ 0x37
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	2300      	movs	r3, #0
 800755a:	460a      	mov	r2, r1
 800755c:	4911      	ldr	r1, [pc, #68]	@ (80075a4 <xTimerCreateTimerTask+0x88>)
 800755e:	4812      	ldr	r0, [pc, #72]	@ (80075a8 <xTimerCreateTimerTask+0x8c>)
 8007560:	f7ff f8a2 	bl	80066a8 <xTaskCreateStatic>
 8007564:	4603      	mov	r3, r0
 8007566:	4a11      	ldr	r2, [pc, #68]	@ (80075ac <xTimerCreateTimerTask+0x90>)
 8007568:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800756a:	4b10      	ldr	r3, [pc, #64]	@ (80075ac <xTimerCreateTimerTask+0x90>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007572:	2301      	movs	r3, #1
 8007574:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10b      	bne.n	8007594 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	613b      	str	r3, [r7, #16]
}
 800758e:	bf00      	nop
 8007590:	bf00      	nop
 8007592:	e7fd      	b.n	8007590 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007594:	697b      	ldr	r3, [r7, #20]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	200021d4 	.word	0x200021d4
 80075a4:	0800b5c4 	.word	0x0800b5c4
 80075a8:	080076e9 	.word	0x080076e9
 80075ac:	200021d8 	.word	0x200021d8

080075b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08a      	sub	sp, #40	@ 0x28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80075be:	2300      	movs	r3, #0
 80075c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	623b      	str	r3, [r7, #32]
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075e0:	4b19      	ldr	r3, [pc, #100]	@ (8007648 <xTimerGenericCommand+0x98>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d02a      	beq.n	800763e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b05      	cmp	r3, #5
 80075f8:	dc18      	bgt.n	800762c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80075fa:	f7ff fead 	bl	8007358 <xTaskGetSchedulerState>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b02      	cmp	r3, #2
 8007602:	d109      	bne.n	8007618 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007604:	4b10      	ldr	r3, [pc, #64]	@ (8007648 <xTimerGenericCommand+0x98>)
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	f107 0110 	add.w	r1, r7, #16
 800760c:	2300      	movs	r3, #0
 800760e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007610:	f7fe fc5a 	bl	8005ec8 <xQueueGenericSend>
 8007614:	6278      	str	r0, [r7, #36]	@ 0x24
 8007616:	e012      	b.n	800763e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007618:	4b0b      	ldr	r3, [pc, #44]	@ (8007648 <xTimerGenericCommand+0x98>)
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	f107 0110 	add.w	r1, r7, #16
 8007620:	2300      	movs	r3, #0
 8007622:	2200      	movs	r2, #0
 8007624:	f7fe fc50 	bl	8005ec8 <xQueueGenericSend>
 8007628:	6278      	str	r0, [r7, #36]	@ 0x24
 800762a:	e008      	b.n	800763e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800762c:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <xTimerGenericCommand+0x98>)
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	f107 0110 	add.w	r1, r7, #16
 8007634:	2300      	movs	r3, #0
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	f7fe fd48 	bl	80060cc <xQueueGenericSendFromISR>
 800763c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007640:	4618      	mov	r0, r3
 8007642:	3728      	adds	r7, #40	@ 0x28
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	200021d4 	.word	0x200021d4

0800764c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af02      	add	r7, sp, #8
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007656:	4b23      	ldr	r3, [pc, #140]	@ (80076e4 <prvProcessExpiredTimer+0x98>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	3304      	adds	r3, #4
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe fafb 	bl	8005c60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b00      	cmp	r3, #0
 8007676:	d023      	beq.n	80076c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	18d1      	adds	r1, r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	6978      	ldr	r0, [r7, #20]
 8007686:	f000 f8d5 	bl	8007834 <prvInsertTimerInActiveList>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d020      	beq.n	80076d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007690:	2300      	movs	r3, #0
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	2100      	movs	r1, #0
 800769a:	6978      	ldr	r0, [r7, #20]
 800769c:	f7ff ff88 	bl	80075b0 <xTimerGenericCommand>
 80076a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d114      	bne.n	80076d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	60fb      	str	r3, [r7, #12]
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	e7fd      	b.n	80076bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076c6:	f023 0301 	bic.w	r3, r3, #1
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	6978      	ldr	r0, [r7, #20]
 80076d8:	4798      	blx	r3
}
 80076da:	bf00      	nop
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	200021cc 	.word	0x200021cc

080076e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076f0:	f107 0308 	add.w	r3, r7, #8
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 f859 	bl	80077ac <prvGetNextExpireTime>
 80076fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4619      	mov	r1, r3
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f805 	bl	8007710 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007706:	f000 f8d7 	bl	80078b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800770a:	bf00      	nop
 800770c:	e7f0      	b.n	80076f0 <prvTimerTask+0x8>
	...

08007710 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800771a:	f7ff fa29 	bl	8006b70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800771e:	f107 0308 	add.w	r3, r7, #8
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f866 	bl	80077f4 <prvSampleTimeNow>
 8007728:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d130      	bne.n	8007792 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <prvProcessTimerOrBlockTask+0x3c>
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	429a      	cmp	r2, r3
 800773c:	d806      	bhi.n	800774c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800773e:	f7ff fa25 	bl	8006b8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7ff ff81 	bl	800764c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800774a:	e024      	b.n	8007796 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d008      	beq.n	8007764 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007752:	4b13      	ldr	r3, [pc, #76]	@ (80077a0 <prvProcessTimerOrBlockTask+0x90>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <prvProcessTimerOrBlockTask+0x50>
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <prvProcessTimerOrBlockTask+0x52>
 8007760:	2300      	movs	r3, #0
 8007762:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007764:	4b0f      	ldr	r3, [pc, #60]	@ (80077a4 <prvProcessTimerOrBlockTask+0x94>)
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	4619      	mov	r1, r3
 8007772:	f7fe ff65 	bl	8006640 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007776:	f7ff fa09 	bl	8006b8c <xTaskResumeAll>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10a      	bne.n	8007796 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007780:	4b09      	ldr	r3, [pc, #36]	@ (80077a8 <prvProcessTimerOrBlockTask+0x98>)
 8007782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	f3bf 8f6f 	isb	sy
}
 8007790:	e001      	b.n	8007796 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007792:	f7ff f9fb 	bl	8006b8c <xTaskResumeAll>
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	200021d0 	.word	0x200021d0
 80077a4:	200021d4 	.word	0x200021d4
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80077b4:	4b0e      	ldr	r3, [pc, #56]	@ (80077f0 <prvGetNextExpireTime+0x44>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <prvGetNextExpireTime+0x16>
 80077be:	2201      	movs	r2, #1
 80077c0:	e000      	b.n	80077c4 <prvGetNextExpireTime+0x18>
 80077c2:	2200      	movs	r2, #0
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d105      	bne.n	80077dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077d0:	4b07      	ldr	r3, [pc, #28]	@ (80077f0 <prvGetNextExpireTime+0x44>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	e001      	b.n	80077e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80077e0:	68fb      	ldr	r3, [r7, #12]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	200021cc 	.word	0x200021cc

080077f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077fc:	f7ff fa64 	bl	8006cc8 <xTaskGetTickCount>
 8007800:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007802:	4b0b      	ldr	r3, [pc, #44]	@ (8007830 <prvSampleTimeNow+0x3c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	429a      	cmp	r2, r3
 800780a:	d205      	bcs.n	8007818 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800780c:	f000 f93a 	bl	8007a84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	e002      	b.n	800781e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800781e:	4a04      	ldr	r2, [pc, #16]	@ (8007830 <prvSampleTimeNow+0x3c>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007824:	68fb      	ldr	r3, [r7, #12]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	200021dc 	.word	0x200021dc

08007834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	429a      	cmp	r2, r3
 8007858:	d812      	bhi.n	8007880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	1ad2      	subs	r2, r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	429a      	cmp	r2, r3
 8007866:	d302      	bcc.n	800786e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e01b      	b.n	80078a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800786e:	4b10      	ldr	r3, [pc, #64]	@ (80078b0 <prvInsertTimerInActiveList+0x7c>)
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f7fe f9b8 	bl	8005bee <vListInsert>
 800787e:	e012      	b.n	80078a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d206      	bcs.n	8007896 <prvInsertTimerInActiveList+0x62>
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	429a      	cmp	r2, r3
 800788e:	d302      	bcc.n	8007896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007890:	2301      	movs	r3, #1
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	e007      	b.n	80078a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007896:	4b07      	ldr	r3, [pc, #28]	@ (80078b4 <prvInsertTimerInActiveList+0x80>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	4610      	mov	r0, r2
 80078a2:	f7fe f9a4 	bl	8005bee <vListInsert>
		}
	}

	return xProcessTimerNow;
 80078a6:	697b      	ldr	r3, [r7, #20]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	200021d0 	.word	0x200021d0
 80078b4:	200021cc 	.word	0x200021cc

080078b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08e      	sub	sp, #56	@ 0x38
 80078bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078be:	e0ce      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	da19      	bge.n	80078fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80078c6:	1d3b      	adds	r3, r7, #4
 80078c8:	3304      	adds	r3, #4
 80078ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80078cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10b      	bne.n	80078ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	61fb      	str	r3, [r7, #28]
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80078ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078f0:	6850      	ldr	r0, [r2, #4]
 80078f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078f4:	6892      	ldr	r2, [r2, #8]
 80078f6:	4611      	mov	r1, r2
 80078f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f2c0 80ae 	blt.w	8007a5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d004      	beq.n	8007918 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800790e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007910:	3304      	adds	r3, #4
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe f9a4 	bl	8005c60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007918:	463b      	mov	r3, r7
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff ff6a 	bl	80077f4 <prvSampleTimeNow>
 8007920:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b09      	cmp	r3, #9
 8007926:	f200 8097 	bhi.w	8007a58 <prvProcessReceivedCommands+0x1a0>
 800792a:	a201      	add	r2, pc, #4	@ (adr r2, 8007930 <prvProcessReceivedCommands+0x78>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007959 	.word	0x08007959
 8007934:	08007959 	.word	0x08007959
 8007938:	08007959 	.word	0x08007959
 800793c:	080079cf 	.word	0x080079cf
 8007940:	080079e3 	.word	0x080079e3
 8007944:	08007a2f 	.word	0x08007a2f
 8007948:	08007959 	.word	0x08007959
 800794c:	08007959 	.word	0x08007959
 8007950:	080079cf 	.word	0x080079cf
 8007954:	080079e3 	.word	0x080079e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	b2da      	uxtb	r2, r3
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	18d1      	adds	r1, r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007978:	f7ff ff5c 	bl	8007834 <prvInsertTimerInActiveList>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d06c      	beq.n	8007a5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007988:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800798a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d061      	beq.n	8007a5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	441a      	add	r2, r3
 80079a0:	2300      	movs	r3, #0
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	2300      	movs	r3, #0
 80079a6:	2100      	movs	r1, #0
 80079a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079aa:	f7ff fe01 	bl	80075b0 <xTimerGenericCommand>
 80079ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d152      	bne.n	8007a5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	61bb      	str	r3, [r7, #24]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079d4:	f023 0301 	bic.w	r3, r3, #1
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80079e0:	e03d      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079e8:	f043 0301 	orr.w	r3, r3, #1
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80079fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	617b      	str	r3, [r7, #20]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1c:	699a      	ldr	r2, [r3, #24]
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	18d1      	adds	r1, r2, r3
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a28:	f7ff ff04 	bl	8007834 <prvInsertTimerInActiveList>
					break;
 8007a2c:	e017      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d103      	bne.n	8007a44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007a3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a3e:	f000 fbeb 	bl	8008218 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a42:	e00c      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a4a:	f023 0301 	bic.w	r3, r3, #1
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007a56:	e002      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007a58:	bf00      	nop
 8007a5a:	e000      	b.n	8007a5e <prvProcessReceivedCommands+0x1a6>
					break;
 8007a5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a5e:	4b08      	ldr	r3, [pc, #32]	@ (8007a80 <prvProcessReceivedCommands+0x1c8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	1d39      	adds	r1, r7, #4
 8007a64:	2200      	movs	r2, #0
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fbce 	bl	8006208 <xQueueReceive>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f47f af26 	bne.w	80078c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	3730      	adds	r7, #48	@ 0x30
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	200021d4 	.word	0x200021d4

08007a84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a8a:	e049      	b.n	8007b20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a96:	4b2c      	ldr	r3, [pc, #176]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fe f8db 	bl	8005c60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d02f      	beq.n	8007b20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d90e      	bls.n	8007af0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ade:	4b1a      	ldr	r3, [pc, #104]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f7fe f880 	bl	8005bee <vListInsert>
 8007aee:	e017      	b.n	8007b20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007af0:	2300      	movs	r3, #0
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	2100      	movs	r1, #0
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff fd58 	bl	80075b0 <xTimerGenericCommand>
 8007b00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	603b      	str	r3, [r7, #0]
}
 8007b1a:	bf00      	nop
 8007b1c:	bf00      	nop
 8007b1e:	e7fd      	b.n	8007b1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b20:	4b09      	ldr	r3, [pc, #36]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1b0      	bne.n	8007a8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b2a:	4b07      	ldr	r3, [pc, #28]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b30:	4b06      	ldr	r3, [pc, #24]	@ (8007b4c <prvSwitchTimerLists+0xc8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a04      	ldr	r2, [pc, #16]	@ (8007b48 <prvSwitchTimerLists+0xc4>)
 8007b36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b38:	4a04      	ldr	r2, [pc, #16]	@ (8007b4c <prvSwitchTimerLists+0xc8>)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	6013      	str	r3, [r2, #0]
}
 8007b3e:	bf00      	nop
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	200021cc 	.word	0x200021cc
 8007b4c:	200021d0 	.word	0x200021d0

08007b50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b56:	f000 f96f 	bl	8007e38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b5a:	4b15      	ldr	r3, [pc, #84]	@ (8007bb0 <prvCheckForValidListAndQueue+0x60>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d120      	bne.n	8007ba4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b62:	4814      	ldr	r0, [pc, #80]	@ (8007bb4 <prvCheckForValidListAndQueue+0x64>)
 8007b64:	f7fd fff2 	bl	8005b4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b68:	4813      	ldr	r0, [pc, #76]	@ (8007bb8 <prvCheckForValidListAndQueue+0x68>)
 8007b6a:	f7fd ffef 	bl	8005b4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b6e:	4b13      	ldr	r3, [pc, #76]	@ (8007bbc <prvCheckForValidListAndQueue+0x6c>)
 8007b70:	4a10      	ldr	r2, [pc, #64]	@ (8007bb4 <prvCheckForValidListAndQueue+0x64>)
 8007b72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b74:	4b12      	ldr	r3, [pc, #72]	@ (8007bc0 <prvCheckForValidListAndQueue+0x70>)
 8007b76:	4a10      	ldr	r2, [pc, #64]	@ (8007bb8 <prvCheckForValidListAndQueue+0x68>)
 8007b78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	4b11      	ldr	r3, [pc, #68]	@ (8007bc4 <prvCheckForValidListAndQueue+0x74>)
 8007b80:	4a11      	ldr	r2, [pc, #68]	@ (8007bc8 <prvCheckForValidListAndQueue+0x78>)
 8007b82:	2110      	movs	r1, #16
 8007b84:	200a      	movs	r0, #10
 8007b86:	f7fe f8ff 	bl	8005d88 <xQueueGenericCreateStatic>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4a08      	ldr	r2, [pc, #32]	@ (8007bb0 <prvCheckForValidListAndQueue+0x60>)
 8007b8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b90:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <prvCheckForValidListAndQueue+0x60>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b98:	4b05      	ldr	r3, [pc, #20]	@ (8007bb0 <prvCheckForValidListAndQueue+0x60>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	490b      	ldr	r1, [pc, #44]	@ (8007bcc <prvCheckForValidListAndQueue+0x7c>)
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fd24 	bl	80065ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ba4:	f000 f97a 	bl	8007e9c <vPortExitCritical>
}
 8007ba8:	bf00      	nop
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	200021d4 	.word	0x200021d4
 8007bb4:	200021a4 	.word	0x200021a4
 8007bb8:	200021b8 	.word	0x200021b8
 8007bbc:	200021cc 	.word	0x200021cc
 8007bc0:	200021d0 	.word	0x200021d0
 8007bc4:	20002280 	.word	0x20002280
 8007bc8:	200021e0 	.word	0x200021e0
 8007bcc:	0800b5cc 	.word	0x0800b5cc

08007bd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3b04      	subs	r3, #4
 8007be0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3b04      	subs	r3, #4
 8007bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f023 0201 	bic.w	r2, r3, #1
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3b04      	subs	r3, #4
 8007bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c00:	4a0c      	ldr	r2, [pc, #48]	@ (8007c34 <pxPortInitialiseStack+0x64>)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3b14      	subs	r3, #20
 8007c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3b04      	subs	r3, #4
 8007c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f06f 0202 	mvn.w	r2, #2
 8007c1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3b20      	subs	r3, #32
 8007c24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c26:	68fb      	ldr	r3, [r7, #12]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	08007c39 	.word	0x08007c39

08007c38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c42:	4b13      	ldr	r3, [pc, #76]	@ (8007c90 <prvTaskExitError+0x58>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d00b      	beq.n	8007c64 <prvTaskExitError+0x2c>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	60fb      	str	r3, [r7, #12]
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	e7fd      	b.n	8007c60 <prvTaskExitError+0x28>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	60bb      	str	r3, [r7, #8]
}
 8007c76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c78:	bf00      	nop
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0fc      	beq.n	8007c7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20000040 	.word	0x20000040
	...

08007ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ca0:	4b07      	ldr	r3, [pc, #28]	@ (8007cc0 <pxCurrentTCBConst2>)
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	6808      	ldr	r0, [r1, #0]
 8007ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007caa:	f380 8809 	msr	PSP, r0
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f04f 0000 	mov.w	r0, #0
 8007cb6:	f380 8811 	msr	BASEPRI, r0
 8007cba:	4770      	bx	lr
 8007cbc:	f3af 8000 	nop.w

08007cc0 <pxCurrentTCBConst2>:
 8007cc0:	20001ca4 	.word	0x20001ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop

08007cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007cc8:	4808      	ldr	r0, [pc, #32]	@ (8007cec <prvPortStartFirstTask+0x24>)
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	6800      	ldr	r0, [r0, #0]
 8007cce:	f380 8808 	msr	MSP, r0
 8007cd2:	f04f 0000 	mov.w	r0, #0
 8007cd6:	f380 8814 	msr	CONTROL, r0
 8007cda:	b662      	cpsie	i
 8007cdc:	b661      	cpsie	f
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	df00      	svc	0
 8007ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cea:	bf00      	nop
 8007cec:	e000ed08 	.word	0xe000ed08

08007cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cf6:	4b47      	ldr	r3, [pc, #284]	@ (8007e14 <xPortStartScheduler+0x124>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a47      	ldr	r2, [pc, #284]	@ (8007e18 <xPortStartScheduler+0x128>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d10b      	bne.n	8007d18 <xPortStartScheduler+0x28>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	613b      	str	r3, [r7, #16]
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	e7fd      	b.n	8007d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d18:	4b3e      	ldr	r3, [pc, #248]	@ (8007e14 <xPortStartScheduler+0x124>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a3f      	ldr	r2, [pc, #252]	@ (8007e1c <xPortStartScheduler+0x12c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d10b      	bne.n	8007d3a <xPortStartScheduler+0x4a>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60fb      	str	r3, [r7, #12]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d3a:	4b39      	ldr	r3, [pc, #228]	@ (8007e20 <xPortStartScheduler+0x130>)
 8007d3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	22ff      	movs	r2, #255	@ 0xff
 8007d4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	4b31      	ldr	r3, [pc, #196]	@ (8007e24 <xPortStartScheduler+0x134>)
 8007d60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d62:	4b31      	ldr	r3, [pc, #196]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007d64:	2207      	movs	r2, #7
 8007d66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d68:	e009      	b.n	8007d7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	4a2d      	ldr	r2, [pc, #180]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007d72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d86:	2b80      	cmp	r3, #128	@ 0x80
 8007d88:	d0ef      	beq.n	8007d6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d8a:	4b27      	ldr	r3, [pc, #156]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f1c3 0307 	rsb	r3, r3, #7
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d00b      	beq.n	8007dae <xPortStartScheduler+0xbe>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	60bb      	str	r3, [r7, #8]
}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop
 8007dac:	e7fd      	b.n	8007daa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007dae:	4b1e      	ldr	r3, [pc, #120]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007db6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007db8:	4b1b      	ldr	r3, [pc, #108]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007dc0:	4a19      	ldr	r2, [pc, #100]	@ (8007e28 <xPortStartScheduler+0x138>)
 8007dc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007dcc:	4b17      	ldr	r3, [pc, #92]	@ (8007e2c <xPortStartScheduler+0x13c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a16      	ldr	r2, [pc, #88]	@ (8007e2c <xPortStartScheduler+0x13c>)
 8007dd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007dd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007dd8:	4b14      	ldr	r3, [pc, #80]	@ (8007e2c <xPortStartScheduler+0x13c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a13      	ldr	r2, [pc, #76]	@ (8007e2c <xPortStartScheduler+0x13c>)
 8007dde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007de2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007de4:	f000 f8da 	bl	8007f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007de8:	4b11      	ldr	r3, [pc, #68]	@ (8007e30 <xPortStartScheduler+0x140>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007dee:	f000 f8f9 	bl	8007fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007df2:	4b10      	ldr	r3, [pc, #64]	@ (8007e34 <xPortStartScheduler+0x144>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a0f      	ldr	r2, [pc, #60]	@ (8007e34 <xPortStartScheduler+0x144>)
 8007df8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007dfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007dfe:	f7ff ff63 	bl	8007cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e02:	f7ff f82b 	bl	8006e5c <vTaskSwitchContext>
	prvTaskExitError();
 8007e06:	f7ff ff17 	bl	8007c38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	e000ed00 	.word	0xe000ed00
 8007e18:	410fc271 	.word	0x410fc271
 8007e1c:	410fc270 	.word	0x410fc270
 8007e20:	e000e400 	.word	0xe000e400
 8007e24:	200022d0 	.word	0x200022d0
 8007e28:	200022d4 	.word	0x200022d4
 8007e2c:	e000ed20 	.word	0xe000ed20
 8007e30:	20000040 	.word	0x20000040
 8007e34:	e000ef34 	.word	0xe000ef34

08007e38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	607b      	str	r3, [r7, #4]
}
 8007e50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e52:	4b10      	ldr	r3, [pc, #64]	@ (8007e94 <vPortEnterCritical+0x5c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3301      	adds	r3, #1
 8007e58:	4a0e      	ldr	r2, [pc, #56]	@ (8007e94 <vPortEnterCritical+0x5c>)
 8007e5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e94 <vPortEnterCritical+0x5c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d110      	bne.n	8007e86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e64:	4b0c      	ldr	r3, [pc, #48]	@ (8007e98 <vPortEnterCritical+0x60>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00b      	beq.n	8007e86 <vPortEnterCritical+0x4e>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	603b      	str	r3, [r7, #0]
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <vPortEnterCritical+0x4a>
	}
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20000040 	.word	0x20000040
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ea2:	4b12      	ldr	r3, [pc, #72]	@ (8007eec <vPortExitCritical+0x50>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10b      	bne.n	8007ec2 <vPortExitCritical+0x26>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	607b      	str	r3, [r7, #4]
}
 8007ebc:	bf00      	nop
 8007ebe:	bf00      	nop
 8007ec0:	e7fd      	b.n	8007ebe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8007eec <vPortExitCritical+0x50>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	4a08      	ldr	r2, [pc, #32]	@ (8007eec <vPortExitCritical+0x50>)
 8007eca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ecc:	4b07      	ldr	r3, [pc, #28]	@ (8007eec <vPortExitCritical+0x50>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d105      	bne.n	8007ee0 <vPortExitCritical+0x44>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f383 8811 	msr	BASEPRI, r3
}
 8007ede:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	20000040 	.word	0x20000040

08007ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ef0:	f3ef 8009 	mrs	r0, PSP
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	4b15      	ldr	r3, [pc, #84]	@ (8007f50 <pxCurrentTCBConst>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	f01e 0f10 	tst.w	lr, #16
 8007f00:	bf08      	it	eq
 8007f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0a:	6010      	str	r0, [r2, #0]
 8007f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007f14:	f380 8811 	msr	BASEPRI, r0
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f7fe ff9c 	bl	8006e5c <vTaskSwitchContext>
 8007f24:	f04f 0000 	mov.w	r0, #0
 8007f28:	f380 8811 	msr	BASEPRI, r0
 8007f2c:	bc09      	pop	{r0, r3}
 8007f2e:	6819      	ldr	r1, [r3, #0]
 8007f30:	6808      	ldr	r0, [r1, #0]
 8007f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f36:	f01e 0f10 	tst.w	lr, #16
 8007f3a:	bf08      	it	eq
 8007f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f40:	f380 8809 	msr	PSP, r0
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	f3af 8000 	nop.w

08007f50 <pxCurrentTCBConst>:
 8007f50:	20001ca4 	.word	0x20001ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	607b      	str	r3, [r7, #4]
}
 8007f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f72:	f7fe feb9 	bl	8006ce8 <xTaskIncrementTick>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f7c:	4b06      	ldr	r3, [pc, #24]	@ (8007f98 <xPortSysTickHandler+0x40>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	2300      	movs	r3, #0
 8007f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f383 8811 	msr	BASEPRI, r3
}
 8007f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	e000ed04 	.word	0xe000ed04

08007f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd0 <vPortSetupTimerInterrupt+0x34>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd4 <vPortSetupTimerInterrupt+0x38>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd8 <vPortSetupTimerInterrupt+0x3c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8007fdc <vPortSetupTimerInterrupt+0x40>)
 8007fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb6:	099b      	lsrs	r3, r3, #6
 8007fb8:	4a09      	ldr	r2, [pc, #36]	@ (8007fe0 <vPortSetupTimerInterrupt+0x44>)
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fbe:	4b04      	ldr	r3, [pc, #16]	@ (8007fd0 <vPortSetupTimerInterrupt+0x34>)
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	601a      	str	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	e000e010 	.word	0xe000e010
 8007fd4:	e000e018 	.word	0xe000e018
 8007fd8:	20000034 	.word	0x20000034
 8007fdc:	10624dd3 	.word	0x10624dd3
 8007fe0:	e000e014 	.word	0xe000e014

08007fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ff4 <vPortEnableVFP+0x10>
 8007fe8:	6801      	ldr	r1, [r0, #0]
 8007fea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007fee:	6001      	str	r1, [r0, #0]
 8007ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ff2:	bf00      	nop
 8007ff4:	e000ed88 	.word	0xe000ed88

08007ff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ffe:	f3ef 8305 	mrs	r3, IPSR
 8008002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b0f      	cmp	r3, #15
 8008008:	d915      	bls.n	8008036 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800800a:	4a18      	ldr	r2, [pc, #96]	@ (800806c <vPortValidateInterruptPriority+0x74>)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008014:	4b16      	ldr	r3, [pc, #88]	@ (8008070 <vPortValidateInterruptPriority+0x78>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	7afa      	ldrb	r2, [r7, #11]
 800801a:	429a      	cmp	r2, r3
 800801c:	d20b      	bcs.n	8008036 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	607b      	str	r3, [r7, #4]
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	e7fd      	b.n	8008032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008036:	4b0f      	ldr	r3, [pc, #60]	@ (8008074 <vPortValidateInterruptPriority+0x7c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800803e:	4b0e      	ldr	r3, [pc, #56]	@ (8008078 <vPortValidateInterruptPriority+0x80>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d90b      	bls.n	800805e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	603b      	str	r3, [r7, #0]
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	e7fd      	b.n	800805a <vPortValidateInterruptPriority+0x62>
	}
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	e000e3f0 	.word	0xe000e3f0
 8008070:	200022d0 	.word	0x200022d0
 8008074:	e000ed0c 	.word	0xe000ed0c
 8008078:	200022d4 	.word	0x200022d4

0800807c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	@ 0x28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008084:	2300      	movs	r3, #0
 8008086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008088:	f7fe fd72 	bl	8006b70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800808c:	4b5c      	ldr	r3, [pc, #368]	@ (8008200 <pvPortMalloc+0x184>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008094:	f000 f924 	bl	80082e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008098:	4b5a      	ldr	r3, [pc, #360]	@ (8008204 <pvPortMalloc+0x188>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4013      	ands	r3, r2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f040 8095 	bne.w	80081d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01e      	beq.n	80080ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80080ac:	2208      	movs	r2, #8
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f003 0307 	and.w	r3, r3, #7
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d015      	beq.n	80080ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f023 0307 	bic.w	r3, r3, #7
 80080c4:	3308      	adds	r3, #8
 80080c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00b      	beq.n	80080ea <pvPortMalloc+0x6e>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	617b      	str	r3, [r7, #20]
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d06f      	beq.n	80081d0 <pvPortMalloc+0x154>
 80080f0:	4b45      	ldr	r3, [pc, #276]	@ (8008208 <pvPortMalloc+0x18c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d86a      	bhi.n	80081d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080fa:	4b44      	ldr	r3, [pc, #272]	@ (800820c <pvPortMalloc+0x190>)
 80080fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080fe:	4b43      	ldr	r3, [pc, #268]	@ (800820c <pvPortMalloc+0x190>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008104:	e004      	b.n	8008110 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008108:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	429a      	cmp	r2, r3
 8008118:	d903      	bls.n	8008122 <pvPortMalloc+0xa6>
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f1      	bne.n	8008106 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008122:	4b37      	ldr	r3, [pc, #220]	@ (8008200 <pvPortMalloc+0x184>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008128:	429a      	cmp	r2, r3
 800812a:	d051      	beq.n	80081d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2208      	movs	r2, #8
 8008132:	4413      	add	r3, r2
 8008134:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800813e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	1ad2      	subs	r2, r2, r3
 8008146:	2308      	movs	r3, #8
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	429a      	cmp	r2, r3
 800814c:	d920      	bls.n	8008190 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800814e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4413      	add	r3, r2
 8008154:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <pvPortMalloc+0xfc>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	613b      	str	r3, [r7, #16]
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	e7fd      	b.n	8008174 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800818a:	69b8      	ldr	r0, [r7, #24]
 800818c:	f000 f90a 	bl	80083a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008190:	4b1d      	ldr	r3, [pc, #116]	@ (8008208 <pvPortMalloc+0x18c>)
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	4a1b      	ldr	r2, [pc, #108]	@ (8008208 <pvPortMalloc+0x18c>)
 800819c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800819e:	4b1a      	ldr	r3, [pc, #104]	@ (8008208 <pvPortMalloc+0x18c>)
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008210 <pvPortMalloc+0x194>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d203      	bcs.n	80081b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081aa:	4b17      	ldr	r3, [pc, #92]	@ (8008208 <pvPortMalloc+0x18c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a18      	ldr	r2, [pc, #96]	@ (8008210 <pvPortMalloc+0x194>)
 80081b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	4b13      	ldr	r3, [pc, #76]	@ (8008204 <pvPortMalloc+0x188>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	431a      	orrs	r2, r3
 80081bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80081c6:	4b13      	ldr	r3, [pc, #76]	@ (8008214 <pvPortMalloc+0x198>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3301      	adds	r3, #1
 80081cc:	4a11      	ldr	r2, [pc, #68]	@ (8008214 <pvPortMalloc+0x198>)
 80081ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081d0:	f7fe fcdc 	bl	8006b8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <pvPortMalloc+0x17a>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	60fb      	str	r3, [r7, #12]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <pvPortMalloc+0x176>
	return pvReturn;
 80081f6:	69fb      	ldr	r3, [r7, #28]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3728      	adds	r7, #40	@ 0x28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20009810 	.word	0x20009810
 8008204:	20009824 	.word	0x20009824
 8008208:	20009814 	.word	0x20009814
 800820c:	20009808 	.word	0x20009808
 8008210:	20009818 	.word	0x20009818
 8008214:	2000981c 	.word	0x2000981c

08008218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d04f      	beq.n	80082ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800822a:	2308      	movs	r3, #8
 800822c:	425b      	negs	r3, r3
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	4413      	add	r3, r2
 8008232:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	4b25      	ldr	r3, [pc, #148]	@ (80082d4 <vPortFree+0xbc>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4013      	ands	r3, r2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <vPortFree+0x46>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	60fb      	str	r3, [r7, #12]
}
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	e7fd      	b.n	800825a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <vPortFree+0x66>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	60bb      	str	r3, [r7, #8]
}
 8008278:	bf00      	nop
 800827a:	bf00      	nop
 800827c:	e7fd      	b.n	800827a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	4b14      	ldr	r3, [pc, #80]	@ (80082d4 <vPortFree+0xbc>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4013      	ands	r3, r2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01e      	beq.n	80082ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d11a      	bne.n	80082ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	4b0e      	ldr	r3, [pc, #56]	@ (80082d4 <vPortFree+0xbc>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	43db      	mvns	r3, r3
 800829e:	401a      	ands	r2, r3
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082a4:	f7fe fc64 	bl	8006b70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	4b0a      	ldr	r3, [pc, #40]	@ (80082d8 <vPortFree+0xc0>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4413      	add	r3, r2
 80082b2:	4a09      	ldr	r2, [pc, #36]	@ (80082d8 <vPortFree+0xc0>)
 80082b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082b6:	6938      	ldr	r0, [r7, #16]
 80082b8:	f000 f874 	bl	80083a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80082bc:	4b07      	ldr	r3, [pc, #28]	@ (80082dc <vPortFree+0xc4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3301      	adds	r3, #1
 80082c2:	4a06      	ldr	r2, [pc, #24]	@ (80082dc <vPortFree+0xc4>)
 80082c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80082c6:	f7fe fc61 	bl	8006b8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082ca:	bf00      	nop
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20009824 	.word	0x20009824
 80082d8:	20009814 	.word	0x20009814
 80082dc:	20009820 	.word	0x20009820

080082e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082e6:	f247 5330 	movw	r3, #30000	@ 0x7530
 80082ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082ec:	4b27      	ldr	r3, [pc, #156]	@ (800838c <prvHeapInit+0xac>)
 80082ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f003 0307 	and.w	r3, r3, #7
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00c      	beq.n	8008314 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3307      	adds	r3, #7
 80082fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0307 	bic.w	r3, r3, #7
 8008306:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	4a1f      	ldr	r2, [pc, #124]	@ (800838c <prvHeapInit+0xac>)
 8008310:	4413      	add	r3, r2
 8008312:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008318:	4a1d      	ldr	r2, [pc, #116]	@ (8008390 <prvHeapInit+0xb0>)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800831e:	4b1c      	ldr	r3, [pc, #112]	@ (8008390 <prvHeapInit+0xb0>)
 8008320:	2200      	movs	r2, #0
 8008322:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	4413      	add	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800832c:	2208      	movs	r2, #8
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0307 	bic.w	r3, r3, #7
 800833a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4a15      	ldr	r2, [pc, #84]	@ (8008394 <prvHeapInit+0xb4>)
 8008340:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008342:	4b14      	ldr	r3, [pc, #80]	@ (8008394 <prvHeapInit+0xb4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2200      	movs	r2, #0
 8008348:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800834a:	4b12      	ldr	r3, [pc, #72]	@ (8008394 <prvHeapInit+0xb4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2200      	movs	r2, #0
 8008350:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	1ad2      	subs	r2, r2, r3
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008360:	4b0c      	ldr	r3, [pc, #48]	@ (8008394 <prvHeapInit+0xb4>)
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	4a0a      	ldr	r2, [pc, #40]	@ (8008398 <prvHeapInit+0xb8>)
 800836e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	4a09      	ldr	r2, [pc, #36]	@ (800839c <prvHeapInit+0xbc>)
 8008376:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008378:	4b09      	ldr	r3, [pc, #36]	@ (80083a0 <prvHeapInit+0xc0>)
 800837a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800837e:	601a      	str	r2, [r3, #0]
}
 8008380:	bf00      	nop
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	200022d8 	.word	0x200022d8
 8008390:	20009808 	.word	0x20009808
 8008394:	20009810 	.word	0x20009810
 8008398:	20009818 	.word	0x20009818
 800839c:	20009814 	.word	0x20009814
 80083a0:	20009824 	.word	0x20009824

080083a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083ac:	4b28      	ldr	r3, [pc, #160]	@ (8008450 <prvInsertBlockIntoFreeList+0xac>)
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	e002      	b.n	80083b8 <prvInsertBlockIntoFreeList+0x14>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d8f7      	bhi.n	80083b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	4413      	add	r3, r2
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d108      	bne.n	80083e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	441a      	add	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	441a      	add	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d118      	bne.n	800842c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4b15      	ldr	r3, [pc, #84]	@ (8008454 <prvInsertBlockIntoFreeList+0xb0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d00d      	beq.n	8008422 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	441a      	add	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	e008      	b.n	8008434 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008422:	4b0c      	ldr	r3, [pc, #48]	@ (8008454 <prvInsertBlockIntoFreeList+0xb0>)
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	e003      	b.n	8008434 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	429a      	cmp	r2, r3
 800843a:	d002      	beq.n	8008442 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20009808 	.word	0x20009808
 8008454:	20009810 	.word	0x20009810

08008458 <atoi>:
 8008458:	220a      	movs	r2, #10
 800845a:	2100      	movs	r1, #0
 800845c:	f000 b87a 	b.w	8008554 <strtol>

08008460 <_strtol_l.constprop.0>:
 8008460:	2b24      	cmp	r3, #36	@ 0x24
 8008462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008466:	4686      	mov	lr, r0
 8008468:	4690      	mov	r8, r2
 800846a:	d801      	bhi.n	8008470 <_strtol_l.constprop.0+0x10>
 800846c:	2b01      	cmp	r3, #1
 800846e:	d106      	bne.n	800847e <_strtol_l.constprop.0+0x1e>
 8008470:	f000 ff66 	bl	8009340 <__errno>
 8008474:	2316      	movs	r3, #22
 8008476:	6003      	str	r3, [r0, #0]
 8008478:	2000      	movs	r0, #0
 800847a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847e:	4834      	ldr	r0, [pc, #208]	@ (8008550 <_strtol_l.constprop.0+0xf0>)
 8008480:	460d      	mov	r5, r1
 8008482:	462a      	mov	r2, r5
 8008484:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008488:	5d06      	ldrb	r6, [r0, r4]
 800848a:	f016 0608 	ands.w	r6, r6, #8
 800848e:	d1f8      	bne.n	8008482 <_strtol_l.constprop.0+0x22>
 8008490:	2c2d      	cmp	r4, #45	@ 0x2d
 8008492:	d12d      	bne.n	80084f0 <_strtol_l.constprop.0+0x90>
 8008494:	782c      	ldrb	r4, [r5, #0]
 8008496:	2601      	movs	r6, #1
 8008498:	1c95      	adds	r5, r2, #2
 800849a:	f033 0210 	bics.w	r2, r3, #16
 800849e:	d109      	bne.n	80084b4 <_strtol_l.constprop.0+0x54>
 80084a0:	2c30      	cmp	r4, #48	@ 0x30
 80084a2:	d12a      	bne.n	80084fa <_strtol_l.constprop.0+0x9a>
 80084a4:	782a      	ldrb	r2, [r5, #0]
 80084a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80084aa:	2a58      	cmp	r2, #88	@ 0x58
 80084ac:	d125      	bne.n	80084fa <_strtol_l.constprop.0+0x9a>
 80084ae:	786c      	ldrb	r4, [r5, #1]
 80084b0:	2310      	movs	r3, #16
 80084b2:	3502      	adds	r5, #2
 80084b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80084b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084bc:	2200      	movs	r2, #0
 80084be:	fbbc f9f3 	udiv	r9, ip, r3
 80084c2:	4610      	mov	r0, r2
 80084c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80084c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80084cc:	2f09      	cmp	r7, #9
 80084ce:	d81b      	bhi.n	8008508 <_strtol_l.constprop.0+0xa8>
 80084d0:	463c      	mov	r4, r7
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	dd27      	ble.n	8008526 <_strtol_l.constprop.0+0xc6>
 80084d6:	1c57      	adds	r7, r2, #1
 80084d8:	d007      	beq.n	80084ea <_strtol_l.constprop.0+0x8a>
 80084da:	4581      	cmp	r9, r0
 80084dc:	d320      	bcc.n	8008520 <_strtol_l.constprop.0+0xc0>
 80084de:	d101      	bne.n	80084e4 <_strtol_l.constprop.0+0x84>
 80084e0:	45a2      	cmp	sl, r4
 80084e2:	db1d      	blt.n	8008520 <_strtol_l.constprop.0+0xc0>
 80084e4:	fb00 4003 	mla	r0, r0, r3, r4
 80084e8:	2201      	movs	r2, #1
 80084ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084ee:	e7eb      	b.n	80084c8 <_strtol_l.constprop.0+0x68>
 80084f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80084f2:	bf04      	itt	eq
 80084f4:	782c      	ldrbeq	r4, [r5, #0]
 80084f6:	1c95      	addeq	r5, r2, #2
 80084f8:	e7cf      	b.n	800849a <_strtol_l.constprop.0+0x3a>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1da      	bne.n	80084b4 <_strtol_l.constprop.0+0x54>
 80084fe:	2c30      	cmp	r4, #48	@ 0x30
 8008500:	bf0c      	ite	eq
 8008502:	2308      	moveq	r3, #8
 8008504:	230a      	movne	r3, #10
 8008506:	e7d5      	b.n	80084b4 <_strtol_l.constprop.0+0x54>
 8008508:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800850c:	2f19      	cmp	r7, #25
 800850e:	d801      	bhi.n	8008514 <_strtol_l.constprop.0+0xb4>
 8008510:	3c37      	subs	r4, #55	@ 0x37
 8008512:	e7de      	b.n	80084d2 <_strtol_l.constprop.0+0x72>
 8008514:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008518:	2f19      	cmp	r7, #25
 800851a:	d804      	bhi.n	8008526 <_strtol_l.constprop.0+0xc6>
 800851c:	3c57      	subs	r4, #87	@ 0x57
 800851e:	e7d8      	b.n	80084d2 <_strtol_l.constprop.0+0x72>
 8008520:	f04f 32ff 	mov.w	r2, #4294967295
 8008524:	e7e1      	b.n	80084ea <_strtol_l.constprop.0+0x8a>
 8008526:	1c53      	adds	r3, r2, #1
 8008528:	d108      	bne.n	800853c <_strtol_l.constprop.0+0xdc>
 800852a:	2322      	movs	r3, #34	@ 0x22
 800852c:	f8ce 3000 	str.w	r3, [lr]
 8008530:	4660      	mov	r0, ip
 8008532:	f1b8 0f00 	cmp.w	r8, #0
 8008536:	d0a0      	beq.n	800847a <_strtol_l.constprop.0+0x1a>
 8008538:	1e69      	subs	r1, r5, #1
 800853a:	e006      	b.n	800854a <_strtol_l.constprop.0+0xea>
 800853c:	b106      	cbz	r6, 8008540 <_strtol_l.constprop.0+0xe0>
 800853e:	4240      	negs	r0, r0
 8008540:	f1b8 0f00 	cmp.w	r8, #0
 8008544:	d099      	beq.n	800847a <_strtol_l.constprop.0+0x1a>
 8008546:	2a00      	cmp	r2, #0
 8008548:	d1f6      	bne.n	8008538 <_strtol_l.constprop.0+0xd8>
 800854a:	f8c8 1000 	str.w	r1, [r8]
 800854e:	e794      	b.n	800847a <_strtol_l.constprop.0+0x1a>
 8008550:	0800b695 	.word	0x0800b695

08008554 <strtol>:
 8008554:	4613      	mov	r3, r2
 8008556:	460a      	mov	r2, r1
 8008558:	4601      	mov	r1, r0
 800855a:	4802      	ldr	r0, [pc, #8]	@ (8008564 <strtol+0x10>)
 800855c:	6800      	ldr	r0, [r0, #0]
 800855e:	f7ff bf7f 	b.w	8008460 <_strtol_l.constprop.0>
 8008562:	bf00      	nop
 8008564:	20000050 	.word	0x20000050

08008568 <__cvt>:
 8008568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	ec57 6b10 	vmov	r6, r7, d0
 8008570:	2f00      	cmp	r7, #0
 8008572:	460c      	mov	r4, r1
 8008574:	4619      	mov	r1, r3
 8008576:	463b      	mov	r3, r7
 8008578:	bfbb      	ittet	lt
 800857a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800857e:	461f      	movlt	r7, r3
 8008580:	2300      	movge	r3, #0
 8008582:	232d      	movlt	r3, #45	@ 0x2d
 8008584:	700b      	strb	r3, [r1, #0]
 8008586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008588:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800858c:	4691      	mov	r9, r2
 800858e:	f023 0820 	bic.w	r8, r3, #32
 8008592:	bfbc      	itt	lt
 8008594:	4632      	movlt	r2, r6
 8008596:	4616      	movlt	r6, r2
 8008598:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800859c:	d005      	beq.n	80085aa <__cvt+0x42>
 800859e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80085a2:	d100      	bne.n	80085a6 <__cvt+0x3e>
 80085a4:	3401      	adds	r4, #1
 80085a6:	2102      	movs	r1, #2
 80085a8:	e000      	b.n	80085ac <__cvt+0x44>
 80085aa:	2103      	movs	r1, #3
 80085ac:	ab03      	add	r3, sp, #12
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	ab02      	add	r3, sp, #8
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	ec47 6b10 	vmov	d0, r6, r7
 80085b8:	4653      	mov	r3, sl
 80085ba:	4622      	mov	r2, r4
 80085bc:	f000 ffac 	bl	8009518 <_dtoa_r>
 80085c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80085c4:	4605      	mov	r5, r0
 80085c6:	d119      	bne.n	80085fc <__cvt+0x94>
 80085c8:	f019 0f01 	tst.w	r9, #1
 80085cc:	d00e      	beq.n	80085ec <__cvt+0x84>
 80085ce:	eb00 0904 	add.w	r9, r0, r4
 80085d2:	2200      	movs	r2, #0
 80085d4:	2300      	movs	r3, #0
 80085d6:	4630      	mov	r0, r6
 80085d8:	4639      	mov	r1, r7
 80085da:	f7f8 fa7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80085de:	b108      	cbz	r0, 80085e4 <__cvt+0x7c>
 80085e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80085e4:	2230      	movs	r2, #48	@ 0x30
 80085e6:	9b03      	ldr	r3, [sp, #12]
 80085e8:	454b      	cmp	r3, r9
 80085ea:	d31e      	bcc.n	800862a <__cvt+0xc2>
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085f0:	1b5b      	subs	r3, r3, r5
 80085f2:	4628      	mov	r0, r5
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	b004      	add	sp, #16
 80085f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008600:	eb00 0904 	add.w	r9, r0, r4
 8008604:	d1e5      	bne.n	80085d2 <__cvt+0x6a>
 8008606:	7803      	ldrb	r3, [r0, #0]
 8008608:	2b30      	cmp	r3, #48	@ 0x30
 800860a:	d10a      	bne.n	8008622 <__cvt+0xba>
 800860c:	2200      	movs	r2, #0
 800860e:	2300      	movs	r3, #0
 8008610:	4630      	mov	r0, r6
 8008612:	4639      	mov	r1, r7
 8008614:	f7f8 fa60 	bl	8000ad8 <__aeabi_dcmpeq>
 8008618:	b918      	cbnz	r0, 8008622 <__cvt+0xba>
 800861a:	f1c4 0401 	rsb	r4, r4, #1
 800861e:	f8ca 4000 	str.w	r4, [sl]
 8008622:	f8da 3000 	ldr.w	r3, [sl]
 8008626:	4499      	add	r9, r3
 8008628:	e7d3      	b.n	80085d2 <__cvt+0x6a>
 800862a:	1c59      	adds	r1, r3, #1
 800862c:	9103      	str	r1, [sp, #12]
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	e7d9      	b.n	80085e6 <__cvt+0x7e>

08008632 <__exponent>:
 8008632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008634:	2900      	cmp	r1, #0
 8008636:	bfba      	itte	lt
 8008638:	4249      	neglt	r1, r1
 800863a:	232d      	movlt	r3, #45	@ 0x2d
 800863c:	232b      	movge	r3, #43	@ 0x2b
 800863e:	2909      	cmp	r1, #9
 8008640:	7002      	strb	r2, [r0, #0]
 8008642:	7043      	strb	r3, [r0, #1]
 8008644:	dd29      	ble.n	800869a <__exponent+0x68>
 8008646:	f10d 0307 	add.w	r3, sp, #7
 800864a:	461d      	mov	r5, r3
 800864c:	270a      	movs	r7, #10
 800864e:	461a      	mov	r2, r3
 8008650:	fbb1 f6f7 	udiv	r6, r1, r7
 8008654:	fb07 1416 	mls	r4, r7, r6, r1
 8008658:	3430      	adds	r4, #48	@ 0x30
 800865a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800865e:	460c      	mov	r4, r1
 8008660:	2c63      	cmp	r4, #99	@ 0x63
 8008662:	f103 33ff 	add.w	r3, r3, #4294967295
 8008666:	4631      	mov	r1, r6
 8008668:	dcf1      	bgt.n	800864e <__exponent+0x1c>
 800866a:	3130      	adds	r1, #48	@ 0x30
 800866c:	1e94      	subs	r4, r2, #2
 800866e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008672:	1c41      	adds	r1, r0, #1
 8008674:	4623      	mov	r3, r4
 8008676:	42ab      	cmp	r3, r5
 8008678:	d30a      	bcc.n	8008690 <__exponent+0x5e>
 800867a:	f10d 0309 	add.w	r3, sp, #9
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	42ac      	cmp	r4, r5
 8008682:	bf88      	it	hi
 8008684:	2300      	movhi	r3, #0
 8008686:	3302      	adds	r3, #2
 8008688:	4403      	add	r3, r0
 800868a:	1a18      	subs	r0, r3, r0
 800868c:	b003      	add	sp, #12
 800868e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008690:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008694:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008698:	e7ed      	b.n	8008676 <__exponent+0x44>
 800869a:	2330      	movs	r3, #48	@ 0x30
 800869c:	3130      	adds	r1, #48	@ 0x30
 800869e:	7083      	strb	r3, [r0, #2]
 80086a0:	70c1      	strb	r1, [r0, #3]
 80086a2:	1d03      	adds	r3, r0, #4
 80086a4:	e7f1      	b.n	800868a <__exponent+0x58>
	...

080086a8 <_printf_float>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	b08d      	sub	sp, #52	@ 0x34
 80086ae:	460c      	mov	r4, r1
 80086b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80086b4:	4616      	mov	r6, r2
 80086b6:	461f      	mov	r7, r3
 80086b8:	4605      	mov	r5, r0
 80086ba:	f000 fda1 	bl	8009200 <_localeconv_r>
 80086be:	6803      	ldr	r3, [r0, #0]
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7f7 fddc 	bl	8000280 <strlen>
 80086c8:	2300      	movs	r3, #0
 80086ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80086cc:	f8d8 3000 	ldr.w	r3, [r8]
 80086d0:	9005      	str	r0, [sp, #20]
 80086d2:	3307      	adds	r3, #7
 80086d4:	f023 0307 	bic.w	r3, r3, #7
 80086d8:	f103 0208 	add.w	r2, r3, #8
 80086dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80086e0:	f8d4 b000 	ldr.w	fp, [r4]
 80086e4:	f8c8 2000 	str.w	r2, [r8]
 80086e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80086f0:	9307      	str	r3, [sp, #28]
 80086f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80086f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80086fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086fe:	4b9c      	ldr	r3, [pc, #624]	@ (8008970 <_printf_float+0x2c8>)
 8008700:	f04f 32ff 	mov.w	r2, #4294967295
 8008704:	f7f8 fa1a 	bl	8000b3c <__aeabi_dcmpun>
 8008708:	bb70      	cbnz	r0, 8008768 <_printf_float+0xc0>
 800870a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800870e:	4b98      	ldr	r3, [pc, #608]	@ (8008970 <_printf_float+0x2c8>)
 8008710:	f04f 32ff 	mov.w	r2, #4294967295
 8008714:	f7f8 f9f4 	bl	8000b00 <__aeabi_dcmple>
 8008718:	bb30      	cbnz	r0, 8008768 <_printf_float+0xc0>
 800871a:	2200      	movs	r2, #0
 800871c:	2300      	movs	r3, #0
 800871e:	4640      	mov	r0, r8
 8008720:	4649      	mov	r1, r9
 8008722:	f7f8 f9e3 	bl	8000aec <__aeabi_dcmplt>
 8008726:	b110      	cbz	r0, 800872e <_printf_float+0x86>
 8008728:	232d      	movs	r3, #45	@ 0x2d
 800872a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800872e:	4a91      	ldr	r2, [pc, #580]	@ (8008974 <_printf_float+0x2cc>)
 8008730:	4b91      	ldr	r3, [pc, #580]	@ (8008978 <_printf_float+0x2d0>)
 8008732:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008736:	bf94      	ite	ls
 8008738:	4690      	movls	r8, r2
 800873a:	4698      	movhi	r8, r3
 800873c:	2303      	movs	r3, #3
 800873e:	6123      	str	r3, [r4, #16]
 8008740:	f02b 0304 	bic.w	r3, fp, #4
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	f04f 0900 	mov.w	r9, #0
 800874a:	9700      	str	r7, [sp, #0]
 800874c:	4633      	mov	r3, r6
 800874e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008750:	4621      	mov	r1, r4
 8008752:	4628      	mov	r0, r5
 8008754:	f000 f9d2 	bl	8008afc <_printf_common>
 8008758:	3001      	adds	r0, #1
 800875a:	f040 808d 	bne.w	8008878 <_printf_float+0x1d0>
 800875e:	f04f 30ff 	mov.w	r0, #4294967295
 8008762:	b00d      	add	sp, #52	@ 0x34
 8008764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008768:	4642      	mov	r2, r8
 800876a:	464b      	mov	r3, r9
 800876c:	4640      	mov	r0, r8
 800876e:	4649      	mov	r1, r9
 8008770:	f7f8 f9e4 	bl	8000b3c <__aeabi_dcmpun>
 8008774:	b140      	cbz	r0, 8008788 <_printf_float+0xe0>
 8008776:	464b      	mov	r3, r9
 8008778:	2b00      	cmp	r3, #0
 800877a:	bfbc      	itt	lt
 800877c:	232d      	movlt	r3, #45	@ 0x2d
 800877e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008782:	4a7e      	ldr	r2, [pc, #504]	@ (800897c <_printf_float+0x2d4>)
 8008784:	4b7e      	ldr	r3, [pc, #504]	@ (8008980 <_printf_float+0x2d8>)
 8008786:	e7d4      	b.n	8008732 <_printf_float+0x8a>
 8008788:	6863      	ldr	r3, [r4, #4]
 800878a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800878e:	9206      	str	r2, [sp, #24]
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	d13b      	bne.n	800880c <_printf_float+0x164>
 8008794:	2306      	movs	r3, #6
 8008796:	6063      	str	r3, [r4, #4]
 8008798:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800879c:	2300      	movs	r3, #0
 800879e:	6022      	str	r2, [r4, #0]
 80087a0:	9303      	str	r3, [sp, #12]
 80087a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80087a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80087a8:	ab09      	add	r3, sp, #36	@ 0x24
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	6861      	ldr	r1, [r4, #4]
 80087ae:	ec49 8b10 	vmov	d0, r8, r9
 80087b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80087b6:	4628      	mov	r0, r5
 80087b8:	f7ff fed6 	bl	8008568 <__cvt>
 80087bc:	9b06      	ldr	r3, [sp, #24]
 80087be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087c0:	2b47      	cmp	r3, #71	@ 0x47
 80087c2:	4680      	mov	r8, r0
 80087c4:	d129      	bne.n	800881a <_printf_float+0x172>
 80087c6:	1cc8      	adds	r0, r1, #3
 80087c8:	db02      	blt.n	80087d0 <_printf_float+0x128>
 80087ca:	6863      	ldr	r3, [r4, #4]
 80087cc:	4299      	cmp	r1, r3
 80087ce:	dd41      	ble.n	8008854 <_printf_float+0x1ac>
 80087d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80087d4:	fa5f fa8a 	uxtb.w	sl, sl
 80087d8:	3901      	subs	r1, #1
 80087da:	4652      	mov	r2, sl
 80087dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80087e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80087e2:	f7ff ff26 	bl	8008632 <__exponent>
 80087e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087e8:	1813      	adds	r3, r2, r0
 80087ea:	2a01      	cmp	r2, #1
 80087ec:	4681      	mov	r9, r0
 80087ee:	6123      	str	r3, [r4, #16]
 80087f0:	dc02      	bgt.n	80087f8 <_printf_float+0x150>
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	07d2      	lsls	r2, r2, #31
 80087f6:	d501      	bpl.n	80087fc <_printf_float+0x154>
 80087f8:	3301      	adds	r3, #1
 80087fa:	6123      	str	r3, [r4, #16]
 80087fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0a2      	beq.n	800874a <_printf_float+0xa2>
 8008804:	232d      	movs	r3, #45	@ 0x2d
 8008806:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800880a:	e79e      	b.n	800874a <_printf_float+0xa2>
 800880c:	9a06      	ldr	r2, [sp, #24]
 800880e:	2a47      	cmp	r2, #71	@ 0x47
 8008810:	d1c2      	bne.n	8008798 <_printf_float+0xf0>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1c0      	bne.n	8008798 <_printf_float+0xf0>
 8008816:	2301      	movs	r3, #1
 8008818:	e7bd      	b.n	8008796 <_printf_float+0xee>
 800881a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800881e:	d9db      	bls.n	80087d8 <_printf_float+0x130>
 8008820:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008824:	d118      	bne.n	8008858 <_printf_float+0x1b0>
 8008826:	2900      	cmp	r1, #0
 8008828:	6863      	ldr	r3, [r4, #4]
 800882a:	dd0b      	ble.n	8008844 <_printf_float+0x19c>
 800882c:	6121      	str	r1, [r4, #16]
 800882e:	b913      	cbnz	r3, 8008836 <_printf_float+0x18e>
 8008830:	6822      	ldr	r2, [r4, #0]
 8008832:	07d0      	lsls	r0, r2, #31
 8008834:	d502      	bpl.n	800883c <_printf_float+0x194>
 8008836:	3301      	adds	r3, #1
 8008838:	440b      	add	r3, r1
 800883a:	6123      	str	r3, [r4, #16]
 800883c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800883e:	f04f 0900 	mov.w	r9, #0
 8008842:	e7db      	b.n	80087fc <_printf_float+0x154>
 8008844:	b913      	cbnz	r3, 800884c <_printf_float+0x1a4>
 8008846:	6822      	ldr	r2, [r4, #0]
 8008848:	07d2      	lsls	r2, r2, #31
 800884a:	d501      	bpl.n	8008850 <_printf_float+0x1a8>
 800884c:	3302      	adds	r3, #2
 800884e:	e7f4      	b.n	800883a <_printf_float+0x192>
 8008850:	2301      	movs	r3, #1
 8008852:	e7f2      	b.n	800883a <_printf_float+0x192>
 8008854:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800885a:	4299      	cmp	r1, r3
 800885c:	db05      	blt.n	800886a <_printf_float+0x1c2>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	6121      	str	r1, [r4, #16]
 8008862:	07d8      	lsls	r0, r3, #31
 8008864:	d5ea      	bpl.n	800883c <_printf_float+0x194>
 8008866:	1c4b      	adds	r3, r1, #1
 8008868:	e7e7      	b.n	800883a <_printf_float+0x192>
 800886a:	2900      	cmp	r1, #0
 800886c:	bfd4      	ite	le
 800886e:	f1c1 0202 	rsble	r2, r1, #2
 8008872:	2201      	movgt	r2, #1
 8008874:	4413      	add	r3, r2
 8008876:	e7e0      	b.n	800883a <_printf_float+0x192>
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	055a      	lsls	r2, r3, #21
 800887c:	d407      	bmi.n	800888e <_printf_float+0x1e6>
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	4642      	mov	r2, r8
 8008882:	4631      	mov	r1, r6
 8008884:	4628      	mov	r0, r5
 8008886:	47b8      	blx	r7
 8008888:	3001      	adds	r0, #1
 800888a:	d12b      	bne.n	80088e4 <_printf_float+0x23c>
 800888c:	e767      	b.n	800875e <_printf_float+0xb6>
 800888e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008892:	f240 80dd 	bls.w	8008a50 <_printf_float+0x3a8>
 8008896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800889a:	2200      	movs	r2, #0
 800889c:	2300      	movs	r3, #0
 800889e:	f7f8 f91b 	bl	8000ad8 <__aeabi_dcmpeq>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d033      	beq.n	800890e <_printf_float+0x266>
 80088a6:	4a37      	ldr	r2, [pc, #220]	@ (8008984 <_printf_float+0x2dc>)
 80088a8:	2301      	movs	r3, #1
 80088aa:	4631      	mov	r1, r6
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	f43f af54 	beq.w	800875e <_printf_float+0xb6>
 80088b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80088ba:	4543      	cmp	r3, r8
 80088bc:	db02      	blt.n	80088c4 <_printf_float+0x21c>
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	07d8      	lsls	r0, r3, #31
 80088c2:	d50f      	bpl.n	80088e4 <_printf_float+0x23c>
 80088c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088c8:	4631      	mov	r1, r6
 80088ca:	4628      	mov	r0, r5
 80088cc:	47b8      	blx	r7
 80088ce:	3001      	adds	r0, #1
 80088d0:	f43f af45 	beq.w	800875e <_printf_float+0xb6>
 80088d4:	f04f 0900 	mov.w	r9, #0
 80088d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80088dc:	f104 0a1a 	add.w	sl, r4, #26
 80088e0:	45c8      	cmp	r8, r9
 80088e2:	dc09      	bgt.n	80088f8 <_printf_float+0x250>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	079b      	lsls	r3, r3, #30
 80088e8:	f100 8103 	bmi.w	8008af2 <_printf_float+0x44a>
 80088ec:	68e0      	ldr	r0, [r4, #12]
 80088ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088f0:	4298      	cmp	r0, r3
 80088f2:	bfb8      	it	lt
 80088f4:	4618      	movlt	r0, r3
 80088f6:	e734      	b.n	8008762 <_printf_float+0xba>
 80088f8:	2301      	movs	r3, #1
 80088fa:	4652      	mov	r2, sl
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f af2b 	beq.w	800875e <_printf_float+0xb6>
 8008908:	f109 0901 	add.w	r9, r9, #1
 800890c:	e7e8      	b.n	80088e0 <_printf_float+0x238>
 800890e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008910:	2b00      	cmp	r3, #0
 8008912:	dc39      	bgt.n	8008988 <_printf_float+0x2e0>
 8008914:	4a1b      	ldr	r2, [pc, #108]	@ (8008984 <_printf_float+0x2dc>)
 8008916:	2301      	movs	r3, #1
 8008918:	4631      	mov	r1, r6
 800891a:	4628      	mov	r0, r5
 800891c:	47b8      	blx	r7
 800891e:	3001      	adds	r0, #1
 8008920:	f43f af1d 	beq.w	800875e <_printf_float+0xb6>
 8008924:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008928:	ea59 0303 	orrs.w	r3, r9, r3
 800892c:	d102      	bne.n	8008934 <_printf_float+0x28c>
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	07d9      	lsls	r1, r3, #31
 8008932:	d5d7      	bpl.n	80088e4 <_printf_float+0x23c>
 8008934:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008938:	4631      	mov	r1, r6
 800893a:	4628      	mov	r0, r5
 800893c:	47b8      	blx	r7
 800893e:	3001      	adds	r0, #1
 8008940:	f43f af0d 	beq.w	800875e <_printf_float+0xb6>
 8008944:	f04f 0a00 	mov.w	sl, #0
 8008948:	f104 0b1a 	add.w	fp, r4, #26
 800894c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894e:	425b      	negs	r3, r3
 8008950:	4553      	cmp	r3, sl
 8008952:	dc01      	bgt.n	8008958 <_printf_float+0x2b0>
 8008954:	464b      	mov	r3, r9
 8008956:	e793      	b.n	8008880 <_printf_float+0x1d8>
 8008958:	2301      	movs	r3, #1
 800895a:	465a      	mov	r2, fp
 800895c:	4631      	mov	r1, r6
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	f43f aefb 	beq.w	800875e <_printf_float+0xb6>
 8008968:	f10a 0a01 	add.w	sl, sl, #1
 800896c:	e7ee      	b.n	800894c <_printf_float+0x2a4>
 800896e:	bf00      	nop
 8008970:	7fefffff 	.word	0x7fefffff
 8008974:	0800b795 	.word	0x0800b795
 8008978:	0800b799 	.word	0x0800b799
 800897c:	0800b79d 	.word	0x0800b79d
 8008980:	0800b7a1 	.word	0x0800b7a1
 8008984:	0800b7a5 	.word	0x0800b7a5
 8008988:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800898a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800898e:	4553      	cmp	r3, sl
 8008990:	bfa8      	it	ge
 8008992:	4653      	movge	r3, sl
 8008994:	2b00      	cmp	r3, #0
 8008996:	4699      	mov	r9, r3
 8008998:	dc36      	bgt.n	8008a08 <_printf_float+0x360>
 800899a:	f04f 0b00 	mov.w	fp, #0
 800899e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089a2:	f104 021a 	add.w	r2, r4, #26
 80089a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80089a8:	9306      	str	r3, [sp, #24]
 80089aa:	eba3 0309 	sub.w	r3, r3, r9
 80089ae:	455b      	cmp	r3, fp
 80089b0:	dc31      	bgt.n	8008a16 <_printf_float+0x36e>
 80089b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b4:	459a      	cmp	sl, r3
 80089b6:	dc3a      	bgt.n	8008a2e <_printf_float+0x386>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	07da      	lsls	r2, r3, #31
 80089bc:	d437      	bmi.n	8008a2e <_printf_float+0x386>
 80089be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c0:	ebaa 0903 	sub.w	r9, sl, r3
 80089c4:	9b06      	ldr	r3, [sp, #24]
 80089c6:	ebaa 0303 	sub.w	r3, sl, r3
 80089ca:	4599      	cmp	r9, r3
 80089cc:	bfa8      	it	ge
 80089ce:	4699      	movge	r9, r3
 80089d0:	f1b9 0f00 	cmp.w	r9, #0
 80089d4:	dc33      	bgt.n	8008a3e <_printf_float+0x396>
 80089d6:	f04f 0800 	mov.w	r8, #0
 80089da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089de:	f104 0b1a 	add.w	fp, r4, #26
 80089e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e4:	ebaa 0303 	sub.w	r3, sl, r3
 80089e8:	eba3 0309 	sub.w	r3, r3, r9
 80089ec:	4543      	cmp	r3, r8
 80089ee:	f77f af79 	ble.w	80088e4 <_printf_float+0x23c>
 80089f2:	2301      	movs	r3, #1
 80089f4:	465a      	mov	r2, fp
 80089f6:	4631      	mov	r1, r6
 80089f8:	4628      	mov	r0, r5
 80089fa:	47b8      	blx	r7
 80089fc:	3001      	adds	r0, #1
 80089fe:	f43f aeae 	beq.w	800875e <_printf_float+0xb6>
 8008a02:	f108 0801 	add.w	r8, r8, #1
 8008a06:	e7ec      	b.n	80089e2 <_printf_float+0x33a>
 8008a08:	4642      	mov	r2, r8
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	47b8      	blx	r7
 8008a10:	3001      	adds	r0, #1
 8008a12:	d1c2      	bne.n	800899a <_printf_float+0x2f2>
 8008a14:	e6a3      	b.n	800875e <_printf_float+0xb6>
 8008a16:	2301      	movs	r3, #1
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	9206      	str	r2, [sp, #24]
 8008a1e:	47b8      	blx	r7
 8008a20:	3001      	adds	r0, #1
 8008a22:	f43f ae9c 	beq.w	800875e <_printf_float+0xb6>
 8008a26:	9a06      	ldr	r2, [sp, #24]
 8008a28:	f10b 0b01 	add.w	fp, fp, #1
 8008a2c:	e7bb      	b.n	80089a6 <_printf_float+0x2fe>
 8008a2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a32:	4631      	mov	r1, r6
 8008a34:	4628      	mov	r0, r5
 8008a36:	47b8      	blx	r7
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d1c0      	bne.n	80089be <_printf_float+0x316>
 8008a3c:	e68f      	b.n	800875e <_printf_float+0xb6>
 8008a3e:	9a06      	ldr	r2, [sp, #24]
 8008a40:	464b      	mov	r3, r9
 8008a42:	4442      	add	r2, r8
 8008a44:	4631      	mov	r1, r6
 8008a46:	4628      	mov	r0, r5
 8008a48:	47b8      	blx	r7
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	d1c3      	bne.n	80089d6 <_printf_float+0x32e>
 8008a4e:	e686      	b.n	800875e <_printf_float+0xb6>
 8008a50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a54:	f1ba 0f01 	cmp.w	sl, #1
 8008a58:	dc01      	bgt.n	8008a5e <_printf_float+0x3b6>
 8008a5a:	07db      	lsls	r3, r3, #31
 8008a5c:	d536      	bpl.n	8008acc <_printf_float+0x424>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	4642      	mov	r2, r8
 8008a62:	4631      	mov	r1, r6
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b8      	blx	r7
 8008a68:	3001      	adds	r0, #1
 8008a6a:	f43f ae78 	beq.w	800875e <_printf_float+0xb6>
 8008a6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a72:	4631      	mov	r1, r6
 8008a74:	4628      	mov	r0, r5
 8008a76:	47b8      	blx	r7
 8008a78:	3001      	adds	r0, #1
 8008a7a:	f43f ae70 	beq.w	800875e <_printf_float+0xb6>
 8008a7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a82:	2200      	movs	r2, #0
 8008a84:	2300      	movs	r3, #0
 8008a86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a8a:	f7f8 f825 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a8e:	b9c0      	cbnz	r0, 8008ac2 <_printf_float+0x41a>
 8008a90:	4653      	mov	r3, sl
 8008a92:	f108 0201 	add.w	r2, r8, #1
 8008a96:	4631      	mov	r1, r6
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b8      	blx	r7
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d10c      	bne.n	8008aba <_printf_float+0x412>
 8008aa0:	e65d      	b.n	800875e <_printf_float+0xb6>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	465a      	mov	r2, fp
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	47b8      	blx	r7
 8008aac:	3001      	adds	r0, #1
 8008aae:	f43f ae56 	beq.w	800875e <_printf_float+0xb6>
 8008ab2:	f108 0801 	add.w	r8, r8, #1
 8008ab6:	45d0      	cmp	r8, sl
 8008ab8:	dbf3      	blt.n	8008aa2 <_printf_float+0x3fa>
 8008aba:	464b      	mov	r3, r9
 8008abc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ac0:	e6df      	b.n	8008882 <_printf_float+0x1da>
 8008ac2:	f04f 0800 	mov.w	r8, #0
 8008ac6:	f104 0b1a 	add.w	fp, r4, #26
 8008aca:	e7f4      	b.n	8008ab6 <_printf_float+0x40e>
 8008acc:	2301      	movs	r3, #1
 8008ace:	4642      	mov	r2, r8
 8008ad0:	e7e1      	b.n	8008a96 <_printf_float+0x3ee>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	464a      	mov	r2, r9
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b8      	blx	r7
 8008adc:	3001      	adds	r0, #1
 8008ade:	f43f ae3e 	beq.w	800875e <_printf_float+0xb6>
 8008ae2:	f108 0801 	add.w	r8, r8, #1
 8008ae6:	68e3      	ldr	r3, [r4, #12]
 8008ae8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008aea:	1a5b      	subs	r3, r3, r1
 8008aec:	4543      	cmp	r3, r8
 8008aee:	dcf0      	bgt.n	8008ad2 <_printf_float+0x42a>
 8008af0:	e6fc      	b.n	80088ec <_printf_float+0x244>
 8008af2:	f04f 0800 	mov.w	r8, #0
 8008af6:	f104 0919 	add.w	r9, r4, #25
 8008afa:	e7f4      	b.n	8008ae6 <_printf_float+0x43e>

08008afc <_printf_common>:
 8008afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b00:	4616      	mov	r6, r2
 8008b02:	4698      	mov	r8, r3
 8008b04:	688a      	ldr	r2, [r1, #8]
 8008b06:	690b      	ldr	r3, [r1, #16]
 8008b08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	bfb8      	it	lt
 8008b10:	4613      	movlt	r3, r2
 8008b12:	6033      	str	r3, [r6, #0]
 8008b14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b18:	4607      	mov	r7, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	b10a      	cbz	r2, 8008b22 <_printf_common+0x26>
 8008b1e:	3301      	adds	r3, #1
 8008b20:	6033      	str	r3, [r6, #0]
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	0699      	lsls	r1, r3, #26
 8008b26:	bf42      	ittt	mi
 8008b28:	6833      	ldrmi	r3, [r6, #0]
 8008b2a:	3302      	addmi	r3, #2
 8008b2c:	6033      	strmi	r3, [r6, #0]
 8008b2e:	6825      	ldr	r5, [r4, #0]
 8008b30:	f015 0506 	ands.w	r5, r5, #6
 8008b34:	d106      	bne.n	8008b44 <_printf_common+0x48>
 8008b36:	f104 0a19 	add.w	sl, r4, #25
 8008b3a:	68e3      	ldr	r3, [r4, #12]
 8008b3c:	6832      	ldr	r2, [r6, #0]
 8008b3e:	1a9b      	subs	r3, r3, r2
 8008b40:	42ab      	cmp	r3, r5
 8008b42:	dc26      	bgt.n	8008b92 <_printf_common+0x96>
 8008b44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b48:	6822      	ldr	r2, [r4, #0]
 8008b4a:	3b00      	subs	r3, #0
 8008b4c:	bf18      	it	ne
 8008b4e:	2301      	movne	r3, #1
 8008b50:	0692      	lsls	r2, r2, #26
 8008b52:	d42b      	bmi.n	8008bac <_printf_common+0xb0>
 8008b54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b58:	4641      	mov	r1, r8
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	47c8      	blx	r9
 8008b5e:	3001      	adds	r0, #1
 8008b60:	d01e      	beq.n	8008ba0 <_printf_common+0xa4>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	6922      	ldr	r2, [r4, #16]
 8008b66:	f003 0306 	and.w	r3, r3, #6
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	bf02      	ittt	eq
 8008b6e:	68e5      	ldreq	r5, [r4, #12]
 8008b70:	6833      	ldreq	r3, [r6, #0]
 8008b72:	1aed      	subeq	r5, r5, r3
 8008b74:	68a3      	ldr	r3, [r4, #8]
 8008b76:	bf0c      	ite	eq
 8008b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b7c:	2500      	movne	r5, #0
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	bfc4      	itt	gt
 8008b82:	1a9b      	subgt	r3, r3, r2
 8008b84:	18ed      	addgt	r5, r5, r3
 8008b86:	2600      	movs	r6, #0
 8008b88:	341a      	adds	r4, #26
 8008b8a:	42b5      	cmp	r5, r6
 8008b8c:	d11a      	bne.n	8008bc4 <_printf_common+0xc8>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e008      	b.n	8008ba4 <_printf_common+0xa8>
 8008b92:	2301      	movs	r3, #1
 8008b94:	4652      	mov	r2, sl
 8008b96:	4641      	mov	r1, r8
 8008b98:	4638      	mov	r0, r7
 8008b9a:	47c8      	blx	r9
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d103      	bne.n	8008ba8 <_printf_common+0xac>
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba8:	3501      	adds	r5, #1
 8008baa:	e7c6      	b.n	8008b3a <_printf_common+0x3e>
 8008bac:	18e1      	adds	r1, r4, r3
 8008bae:	1c5a      	adds	r2, r3, #1
 8008bb0:	2030      	movs	r0, #48	@ 0x30
 8008bb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bb6:	4422      	add	r2, r4
 8008bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	e7c7      	b.n	8008b54 <_printf_common+0x58>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	4641      	mov	r1, r8
 8008bca:	4638      	mov	r0, r7
 8008bcc:	47c8      	blx	r9
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d0e6      	beq.n	8008ba0 <_printf_common+0xa4>
 8008bd2:	3601      	adds	r6, #1
 8008bd4:	e7d9      	b.n	8008b8a <_printf_common+0x8e>
	...

08008bd8 <_printf_i>:
 8008bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	7e0f      	ldrb	r7, [r1, #24]
 8008bde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008be0:	2f78      	cmp	r7, #120	@ 0x78
 8008be2:	4691      	mov	r9, r2
 8008be4:	4680      	mov	r8, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	469a      	mov	sl, r3
 8008bea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bee:	d807      	bhi.n	8008c00 <_printf_i+0x28>
 8008bf0:	2f62      	cmp	r7, #98	@ 0x62
 8008bf2:	d80a      	bhi.n	8008c0a <_printf_i+0x32>
 8008bf4:	2f00      	cmp	r7, #0
 8008bf6:	f000 80d2 	beq.w	8008d9e <_printf_i+0x1c6>
 8008bfa:	2f58      	cmp	r7, #88	@ 0x58
 8008bfc:	f000 80b9 	beq.w	8008d72 <_printf_i+0x19a>
 8008c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c08:	e03a      	b.n	8008c80 <_printf_i+0xa8>
 8008c0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c0e:	2b15      	cmp	r3, #21
 8008c10:	d8f6      	bhi.n	8008c00 <_printf_i+0x28>
 8008c12:	a101      	add	r1, pc, #4	@ (adr r1, 8008c18 <_printf_i+0x40>)
 8008c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c18:	08008c71 	.word	0x08008c71
 8008c1c:	08008c85 	.word	0x08008c85
 8008c20:	08008c01 	.word	0x08008c01
 8008c24:	08008c01 	.word	0x08008c01
 8008c28:	08008c01 	.word	0x08008c01
 8008c2c:	08008c01 	.word	0x08008c01
 8008c30:	08008c85 	.word	0x08008c85
 8008c34:	08008c01 	.word	0x08008c01
 8008c38:	08008c01 	.word	0x08008c01
 8008c3c:	08008c01 	.word	0x08008c01
 8008c40:	08008c01 	.word	0x08008c01
 8008c44:	08008d85 	.word	0x08008d85
 8008c48:	08008caf 	.word	0x08008caf
 8008c4c:	08008d3f 	.word	0x08008d3f
 8008c50:	08008c01 	.word	0x08008c01
 8008c54:	08008c01 	.word	0x08008c01
 8008c58:	08008da7 	.word	0x08008da7
 8008c5c:	08008c01 	.word	0x08008c01
 8008c60:	08008caf 	.word	0x08008caf
 8008c64:	08008c01 	.word	0x08008c01
 8008c68:	08008c01 	.word	0x08008c01
 8008c6c:	08008d47 	.word	0x08008d47
 8008c70:	6833      	ldr	r3, [r6, #0]
 8008c72:	1d1a      	adds	r2, r3, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6032      	str	r2, [r6, #0]
 8008c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c80:	2301      	movs	r3, #1
 8008c82:	e09d      	b.n	8008dc0 <_printf_i+0x1e8>
 8008c84:	6833      	ldr	r3, [r6, #0]
 8008c86:	6820      	ldr	r0, [r4, #0]
 8008c88:	1d19      	adds	r1, r3, #4
 8008c8a:	6031      	str	r1, [r6, #0]
 8008c8c:	0606      	lsls	r6, r0, #24
 8008c8e:	d501      	bpl.n	8008c94 <_printf_i+0xbc>
 8008c90:	681d      	ldr	r5, [r3, #0]
 8008c92:	e003      	b.n	8008c9c <_printf_i+0xc4>
 8008c94:	0645      	lsls	r5, r0, #25
 8008c96:	d5fb      	bpl.n	8008c90 <_printf_i+0xb8>
 8008c98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	da03      	bge.n	8008ca8 <_printf_i+0xd0>
 8008ca0:	232d      	movs	r3, #45	@ 0x2d
 8008ca2:	426d      	negs	r5, r5
 8008ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ca8:	4859      	ldr	r0, [pc, #356]	@ (8008e10 <_printf_i+0x238>)
 8008caa:	230a      	movs	r3, #10
 8008cac:	e011      	b.n	8008cd2 <_printf_i+0xfa>
 8008cae:	6821      	ldr	r1, [r4, #0]
 8008cb0:	6833      	ldr	r3, [r6, #0]
 8008cb2:	0608      	lsls	r0, r1, #24
 8008cb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cb8:	d402      	bmi.n	8008cc0 <_printf_i+0xe8>
 8008cba:	0649      	lsls	r1, r1, #25
 8008cbc:	bf48      	it	mi
 8008cbe:	b2ad      	uxthmi	r5, r5
 8008cc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cc2:	4853      	ldr	r0, [pc, #332]	@ (8008e10 <_printf_i+0x238>)
 8008cc4:	6033      	str	r3, [r6, #0]
 8008cc6:	bf14      	ite	ne
 8008cc8:	230a      	movne	r3, #10
 8008cca:	2308      	moveq	r3, #8
 8008ccc:	2100      	movs	r1, #0
 8008cce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cd2:	6866      	ldr	r6, [r4, #4]
 8008cd4:	60a6      	str	r6, [r4, #8]
 8008cd6:	2e00      	cmp	r6, #0
 8008cd8:	bfa2      	ittt	ge
 8008cda:	6821      	ldrge	r1, [r4, #0]
 8008cdc:	f021 0104 	bicge.w	r1, r1, #4
 8008ce0:	6021      	strge	r1, [r4, #0]
 8008ce2:	b90d      	cbnz	r5, 8008ce8 <_printf_i+0x110>
 8008ce4:	2e00      	cmp	r6, #0
 8008ce6:	d04b      	beq.n	8008d80 <_printf_i+0x1a8>
 8008ce8:	4616      	mov	r6, r2
 8008cea:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cee:	fb03 5711 	mls	r7, r3, r1, r5
 8008cf2:	5dc7      	ldrb	r7, [r0, r7]
 8008cf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cf8:	462f      	mov	r7, r5
 8008cfa:	42bb      	cmp	r3, r7
 8008cfc:	460d      	mov	r5, r1
 8008cfe:	d9f4      	bls.n	8008cea <_printf_i+0x112>
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d10b      	bne.n	8008d1c <_printf_i+0x144>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	07df      	lsls	r7, r3, #31
 8008d08:	d508      	bpl.n	8008d1c <_printf_i+0x144>
 8008d0a:	6923      	ldr	r3, [r4, #16]
 8008d0c:	6861      	ldr	r1, [r4, #4]
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	bfde      	ittt	le
 8008d12:	2330      	movle	r3, #48	@ 0x30
 8008d14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d1c:	1b92      	subs	r2, r2, r6
 8008d1e:	6122      	str	r2, [r4, #16]
 8008d20:	f8cd a000 	str.w	sl, [sp]
 8008d24:	464b      	mov	r3, r9
 8008d26:	aa03      	add	r2, sp, #12
 8008d28:	4621      	mov	r1, r4
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	f7ff fee6 	bl	8008afc <_printf_common>
 8008d30:	3001      	adds	r0, #1
 8008d32:	d14a      	bne.n	8008dca <_printf_i+0x1f2>
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295
 8008d38:	b004      	add	sp, #16
 8008d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	f043 0320 	orr.w	r3, r3, #32
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	4833      	ldr	r0, [pc, #204]	@ (8008e14 <_printf_i+0x23c>)
 8008d48:	2778      	movs	r7, #120	@ 0x78
 8008d4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	6831      	ldr	r1, [r6, #0]
 8008d52:	061f      	lsls	r7, r3, #24
 8008d54:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d58:	d402      	bmi.n	8008d60 <_printf_i+0x188>
 8008d5a:	065f      	lsls	r7, r3, #25
 8008d5c:	bf48      	it	mi
 8008d5e:	b2ad      	uxthmi	r5, r5
 8008d60:	6031      	str	r1, [r6, #0]
 8008d62:	07d9      	lsls	r1, r3, #31
 8008d64:	bf44      	itt	mi
 8008d66:	f043 0320 	orrmi.w	r3, r3, #32
 8008d6a:	6023      	strmi	r3, [r4, #0]
 8008d6c:	b11d      	cbz	r5, 8008d76 <_printf_i+0x19e>
 8008d6e:	2310      	movs	r3, #16
 8008d70:	e7ac      	b.n	8008ccc <_printf_i+0xf4>
 8008d72:	4827      	ldr	r0, [pc, #156]	@ (8008e10 <_printf_i+0x238>)
 8008d74:	e7e9      	b.n	8008d4a <_printf_i+0x172>
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	f023 0320 	bic.w	r3, r3, #32
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	e7f6      	b.n	8008d6e <_printf_i+0x196>
 8008d80:	4616      	mov	r6, r2
 8008d82:	e7bd      	b.n	8008d00 <_printf_i+0x128>
 8008d84:	6833      	ldr	r3, [r6, #0]
 8008d86:	6825      	ldr	r5, [r4, #0]
 8008d88:	6961      	ldr	r1, [r4, #20]
 8008d8a:	1d18      	adds	r0, r3, #4
 8008d8c:	6030      	str	r0, [r6, #0]
 8008d8e:	062e      	lsls	r6, r5, #24
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	d501      	bpl.n	8008d98 <_printf_i+0x1c0>
 8008d94:	6019      	str	r1, [r3, #0]
 8008d96:	e002      	b.n	8008d9e <_printf_i+0x1c6>
 8008d98:	0668      	lsls	r0, r5, #25
 8008d9a:	d5fb      	bpl.n	8008d94 <_printf_i+0x1bc>
 8008d9c:	8019      	strh	r1, [r3, #0]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	6123      	str	r3, [r4, #16]
 8008da2:	4616      	mov	r6, r2
 8008da4:	e7bc      	b.n	8008d20 <_printf_i+0x148>
 8008da6:	6833      	ldr	r3, [r6, #0]
 8008da8:	1d1a      	adds	r2, r3, #4
 8008daa:	6032      	str	r2, [r6, #0]
 8008dac:	681e      	ldr	r6, [r3, #0]
 8008dae:	6862      	ldr	r2, [r4, #4]
 8008db0:	2100      	movs	r1, #0
 8008db2:	4630      	mov	r0, r6
 8008db4:	f7f7 fa14 	bl	80001e0 <memchr>
 8008db8:	b108      	cbz	r0, 8008dbe <_printf_i+0x1e6>
 8008dba:	1b80      	subs	r0, r0, r6
 8008dbc:	6060      	str	r0, [r4, #4]
 8008dbe:	6863      	ldr	r3, [r4, #4]
 8008dc0:	6123      	str	r3, [r4, #16]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dc8:	e7aa      	b.n	8008d20 <_printf_i+0x148>
 8008dca:	6923      	ldr	r3, [r4, #16]
 8008dcc:	4632      	mov	r2, r6
 8008dce:	4649      	mov	r1, r9
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	47d0      	blx	sl
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d0ad      	beq.n	8008d34 <_printf_i+0x15c>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	079b      	lsls	r3, r3, #30
 8008ddc:	d413      	bmi.n	8008e06 <_printf_i+0x22e>
 8008dde:	68e0      	ldr	r0, [r4, #12]
 8008de0:	9b03      	ldr	r3, [sp, #12]
 8008de2:	4298      	cmp	r0, r3
 8008de4:	bfb8      	it	lt
 8008de6:	4618      	movlt	r0, r3
 8008de8:	e7a6      	b.n	8008d38 <_printf_i+0x160>
 8008dea:	2301      	movs	r3, #1
 8008dec:	4632      	mov	r2, r6
 8008dee:	4649      	mov	r1, r9
 8008df0:	4640      	mov	r0, r8
 8008df2:	47d0      	blx	sl
 8008df4:	3001      	adds	r0, #1
 8008df6:	d09d      	beq.n	8008d34 <_printf_i+0x15c>
 8008df8:	3501      	adds	r5, #1
 8008dfa:	68e3      	ldr	r3, [r4, #12]
 8008dfc:	9903      	ldr	r1, [sp, #12]
 8008dfe:	1a5b      	subs	r3, r3, r1
 8008e00:	42ab      	cmp	r3, r5
 8008e02:	dcf2      	bgt.n	8008dea <_printf_i+0x212>
 8008e04:	e7eb      	b.n	8008dde <_printf_i+0x206>
 8008e06:	2500      	movs	r5, #0
 8008e08:	f104 0619 	add.w	r6, r4, #25
 8008e0c:	e7f5      	b.n	8008dfa <_printf_i+0x222>
 8008e0e:	bf00      	nop
 8008e10:	0800b7a7 	.word	0x0800b7a7
 8008e14:	0800b7b8 	.word	0x0800b7b8

08008e18 <std>:
 8008e18:	2300      	movs	r3, #0
 8008e1a:	b510      	push	{r4, lr}
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e26:	6083      	str	r3, [r0, #8]
 8008e28:	8181      	strh	r1, [r0, #12]
 8008e2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e2c:	81c2      	strh	r2, [r0, #14]
 8008e2e:	6183      	str	r3, [r0, #24]
 8008e30:	4619      	mov	r1, r3
 8008e32:	2208      	movs	r2, #8
 8008e34:	305c      	adds	r0, #92	@ 0x5c
 8008e36:	f000 f948 	bl	80090ca <memset>
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e70 <std+0x58>)
 8008e3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e74 <std+0x5c>)
 8008e40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e42:	4b0d      	ldr	r3, [pc, #52]	@ (8008e78 <std+0x60>)
 8008e44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e46:	4b0d      	ldr	r3, [pc, #52]	@ (8008e7c <std+0x64>)
 8008e48:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e80 <std+0x68>)
 8008e4c:	6224      	str	r4, [r4, #32]
 8008e4e:	429c      	cmp	r4, r3
 8008e50:	d006      	beq.n	8008e60 <std+0x48>
 8008e52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e56:	4294      	cmp	r4, r2
 8008e58:	d002      	beq.n	8008e60 <std+0x48>
 8008e5a:	33d0      	adds	r3, #208	@ 0xd0
 8008e5c:	429c      	cmp	r4, r3
 8008e5e:	d105      	bne.n	8008e6c <std+0x54>
 8008e60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e68:	f000 ba94 	b.w	8009394 <__retarget_lock_init_recursive>
 8008e6c:	bd10      	pop	{r4, pc}
 8008e6e:	bf00      	nop
 8008e70:	08009045 	.word	0x08009045
 8008e74:	08009067 	.word	0x08009067
 8008e78:	0800909f 	.word	0x0800909f
 8008e7c:	080090c3 	.word	0x080090c3
 8008e80:	20009828 	.word	0x20009828

08008e84 <stdio_exit_handler>:
 8008e84:	4a02      	ldr	r2, [pc, #8]	@ (8008e90 <stdio_exit_handler+0xc>)
 8008e86:	4903      	ldr	r1, [pc, #12]	@ (8008e94 <stdio_exit_handler+0x10>)
 8008e88:	4803      	ldr	r0, [pc, #12]	@ (8008e98 <stdio_exit_handler+0x14>)
 8008e8a:	f000 b869 	b.w	8008f60 <_fwalk_sglue>
 8008e8e:	bf00      	nop
 8008e90:	20000044 	.word	0x20000044
 8008e94:	0800ad5d 	.word	0x0800ad5d
 8008e98:	20000054 	.word	0x20000054

08008e9c <cleanup_stdio>:
 8008e9c:	6841      	ldr	r1, [r0, #4]
 8008e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed0 <cleanup_stdio+0x34>)
 8008ea0:	4299      	cmp	r1, r3
 8008ea2:	b510      	push	{r4, lr}
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	d001      	beq.n	8008eac <cleanup_stdio+0x10>
 8008ea8:	f001 ff58 	bl	800ad5c <_fflush_r>
 8008eac:	68a1      	ldr	r1, [r4, #8]
 8008eae:	4b09      	ldr	r3, [pc, #36]	@ (8008ed4 <cleanup_stdio+0x38>)
 8008eb0:	4299      	cmp	r1, r3
 8008eb2:	d002      	beq.n	8008eba <cleanup_stdio+0x1e>
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f001 ff51 	bl	800ad5c <_fflush_r>
 8008eba:	68e1      	ldr	r1, [r4, #12]
 8008ebc:	4b06      	ldr	r3, [pc, #24]	@ (8008ed8 <cleanup_stdio+0x3c>)
 8008ebe:	4299      	cmp	r1, r3
 8008ec0:	d004      	beq.n	8008ecc <cleanup_stdio+0x30>
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec8:	f001 bf48 	b.w	800ad5c <_fflush_r>
 8008ecc:	bd10      	pop	{r4, pc}
 8008ece:	bf00      	nop
 8008ed0:	20009828 	.word	0x20009828
 8008ed4:	20009890 	.word	0x20009890
 8008ed8:	200098f8 	.word	0x200098f8

08008edc <global_stdio_init.part.0>:
 8008edc:	b510      	push	{r4, lr}
 8008ede:	4b0b      	ldr	r3, [pc, #44]	@ (8008f0c <global_stdio_init.part.0+0x30>)
 8008ee0:	4c0b      	ldr	r4, [pc, #44]	@ (8008f10 <global_stdio_init.part.0+0x34>)
 8008ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8008f14 <global_stdio_init.part.0+0x38>)
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2104      	movs	r1, #4
 8008eec:	f7ff ff94 	bl	8008e18 <std>
 8008ef0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	2109      	movs	r1, #9
 8008ef8:	f7ff ff8e 	bl	8008e18 <std>
 8008efc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f00:	2202      	movs	r2, #2
 8008f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f06:	2112      	movs	r1, #18
 8008f08:	f7ff bf86 	b.w	8008e18 <std>
 8008f0c:	20009960 	.word	0x20009960
 8008f10:	20009828 	.word	0x20009828
 8008f14:	08008e85 	.word	0x08008e85

08008f18 <__sfp_lock_acquire>:
 8008f18:	4801      	ldr	r0, [pc, #4]	@ (8008f20 <__sfp_lock_acquire+0x8>)
 8008f1a:	f000 ba3c 	b.w	8009396 <__retarget_lock_acquire_recursive>
 8008f1e:	bf00      	nop
 8008f20:	20009969 	.word	0x20009969

08008f24 <__sfp_lock_release>:
 8008f24:	4801      	ldr	r0, [pc, #4]	@ (8008f2c <__sfp_lock_release+0x8>)
 8008f26:	f000 ba37 	b.w	8009398 <__retarget_lock_release_recursive>
 8008f2a:	bf00      	nop
 8008f2c:	20009969 	.word	0x20009969

08008f30 <__sinit>:
 8008f30:	b510      	push	{r4, lr}
 8008f32:	4604      	mov	r4, r0
 8008f34:	f7ff fff0 	bl	8008f18 <__sfp_lock_acquire>
 8008f38:	6a23      	ldr	r3, [r4, #32]
 8008f3a:	b11b      	cbz	r3, 8008f44 <__sinit+0x14>
 8008f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f40:	f7ff bff0 	b.w	8008f24 <__sfp_lock_release>
 8008f44:	4b04      	ldr	r3, [pc, #16]	@ (8008f58 <__sinit+0x28>)
 8008f46:	6223      	str	r3, [r4, #32]
 8008f48:	4b04      	ldr	r3, [pc, #16]	@ (8008f5c <__sinit+0x2c>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1f5      	bne.n	8008f3c <__sinit+0xc>
 8008f50:	f7ff ffc4 	bl	8008edc <global_stdio_init.part.0>
 8008f54:	e7f2      	b.n	8008f3c <__sinit+0xc>
 8008f56:	bf00      	nop
 8008f58:	08008e9d 	.word	0x08008e9d
 8008f5c:	20009960 	.word	0x20009960

08008f60 <_fwalk_sglue>:
 8008f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f64:	4607      	mov	r7, r0
 8008f66:	4688      	mov	r8, r1
 8008f68:	4614      	mov	r4, r2
 8008f6a:	2600      	movs	r6, #0
 8008f6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f70:	f1b9 0901 	subs.w	r9, r9, #1
 8008f74:	d505      	bpl.n	8008f82 <_fwalk_sglue+0x22>
 8008f76:	6824      	ldr	r4, [r4, #0]
 8008f78:	2c00      	cmp	r4, #0
 8008f7a:	d1f7      	bne.n	8008f6c <_fwalk_sglue+0xc>
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f82:	89ab      	ldrh	r3, [r5, #12]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d907      	bls.n	8008f98 <_fwalk_sglue+0x38>
 8008f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	d003      	beq.n	8008f98 <_fwalk_sglue+0x38>
 8008f90:	4629      	mov	r1, r5
 8008f92:	4638      	mov	r0, r7
 8008f94:	47c0      	blx	r8
 8008f96:	4306      	orrs	r6, r0
 8008f98:	3568      	adds	r5, #104	@ 0x68
 8008f9a:	e7e9      	b.n	8008f70 <_fwalk_sglue+0x10>

08008f9c <sniprintf>:
 8008f9c:	b40c      	push	{r2, r3}
 8008f9e:	b530      	push	{r4, r5, lr}
 8008fa0:	4b17      	ldr	r3, [pc, #92]	@ (8009000 <sniprintf+0x64>)
 8008fa2:	1e0c      	subs	r4, r1, #0
 8008fa4:	681d      	ldr	r5, [r3, #0]
 8008fa6:	b09d      	sub	sp, #116	@ 0x74
 8008fa8:	da08      	bge.n	8008fbc <sniprintf+0x20>
 8008faa:	238b      	movs	r3, #139	@ 0x8b
 8008fac:	602b      	str	r3, [r5, #0]
 8008fae:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb2:	b01d      	add	sp, #116	@ 0x74
 8008fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fb8:	b002      	add	sp, #8
 8008fba:	4770      	bx	lr
 8008fbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008fc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008fc4:	bf14      	ite	ne
 8008fc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008fca:	4623      	moveq	r3, r4
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	9307      	str	r3, [sp, #28]
 8008fd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008fd4:	9002      	str	r0, [sp, #8]
 8008fd6:	9006      	str	r0, [sp, #24]
 8008fd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008fdc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008fde:	ab21      	add	r3, sp, #132	@ 0x84
 8008fe0:	a902      	add	r1, sp, #8
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	f001 fd39 	bl	800aa5c <_svfiprintf_r>
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	bfbc      	itt	lt
 8008fee:	238b      	movlt	r3, #139	@ 0x8b
 8008ff0:	602b      	strlt	r3, [r5, #0]
 8008ff2:	2c00      	cmp	r4, #0
 8008ff4:	d0dd      	beq.n	8008fb2 <sniprintf+0x16>
 8008ff6:	9b02      	ldr	r3, [sp, #8]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	701a      	strb	r2, [r3, #0]
 8008ffc:	e7d9      	b.n	8008fb2 <sniprintf+0x16>
 8008ffe:	bf00      	nop
 8009000:	20000050 	.word	0x20000050

08009004 <siprintf>:
 8009004:	b40e      	push	{r1, r2, r3}
 8009006:	b500      	push	{lr}
 8009008:	b09c      	sub	sp, #112	@ 0x70
 800900a:	ab1d      	add	r3, sp, #116	@ 0x74
 800900c:	9002      	str	r0, [sp, #8]
 800900e:	9006      	str	r0, [sp, #24]
 8009010:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009014:	4809      	ldr	r0, [pc, #36]	@ (800903c <siprintf+0x38>)
 8009016:	9107      	str	r1, [sp, #28]
 8009018:	9104      	str	r1, [sp, #16]
 800901a:	4909      	ldr	r1, [pc, #36]	@ (8009040 <siprintf+0x3c>)
 800901c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009020:	9105      	str	r1, [sp, #20]
 8009022:	6800      	ldr	r0, [r0, #0]
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	a902      	add	r1, sp, #8
 8009028:	f001 fd18 	bl	800aa5c <_svfiprintf_r>
 800902c:	9b02      	ldr	r3, [sp, #8]
 800902e:	2200      	movs	r2, #0
 8009030:	701a      	strb	r2, [r3, #0]
 8009032:	b01c      	add	sp, #112	@ 0x70
 8009034:	f85d eb04 	ldr.w	lr, [sp], #4
 8009038:	b003      	add	sp, #12
 800903a:	4770      	bx	lr
 800903c:	20000050 	.word	0x20000050
 8009040:	ffff0208 	.word	0xffff0208

08009044 <__sread>:
 8009044:	b510      	push	{r4, lr}
 8009046:	460c      	mov	r4, r1
 8009048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800904c:	f000 f954 	bl	80092f8 <_read_r>
 8009050:	2800      	cmp	r0, #0
 8009052:	bfab      	itete	ge
 8009054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009056:	89a3      	ldrhlt	r3, [r4, #12]
 8009058:	181b      	addge	r3, r3, r0
 800905a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800905e:	bfac      	ite	ge
 8009060:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009062:	81a3      	strhlt	r3, [r4, #12]
 8009064:	bd10      	pop	{r4, pc}

08009066 <__swrite>:
 8009066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906a:	461f      	mov	r7, r3
 800906c:	898b      	ldrh	r3, [r1, #12]
 800906e:	05db      	lsls	r3, r3, #23
 8009070:	4605      	mov	r5, r0
 8009072:	460c      	mov	r4, r1
 8009074:	4616      	mov	r6, r2
 8009076:	d505      	bpl.n	8009084 <__swrite+0x1e>
 8009078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907c:	2302      	movs	r3, #2
 800907e:	2200      	movs	r2, #0
 8009080:	f000 f928 	bl	80092d4 <_lseek_r>
 8009084:	89a3      	ldrh	r3, [r4, #12]
 8009086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800908a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800908e:	81a3      	strh	r3, [r4, #12]
 8009090:	4632      	mov	r2, r6
 8009092:	463b      	mov	r3, r7
 8009094:	4628      	mov	r0, r5
 8009096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800909a:	f000 b93f 	b.w	800931c <_write_r>

0800909e <__sseek>:
 800909e:	b510      	push	{r4, lr}
 80090a0:	460c      	mov	r4, r1
 80090a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a6:	f000 f915 	bl	80092d4 <_lseek_r>
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	bf15      	itete	ne
 80090b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090ba:	81a3      	strheq	r3, [r4, #12]
 80090bc:	bf18      	it	ne
 80090be:	81a3      	strhne	r3, [r4, #12]
 80090c0:	bd10      	pop	{r4, pc}

080090c2 <__sclose>:
 80090c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c6:	f000 b89f 	b.w	8009208 <_close_r>

080090ca <memset>:
 80090ca:	4402      	add	r2, r0
 80090cc:	4603      	mov	r3, r0
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d100      	bne.n	80090d4 <memset+0xa>
 80090d2:	4770      	bx	lr
 80090d4:	f803 1b01 	strb.w	r1, [r3], #1
 80090d8:	e7f9      	b.n	80090ce <memset+0x4>

080090da <strchr>:
 80090da:	b2c9      	uxtb	r1, r1
 80090dc:	4603      	mov	r3, r0
 80090de:	4618      	mov	r0, r3
 80090e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090e4:	b112      	cbz	r2, 80090ec <strchr+0x12>
 80090e6:	428a      	cmp	r2, r1
 80090e8:	d1f9      	bne.n	80090de <strchr+0x4>
 80090ea:	4770      	bx	lr
 80090ec:	2900      	cmp	r1, #0
 80090ee:	bf18      	it	ne
 80090f0:	2000      	movne	r0, #0
 80090f2:	4770      	bx	lr

080090f4 <strncpy>:
 80090f4:	b510      	push	{r4, lr}
 80090f6:	3901      	subs	r1, #1
 80090f8:	4603      	mov	r3, r0
 80090fa:	b132      	cbz	r2, 800910a <strncpy+0x16>
 80090fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009100:	f803 4b01 	strb.w	r4, [r3], #1
 8009104:	3a01      	subs	r2, #1
 8009106:	2c00      	cmp	r4, #0
 8009108:	d1f7      	bne.n	80090fa <strncpy+0x6>
 800910a:	441a      	add	r2, r3
 800910c:	2100      	movs	r1, #0
 800910e:	4293      	cmp	r3, r2
 8009110:	d100      	bne.n	8009114 <strncpy+0x20>
 8009112:	bd10      	pop	{r4, pc}
 8009114:	f803 1b01 	strb.w	r1, [r3], #1
 8009118:	e7f9      	b.n	800910e <strncpy+0x1a>
	...

0800911c <strtok>:
 800911c:	4b16      	ldr	r3, [pc, #88]	@ (8009178 <strtok+0x5c>)
 800911e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009122:	681f      	ldr	r7, [r3, #0]
 8009124:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009126:	4605      	mov	r5, r0
 8009128:	460e      	mov	r6, r1
 800912a:	b9ec      	cbnz	r4, 8009168 <strtok+0x4c>
 800912c:	2050      	movs	r0, #80	@ 0x50
 800912e:	f001 f801 	bl	800a134 <malloc>
 8009132:	4602      	mov	r2, r0
 8009134:	6478      	str	r0, [r7, #68]	@ 0x44
 8009136:	b920      	cbnz	r0, 8009142 <strtok+0x26>
 8009138:	4b10      	ldr	r3, [pc, #64]	@ (800917c <strtok+0x60>)
 800913a:	4811      	ldr	r0, [pc, #68]	@ (8009180 <strtok+0x64>)
 800913c:	215b      	movs	r1, #91	@ 0x5b
 800913e:	f000 f943 	bl	80093c8 <__assert_func>
 8009142:	e9c0 4400 	strd	r4, r4, [r0]
 8009146:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800914a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800914e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009152:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009156:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800915a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800915e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009162:	6184      	str	r4, [r0, #24]
 8009164:	7704      	strb	r4, [r0, #28]
 8009166:	6244      	str	r4, [r0, #36]	@ 0x24
 8009168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800916a:	4631      	mov	r1, r6
 800916c:	4628      	mov	r0, r5
 800916e:	2301      	movs	r3, #1
 8009170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	f000 b806 	b.w	8009184 <__strtok_r>
 8009178:	20000050 	.word	0x20000050
 800917c:	0800b7c9 	.word	0x0800b7c9
 8009180:	0800b7e0 	.word	0x0800b7e0

08009184 <__strtok_r>:
 8009184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009186:	4604      	mov	r4, r0
 8009188:	b908      	cbnz	r0, 800918e <__strtok_r+0xa>
 800918a:	6814      	ldr	r4, [r2, #0]
 800918c:	b144      	cbz	r4, 80091a0 <__strtok_r+0x1c>
 800918e:	4620      	mov	r0, r4
 8009190:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009194:	460f      	mov	r7, r1
 8009196:	f817 6b01 	ldrb.w	r6, [r7], #1
 800919a:	b91e      	cbnz	r6, 80091a4 <__strtok_r+0x20>
 800919c:	b965      	cbnz	r5, 80091b8 <__strtok_r+0x34>
 800919e:	6015      	str	r5, [r2, #0]
 80091a0:	2000      	movs	r0, #0
 80091a2:	e005      	b.n	80091b0 <__strtok_r+0x2c>
 80091a4:	42b5      	cmp	r5, r6
 80091a6:	d1f6      	bne.n	8009196 <__strtok_r+0x12>
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1f0      	bne.n	800918e <__strtok_r+0xa>
 80091ac:	6014      	str	r4, [r2, #0]
 80091ae:	7003      	strb	r3, [r0, #0]
 80091b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b2:	461c      	mov	r4, r3
 80091b4:	e00c      	b.n	80091d0 <__strtok_r+0x4c>
 80091b6:	b915      	cbnz	r5, 80091be <__strtok_r+0x3a>
 80091b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091bc:	460e      	mov	r6, r1
 80091be:	f816 5b01 	ldrb.w	r5, [r6], #1
 80091c2:	42ab      	cmp	r3, r5
 80091c4:	d1f7      	bne.n	80091b6 <__strtok_r+0x32>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0f3      	beq.n	80091b2 <__strtok_r+0x2e>
 80091ca:	2300      	movs	r3, #0
 80091cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80091d0:	6014      	str	r4, [r2, #0]
 80091d2:	e7ed      	b.n	80091b0 <__strtok_r+0x2c>

080091d4 <strstr>:
 80091d4:	780a      	ldrb	r2, [r1, #0]
 80091d6:	b570      	push	{r4, r5, r6, lr}
 80091d8:	b96a      	cbnz	r2, 80091f6 <strstr+0x22>
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	429a      	cmp	r2, r3
 80091de:	d109      	bne.n	80091f4 <strstr+0x20>
 80091e0:	460c      	mov	r4, r1
 80091e2:	4605      	mov	r5, r0
 80091e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0f6      	beq.n	80091da <strstr+0x6>
 80091ec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80091f0:	429e      	cmp	r6, r3
 80091f2:	d0f7      	beq.n	80091e4 <strstr+0x10>
 80091f4:	3001      	adds	r0, #1
 80091f6:	7803      	ldrb	r3, [r0, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1ef      	bne.n	80091dc <strstr+0x8>
 80091fc:	4618      	mov	r0, r3
 80091fe:	e7ec      	b.n	80091da <strstr+0x6>

08009200 <_localeconv_r>:
 8009200:	4800      	ldr	r0, [pc, #0]	@ (8009204 <_localeconv_r+0x4>)
 8009202:	4770      	bx	lr
 8009204:	20000190 	.word	0x20000190

08009208 <_close_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	4d06      	ldr	r5, [pc, #24]	@ (8009224 <_close_r+0x1c>)
 800920c:	2300      	movs	r3, #0
 800920e:	4604      	mov	r4, r0
 8009210:	4608      	mov	r0, r1
 8009212:	602b      	str	r3, [r5, #0]
 8009214:	f7f9 fc2a 	bl	8002a6c <_close>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d102      	bne.n	8009222 <_close_r+0x1a>
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	b103      	cbz	r3, 8009222 <_close_r+0x1a>
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	20009964 	.word	0x20009964

08009228 <_reclaim_reent>:
 8009228:	4b29      	ldr	r3, [pc, #164]	@ (80092d0 <_reclaim_reent+0xa8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4283      	cmp	r3, r0
 800922e:	b570      	push	{r4, r5, r6, lr}
 8009230:	4604      	mov	r4, r0
 8009232:	d04b      	beq.n	80092cc <_reclaim_reent+0xa4>
 8009234:	69c3      	ldr	r3, [r0, #28]
 8009236:	b1ab      	cbz	r3, 8009264 <_reclaim_reent+0x3c>
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	b16b      	cbz	r3, 8009258 <_reclaim_reent+0x30>
 800923c:	2500      	movs	r5, #0
 800923e:	69e3      	ldr	r3, [r4, #28]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	5959      	ldr	r1, [r3, r5]
 8009244:	2900      	cmp	r1, #0
 8009246:	d13b      	bne.n	80092c0 <_reclaim_reent+0x98>
 8009248:	3504      	adds	r5, #4
 800924a:	2d80      	cmp	r5, #128	@ 0x80
 800924c:	d1f7      	bne.n	800923e <_reclaim_reent+0x16>
 800924e:	69e3      	ldr	r3, [r4, #28]
 8009250:	4620      	mov	r0, r4
 8009252:	68d9      	ldr	r1, [r3, #12]
 8009254:	f000 ff24 	bl	800a0a0 <_free_r>
 8009258:	69e3      	ldr	r3, [r4, #28]
 800925a:	6819      	ldr	r1, [r3, #0]
 800925c:	b111      	cbz	r1, 8009264 <_reclaim_reent+0x3c>
 800925e:	4620      	mov	r0, r4
 8009260:	f000 ff1e 	bl	800a0a0 <_free_r>
 8009264:	6961      	ldr	r1, [r4, #20]
 8009266:	b111      	cbz	r1, 800926e <_reclaim_reent+0x46>
 8009268:	4620      	mov	r0, r4
 800926a:	f000 ff19 	bl	800a0a0 <_free_r>
 800926e:	69e1      	ldr	r1, [r4, #28]
 8009270:	b111      	cbz	r1, 8009278 <_reclaim_reent+0x50>
 8009272:	4620      	mov	r0, r4
 8009274:	f000 ff14 	bl	800a0a0 <_free_r>
 8009278:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800927a:	b111      	cbz	r1, 8009282 <_reclaim_reent+0x5a>
 800927c:	4620      	mov	r0, r4
 800927e:	f000 ff0f 	bl	800a0a0 <_free_r>
 8009282:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009284:	b111      	cbz	r1, 800928c <_reclaim_reent+0x64>
 8009286:	4620      	mov	r0, r4
 8009288:	f000 ff0a 	bl	800a0a0 <_free_r>
 800928c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800928e:	b111      	cbz	r1, 8009296 <_reclaim_reent+0x6e>
 8009290:	4620      	mov	r0, r4
 8009292:	f000 ff05 	bl	800a0a0 <_free_r>
 8009296:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009298:	b111      	cbz	r1, 80092a0 <_reclaim_reent+0x78>
 800929a:	4620      	mov	r0, r4
 800929c:	f000 ff00 	bl	800a0a0 <_free_r>
 80092a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80092a2:	b111      	cbz	r1, 80092aa <_reclaim_reent+0x82>
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 fefb 	bl	800a0a0 <_free_r>
 80092aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80092ac:	b111      	cbz	r1, 80092b4 <_reclaim_reent+0x8c>
 80092ae:	4620      	mov	r0, r4
 80092b0:	f000 fef6 	bl	800a0a0 <_free_r>
 80092b4:	6a23      	ldr	r3, [r4, #32]
 80092b6:	b14b      	cbz	r3, 80092cc <_reclaim_reent+0xa4>
 80092b8:	4620      	mov	r0, r4
 80092ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092be:	4718      	bx	r3
 80092c0:	680e      	ldr	r6, [r1, #0]
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 feec 	bl	800a0a0 <_free_r>
 80092c8:	4631      	mov	r1, r6
 80092ca:	e7bb      	b.n	8009244 <_reclaim_reent+0x1c>
 80092cc:	bd70      	pop	{r4, r5, r6, pc}
 80092ce:	bf00      	nop
 80092d0:	20000050 	.word	0x20000050

080092d4 <_lseek_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	@ (80092f4 <_lseek_r+0x20>)
 80092d8:	4604      	mov	r4, r0
 80092da:	4608      	mov	r0, r1
 80092dc:	4611      	mov	r1, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	602a      	str	r2, [r5, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f7f9 fbe9 	bl	8002aba <_lseek>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_lseek_r+0x1e>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_lseek_r+0x1e>
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	20009964 	.word	0x20009964

080092f8 <_read_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d07      	ldr	r5, [pc, #28]	@ (8009318 <_read_r+0x20>)
 80092fc:	4604      	mov	r4, r0
 80092fe:	4608      	mov	r0, r1
 8009300:	4611      	mov	r1, r2
 8009302:	2200      	movs	r2, #0
 8009304:	602a      	str	r2, [r5, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	f7f9 fb77 	bl	80029fa <_read>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_read_r+0x1e>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b103      	cbz	r3, 8009316 <_read_r+0x1e>
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	20009964 	.word	0x20009964

0800931c <_write_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4d07      	ldr	r5, [pc, #28]	@ (800933c <_write_r+0x20>)
 8009320:	4604      	mov	r4, r0
 8009322:	4608      	mov	r0, r1
 8009324:	4611      	mov	r1, r2
 8009326:	2200      	movs	r2, #0
 8009328:	602a      	str	r2, [r5, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	f7f9 fb82 	bl	8002a34 <_write>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d102      	bne.n	800933a <_write_r+0x1e>
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	b103      	cbz	r3, 800933a <_write_r+0x1e>
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	20009964 	.word	0x20009964

08009340 <__errno>:
 8009340:	4b01      	ldr	r3, [pc, #4]	@ (8009348 <__errno+0x8>)
 8009342:	6818      	ldr	r0, [r3, #0]
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	20000050 	.word	0x20000050

0800934c <__libc_init_array>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	4d0d      	ldr	r5, [pc, #52]	@ (8009384 <__libc_init_array+0x38>)
 8009350:	4c0d      	ldr	r4, [pc, #52]	@ (8009388 <__libc_init_array+0x3c>)
 8009352:	1b64      	subs	r4, r4, r5
 8009354:	10a4      	asrs	r4, r4, #2
 8009356:	2600      	movs	r6, #0
 8009358:	42a6      	cmp	r6, r4
 800935a:	d109      	bne.n	8009370 <__libc_init_array+0x24>
 800935c:	4d0b      	ldr	r5, [pc, #44]	@ (800938c <__libc_init_array+0x40>)
 800935e:	4c0c      	ldr	r4, [pc, #48]	@ (8009390 <__libc_init_array+0x44>)
 8009360:	f002 f86e 	bl	800b440 <_init>
 8009364:	1b64      	subs	r4, r4, r5
 8009366:	10a4      	asrs	r4, r4, #2
 8009368:	2600      	movs	r6, #0
 800936a:	42a6      	cmp	r6, r4
 800936c:	d105      	bne.n	800937a <__libc_init_array+0x2e>
 800936e:	bd70      	pop	{r4, r5, r6, pc}
 8009370:	f855 3b04 	ldr.w	r3, [r5], #4
 8009374:	4798      	blx	r3
 8009376:	3601      	adds	r6, #1
 8009378:	e7ee      	b.n	8009358 <__libc_init_array+0xc>
 800937a:	f855 3b04 	ldr.w	r3, [r5], #4
 800937e:	4798      	blx	r3
 8009380:	3601      	adds	r6, #1
 8009382:	e7f2      	b.n	800936a <__libc_init_array+0x1e>
 8009384:	0800ba6c 	.word	0x0800ba6c
 8009388:	0800ba6c 	.word	0x0800ba6c
 800938c:	0800ba6c 	.word	0x0800ba6c
 8009390:	0800ba7c 	.word	0x0800ba7c

08009394 <__retarget_lock_init_recursive>:
 8009394:	4770      	bx	lr

08009396 <__retarget_lock_acquire_recursive>:
 8009396:	4770      	bx	lr

08009398 <__retarget_lock_release_recursive>:
 8009398:	4770      	bx	lr

0800939a <strcpy>:
 800939a:	4603      	mov	r3, r0
 800939c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093a0:	f803 2b01 	strb.w	r2, [r3], #1
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	d1f9      	bne.n	800939c <strcpy+0x2>
 80093a8:	4770      	bx	lr

080093aa <memcpy>:
 80093aa:	440a      	add	r2, r1
 80093ac:	4291      	cmp	r1, r2
 80093ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80093b2:	d100      	bne.n	80093b6 <memcpy+0xc>
 80093b4:	4770      	bx	lr
 80093b6:	b510      	push	{r4, lr}
 80093b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093c0:	4291      	cmp	r1, r2
 80093c2:	d1f9      	bne.n	80093b8 <memcpy+0xe>
 80093c4:	bd10      	pop	{r4, pc}
	...

080093c8 <__assert_func>:
 80093c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093ca:	4614      	mov	r4, r2
 80093cc:	461a      	mov	r2, r3
 80093ce:	4b09      	ldr	r3, [pc, #36]	@ (80093f4 <__assert_func+0x2c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4605      	mov	r5, r0
 80093d4:	68d8      	ldr	r0, [r3, #12]
 80093d6:	b954      	cbnz	r4, 80093ee <__assert_func+0x26>
 80093d8:	4b07      	ldr	r3, [pc, #28]	@ (80093f8 <__assert_func+0x30>)
 80093da:	461c      	mov	r4, r3
 80093dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093e0:	9100      	str	r1, [sp, #0]
 80093e2:	462b      	mov	r3, r5
 80093e4:	4905      	ldr	r1, [pc, #20]	@ (80093fc <__assert_func+0x34>)
 80093e6:	f001 fce1 	bl	800adac <fiprintf>
 80093ea:	f001 fd1b 	bl	800ae24 <abort>
 80093ee:	4b04      	ldr	r3, [pc, #16]	@ (8009400 <__assert_func+0x38>)
 80093f0:	e7f4      	b.n	80093dc <__assert_func+0x14>
 80093f2:	bf00      	nop
 80093f4:	20000050 	.word	0x20000050
 80093f8:	0800b875 	.word	0x0800b875
 80093fc:	0800b847 	.word	0x0800b847
 8009400:	0800b83a 	.word	0x0800b83a

08009404 <quorem>:
 8009404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009408:	6903      	ldr	r3, [r0, #16]
 800940a:	690c      	ldr	r4, [r1, #16]
 800940c:	42a3      	cmp	r3, r4
 800940e:	4607      	mov	r7, r0
 8009410:	db7e      	blt.n	8009510 <quorem+0x10c>
 8009412:	3c01      	subs	r4, #1
 8009414:	f101 0814 	add.w	r8, r1, #20
 8009418:	00a3      	lsls	r3, r4, #2
 800941a:	f100 0514 	add.w	r5, r0, #20
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800942a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800942e:	3301      	adds	r3, #1
 8009430:	429a      	cmp	r2, r3
 8009432:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009436:	fbb2 f6f3 	udiv	r6, r2, r3
 800943a:	d32e      	bcc.n	800949a <quorem+0x96>
 800943c:	f04f 0a00 	mov.w	sl, #0
 8009440:	46c4      	mov	ip, r8
 8009442:	46ae      	mov	lr, r5
 8009444:	46d3      	mov	fp, sl
 8009446:	f85c 3b04 	ldr.w	r3, [ip], #4
 800944a:	b298      	uxth	r0, r3
 800944c:	fb06 a000 	mla	r0, r6, r0, sl
 8009450:	0c02      	lsrs	r2, r0, #16
 8009452:	0c1b      	lsrs	r3, r3, #16
 8009454:	fb06 2303 	mla	r3, r6, r3, r2
 8009458:	f8de 2000 	ldr.w	r2, [lr]
 800945c:	b280      	uxth	r0, r0
 800945e:	b292      	uxth	r2, r2
 8009460:	1a12      	subs	r2, r2, r0
 8009462:	445a      	add	r2, fp
 8009464:	f8de 0000 	ldr.w	r0, [lr]
 8009468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800946c:	b29b      	uxth	r3, r3
 800946e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009472:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009476:	b292      	uxth	r2, r2
 8009478:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800947c:	45e1      	cmp	r9, ip
 800947e:	f84e 2b04 	str.w	r2, [lr], #4
 8009482:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009486:	d2de      	bcs.n	8009446 <quorem+0x42>
 8009488:	9b00      	ldr	r3, [sp, #0]
 800948a:	58eb      	ldr	r3, [r5, r3]
 800948c:	b92b      	cbnz	r3, 800949a <quorem+0x96>
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	3b04      	subs	r3, #4
 8009492:	429d      	cmp	r5, r3
 8009494:	461a      	mov	r2, r3
 8009496:	d32f      	bcc.n	80094f8 <quorem+0xf4>
 8009498:	613c      	str	r4, [r7, #16]
 800949a:	4638      	mov	r0, r7
 800949c:	f001 f97a 	bl	800a794 <__mcmp>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	db25      	blt.n	80094f0 <quorem+0xec>
 80094a4:	4629      	mov	r1, r5
 80094a6:	2000      	movs	r0, #0
 80094a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80094ac:	f8d1 c000 	ldr.w	ip, [r1]
 80094b0:	fa1f fe82 	uxth.w	lr, r2
 80094b4:	fa1f f38c 	uxth.w	r3, ip
 80094b8:	eba3 030e 	sub.w	r3, r3, lr
 80094bc:	4403      	add	r3, r0
 80094be:	0c12      	lsrs	r2, r2, #16
 80094c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80094c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094ce:	45c1      	cmp	r9, r8
 80094d0:	f841 3b04 	str.w	r3, [r1], #4
 80094d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094d8:	d2e6      	bcs.n	80094a8 <quorem+0xa4>
 80094da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094e2:	b922      	cbnz	r2, 80094ee <quorem+0xea>
 80094e4:	3b04      	subs	r3, #4
 80094e6:	429d      	cmp	r5, r3
 80094e8:	461a      	mov	r2, r3
 80094ea:	d30b      	bcc.n	8009504 <quorem+0x100>
 80094ec:	613c      	str	r4, [r7, #16]
 80094ee:	3601      	adds	r6, #1
 80094f0:	4630      	mov	r0, r6
 80094f2:	b003      	add	sp, #12
 80094f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f8:	6812      	ldr	r2, [r2, #0]
 80094fa:	3b04      	subs	r3, #4
 80094fc:	2a00      	cmp	r2, #0
 80094fe:	d1cb      	bne.n	8009498 <quorem+0x94>
 8009500:	3c01      	subs	r4, #1
 8009502:	e7c6      	b.n	8009492 <quorem+0x8e>
 8009504:	6812      	ldr	r2, [r2, #0]
 8009506:	3b04      	subs	r3, #4
 8009508:	2a00      	cmp	r2, #0
 800950a:	d1ef      	bne.n	80094ec <quorem+0xe8>
 800950c:	3c01      	subs	r4, #1
 800950e:	e7ea      	b.n	80094e6 <quorem+0xe2>
 8009510:	2000      	movs	r0, #0
 8009512:	e7ee      	b.n	80094f2 <quorem+0xee>
 8009514:	0000      	movs	r0, r0
	...

08009518 <_dtoa_r>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	69c7      	ldr	r7, [r0, #28]
 800951e:	b099      	sub	sp, #100	@ 0x64
 8009520:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009524:	ec55 4b10 	vmov	r4, r5, d0
 8009528:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800952a:	9109      	str	r1, [sp, #36]	@ 0x24
 800952c:	4683      	mov	fp, r0
 800952e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009530:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009532:	b97f      	cbnz	r7, 8009554 <_dtoa_r+0x3c>
 8009534:	2010      	movs	r0, #16
 8009536:	f000 fdfd 	bl	800a134 <malloc>
 800953a:	4602      	mov	r2, r0
 800953c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009540:	b920      	cbnz	r0, 800954c <_dtoa_r+0x34>
 8009542:	4ba7      	ldr	r3, [pc, #668]	@ (80097e0 <_dtoa_r+0x2c8>)
 8009544:	21ef      	movs	r1, #239	@ 0xef
 8009546:	48a7      	ldr	r0, [pc, #668]	@ (80097e4 <_dtoa_r+0x2cc>)
 8009548:	f7ff ff3e 	bl	80093c8 <__assert_func>
 800954c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009550:	6007      	str	r7, [r0, #0]
 8009552:	60c7      	str	r7, [r0, #12]
 8009554:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009558:	6819      	ldr	r1, [r3, #0]
 800955a:	b159      	cbz	r1, 8009574 <_dtoa_r+0x5c>
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	604a      	str	r2, [r1, #4]
 8009560:	2301      	movs	r3, #1
 8009562:	4093      	lsls	r3, r2
 8009564:	608b      	str	r3, [r1, #8]
 8009566:	4658      	mov	r0, fp
 8009568:	f000 feda 	bl	800a320 <_Bfree>
 800956c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	1e2b      	subs	r3, r5, #0
 8009576:	bfb9      	ittee	lt
 8009578:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800957c:	9303      	strlt	r3, [sp, #12]
 800957e:	2300      	movge	r3, #0
 8009580:	6033      	strge	r3, [r6, #0]
 8009582:	9f03      	ldr	r7, [sp, #12]
 8009584:	4b98      	ldr	r3, [pc, #608]	@ (80097e8 <_dtoa_r+0x2d0>)
 8009586:	bfbc      	itt	lt
 8009588:	2201      	movlt	r2, #1
 800958a:	6032      	strlt	r2, [r6, #0]
 800958c:	43bb      	bics	r3, r7
 800958e:	d112      	bne.n	80095b6 <_dtoa_r+0x9e>
 8009590:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009592:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800959c:	4323      	orrs	r3, r4
 800959e:	f000 854d 	beq.w	800a03c <_dtoa_r+0xb24>
 80095a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80097fc <_dtoa_r+0x2e4>
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 854f 	beq.w	800a04c <_dtoa_r+0xb34>
 80095ae:	f10a 0303 	add.w	r3, sl, #3
 80095b2:	f000 bd49 	b.w	800a048 <_dtoa_r+0xb30>
 80095b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095ba:	2200      	movs	r2, #0
 80095bc:	ec51 0b17 	vmov	r0, r1, d7
 80095c0:	2300      	movs	r3, #0
 80095c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80095c6:	f7f7 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80095ca:	4680      	mov	r8, r0
 80095cc:	b158      	cbz	r0, 80095e6 <_dtoa_r+0xce>
 80095ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095d0:	2301      	movs	r3, #1
 80095d2:	6013      	str	r3, [r2, #0]
 80095d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095d6:	b113      	cbz	r3, 80095de <_dtoa_r+0xc6>
 80095d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80095da:	4b84      	ldr	r3, [pc, #528]	@ (80097ec <_dtoa_r+0x2d4>)
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009800 <_dtoa_r+0x2e8>
 80095e2:	f000 bd33 	b.w	800a04c <_dtoa_r+0xb34>
 80095e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80095ea:	aa16      	add	r2, sp, #88	@ 0x58
 80095ec:	a917      	add	r1, sp, #92	@ 0x5c
 80095ee:	4658      	mov	r0, fp
 80095f0:	f001 f980 	bl	800a8f4 <__d2b>
 80095f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80095f8:	4681      	mov	r9, r0
 80095fa:	2e00      	cmp	r6, #0
 80095fc:	d077      	beq.n	80096ee <_dtoa_r+0x1d6>
 80095fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009600:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800960c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009610:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009614:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009618:	4619      	mov	r1, r3
 800961a:	2200      	movs	r2, #0
 800961c:	4b74      	ldr	r3, [pc, #464]	@ (80097f0 <_dtoa_r+0x2d8>)
 800961e:	f7f6 fe3b 	bl	8000298 <__aeabi_dsub>
 8009622:	a369      	add	r3, pc, #420	@ (adr r3, 80097c8 <_dtoa_r+0x2b0>)
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	f7f6 ffee 	bl	8000608 <__aeabi_dmul>
 800962c:	a368      	add	r3, pc, #416	@ (adr r3, 80097d0 <_dtoa_r+0x2b8>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f6 fe33 	bl	800029c <__adddf3>
 8009636:	4604      	mov	r4, r0
 8009638:	4630      	mov	r0, r6
 800963a:	460d      	mov	r5, r1
 800963c:	f7f6 ff7a 	bl	8000534 <__aeabi_i2d>
 8009640:	a365      	add	r3, pc, #404	@ (adr r3, 80097d8 <_dtoa_r+0x2c0>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 ffdf 	bl	8000608 <__aeabi_dmul>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4620      	mov	r0, r4
 8009650:	4629      	mov	r1, r5
 8009652:	f7f6 fe23 	bl	800029c <__adddf3>
 8009656:	4604      	mov	r4, r0
 8009658:	460d      	mov	r5, r1
 800965a:	f7f7 fa85 	bl	8000b68 <__aeabi_d2iz>
 800965e:	2200      	movs	r2, #0
 8009660:	4607      	mov	r7, r0
 8009662:	2300      	movs	r3, #0
 8009664:	4620      	mov	r0, r4
 8009666:	4629      	mov	r1, r5
 8009668:	f7f7 fa40 	bl	8000aec <__aeabi_dcmplt>
 800966c:	b140      	cbz	r0, 8009680 <_dtoa_r+0x168>
 800966e:	4638      	mov	r0, r7
 8009670:	f7f6 ff60 	bl	8000534 <__aeabi_i2d>
 8009674:	4622      	mov	r2, r4
 8009676:	462b      	mov	r3, r5
 8009678:	f7f7 fa2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800967c:	b900      	cbnz	r0, 8009680 <_dtoa_r+0x168>
 800967e:	3f01      	subs	r7, #1
 8009680:	2f16      	cmp	r7, #22
 8009682:	d851      	bhi.n	8009728 <_dtoa_r+0x210>
 8009684:	4b5b      	ldr	r3, [pc, #364]	@ (80097f4 <_dtoa_r+0x2dc>)
 8009686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800968a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009692:	f7f7 fa2b 	bl	8000aec <__aeabi_dcmplt>
 8009696:	2800      	cmp	r0, #0
 8009698:	d048      	beq.n	800972c <_dtoa_r+0x214>
 800969a:	3f01      	subs	r7, #1
 800969c:	2300      	movs	r3, #0
 800969e:	9312      	str	r3, [sp, #72]	@ 0x48
 80096a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80096a2:	1b9b      	subs	r3, r3, r6
 80096a4:	1e5a      	subs	r2, r3, #1
 80096a6:	bf44      	itt	mi
 80096a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80096ac:	2300      	movmi	r3, #0
 80096ae:	9208      	str	r2, [sp, #32]
 80096b0:	bf54      	ite	pl
 80096b2:	f04f 0800 	movpl.w	r8, #0
 80096b6:	9308      	strmi	r3, [sp, #32]
 80096b8:	2f00      	cmp	r7, #0
 80096ba:	db39      	blt.n	8009730 <_dtoa_r+0x218>
 80096bc:	9b08      	ldr	r3, [sp, #32]
 80096be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80096c0:	443b      	add	r3, r7
 80096c2:	9308      	str	r3, [sp, #32]
 80096c4:	2300      	movs	r3, #0
 80096c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80096c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ca:	2b09      	cmp	r3, #9
 80096cc:	d864      	bhi.n	8009798 <_dtoa_r+0x280>
 80096ce:	2b05      	cmp	r3, #5
 80096d0:	bfc4      	itt	gt
 80096d2:	3b04      	subgt	r3, #4
 80096d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80096d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d8:	f1a3 0302 	sub.w	r3, r3, #2
 80096dc:	bfcc      	ite	gt
 80096de:	2400      	movgt	r4, #0
 80096e0:	2401      	movle	r4, #1
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d863      	bhi.n	80097ae <_dtoa_r+0x296>
 80096e6:	e8df f003 	tbb	[pc, r3]
 80096ea:	372a      	.short	0x372a
 80096ec:	5535      	.short	0x5535
 80096ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80096f2:	441e      	add	r6, r3
 80096f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80096f8:	2b20      	cmp	r3, #32
 80096fa:	bfc1      	itttt	gt
 80096fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009700:	409f      	lslgt	r7, r3
 8009702:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009706:	fa24 f303 	lsrgt.w	r3, r4, r3
 800970a:	bfd6      	itet	le
 800970c:	f1c3 0320 	rsble	r3, r3, #32
 8009710:	ea47 0003 	orrgt.w	r0, r7, r3
 8009714:	fa04 f003 	lslle.w	r0, r4, r3
 8009718:	f7f6 fefc 	bl	8000514 <__aeabi_ui2d>
 800971c:	2201      	movs	r2, #1
 800971e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009722:	3e01      	subs	r6, #1
 8009724:	9214      	str	r2, [sp, #80]	@ 0x50
 8009726:	e777      	b.n	8009618 <_dtoa_r+0x100>
 8009728:	2301      	movs	r3, #1
 800972a:	e7b8      	b.n	800969e <_dtoa_r+0x186>
 800972c:	9012      	str	r0, [sp, #72]	@ 0x48
 800972e:	e7b7      	b.n	80096a0 <_dtoa_r+0x188>
 8009730:	427b      	negs	r3, r7
 8009732:	930a      	str	r3, [sp, #40]	@ 0x28
 8009734:	2300      	movs	r3, #0
 8009736:	eba8 0807 	sub.w	r8, r8, r7
 800973a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800973c:	e7c4      	b.n	80096c8 <_dtoa_r+0x1b0>
 800973e:	2300      	movs	r3, #0
 8009740:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009744:	2b00      	cmp	r3, #0
 8009746:	dc35      	bgt.n	80097b4 <_dtoa_r+0x29c>
 8009748:	2301      	movs	r3, #1
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	9307      	str	r3, [sp, #28]
 800974e:	461a      	mov	r2, r3
 8009750:	920e      	str	r2, [sp, #56]	@ 0x38
 8009752:	e00b      	b.n	800976c <_dtoa_r+0x254>
 8009754:	2301      	movs	r3, #1
 8009756:	e7f3      	b.n	8009740 <_dtoa_r+0x228>
 8009758:	2300      	movs	r3, #0
 800975a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800975c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800975e:	18fb      	adds	r3, r7, r3
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	3301      	adds	r3, #1
 8009764:	2b01      	cmp	r3, #1
 8009766:	9307      	str	r3, [sp, #28]
 8009768:	bfb8      	it	lt
 800976a:	2301      	movlt	r3, #1
 800976c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009770:	2100      	movs	r1, #0
 8009772:	2204      	movs	r2, #4
 8009774:	f102 0514 	add.w	r5, r2, #20
 8009778:	429d      	cmp	r5, r3
 800977a:	d91f      	bls.n	80097bc <_dtoa_r+0x2a4>
 800977c:	6041      	str	r1, [r0, #4]
 800977e:	4658      	mov	r0, fp
 8009780:	f000 fd8e 	bl	800a2a0 <_Balloc>
 8009784:	4682      	mov	sl, r0
 8009786:	2800      	cmp	r0, #0
 8009788:	d13c      	bne.n	8009804 <_dtoa_r+0x2ec>
 800978a:	4b1b      	ldr	r3, [pc, #108]	@ (80097f8 <_dtoa_r+0x2e0>)
 800978c:	4602      	mov	r2, r0
 800978e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009792:	e6d8      	b.n	8009546 <_dtoa_r+0x2e>
 8009794:	2301      	movs	r3, #1
 8009796:	e7e0      	b.n	800975a <_dtoa_r+0x242>
 8009798:	2401      	movs	r4, #1
 800979a:	2300      	movs	r3, #0
 800979c:	9309      	str	r3, [sp, #36]	@ 0x24
 800979e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80097a0:	f04f 33ff 	mov.w	r3, #4294967295
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	9307      	str	r3, [sp, #28]
 80097a8:	2200      	movs	r2, #0
 80097aa:	2312      	movs	r3, #18
 80097ac:	e7d0      	b.n	8009750 <_dtoa_r+0x238>
 80097ae:	2301      	movs	r3, #1
 80097b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097b2:	e7f5      	b.n	80097a0 <_dtoa_r+0x288>
 80097b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	9307      	str	r3, [sp, #28]
 80097ba:	e7d7      	b.n	800976c <_dtoa_r+0x254>
 80097bc:	3101      	adds	r1, #1
 80097be:	0052      	lsls	r2, r2, #1
 80097c0:	e7d8      	b.n	8009774 <_dtoa_r+0x25c>
 80097c2:	bf00      	nop
 80097c4:	f3af 8000 	nop.w
 80097c8:	636f4361 	.word	0x636f4361
 80097cc:	3fd287a7 	.word	0x3fd287a7
 80097d0:	8b60c8b3 	.word	0x8b60c8b3
 80097d4:	3fc68a28 	.word	0x3fc68a28
 80097d8:	509f79fb 	.word	0x509f79fb
 80097dc:	3fd34413 	.word	0x3fd34413
 80097e0:	0800b7c9 	.word	0x0800b7c9
 80097e4:	0800b883 	.word	0x0800b883
 80097e8:	7ff00000 	.word	0x7ff00000
 80097ec:	0800b7a6 	.word	0x0800b7a6
 80097f0:	3ff80000 	.word	0x3ff80000
 80097f4:	0800b980 	.word	0x0800b980
 80097f8:	0800b8db 	.word	0x0800b8db
 80097fc:	0800b87f 	.word	0x0800b87f
 8009800:	0800b7a5 	.word	0x0800b7a5
 8009804:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009808:	6018      	str	r0, [r3, #0]
 800980a:	9b07      	ldr	r3, [sp, #28]
 800980c:	2b0e      	cmp	r3, #14
 800980e:	f200 80a4 	bhi.w	800995a <_dtoa_r+0x442>
 8009812:	2c00      	cmp	r4, #0
 8009814:	f000 80a1 	beq.w	800995a <_dtoa_r+0x442>
 8009818:	2f00      	cmp	r7, #0
 800981a:	dd33      	ble.n	8009884 <_dtoa_r+0x36c>
 800981c:	4bad      	ldr	r3, [pc, #692]	@ (8009ad4 <_dtoa_r+0x5bc>)
 800981e:	f007 020f 	and.w	r2, r7, #15
 8009822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009826:	ed93 7b00 	vldr	d7, [r3]
 800982a:	05f8      	lsls	r0, r7, #23
 800982c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009830:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009834:	d516      	bpl.n	8009864 <_dtoa_r+0x34c>
 8009836:	4ba8      	ldr	r3, [pc, #672]	@ (8009ad8 <_dtoa_r+0x5c0>)
 8009838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800983c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009840:	f7f7 f80c 	bl	800085c <__aeabi_ddiv>
 8009844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009848:	f004 040f 	and.w	r4, r4, #15
 800984c:	2603      	movs	r6, #3
 800984e:	4da2      	ldr	r5, [pc, #648]	@ (8009ad8 <_dtoa_r+0x5c0>)
 8009850:	b954      	cbnz	r4, 8009868 <_dtoa_r+0x350>
 8009852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800985a:	f7f6 ffff 	bl	800085c <__aeabi_ddiv>
 800985e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009862:	e028      	b.n	80098b6 <_dtoa_r+0x39e>
 8009864:	2602      	movs	r6, #2
 8009866:	e7f2      	b.n	800984e <_dtoa_r+0x336>
 8009868:	07e1      	lsls	r1, r4, #31
 800986a:	d508      	bpl.n	800987e <_dtoa_r+0x366>
 800986c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009870:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009874:	f7f6 fec8 	bl	8000608 <__aeabi_dmul>
 8009878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800987c:	3601      	adds	r6, #1
 800987e:	1064      	asrs	r4, r4, #1
 8009880:	3508      	adds	r5, #8
 8009882:	e7e5      	b.n	8009850 <_dtoa_r+0x338>
 8009884:	f000 80d2 	beq.w	8009a2c <_dtoa_r+0x514>
 8009888:	427c      	negs	r4, r7
 800988a:	4b92      	ldr	r3, [pc, #584]	@ (8009ad4 <_dtoa_r+0x5bc>)
 800988c:	4d92      	ldr	r5, [pc, #584]	@ (8009ad8 <_dtoa_r+0x5c0>)
 800988e:	f004 020f 	and.w	r2, r4, #15
 8009892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800989e:	f7f6 feb3 	bl	8000608 <__aeabi_dmul>
 80098a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098a6:	1124      	asrs	r4, r4, #4
 80098a8:	2300      	movs	r3, #0
 80098aa:	2602      	movs	r6, #2
 80098ac:	2c00      	cmp	r4, #0
 80098ae:	f040 80b2 	bne.w	8009a16 <_dtoa_r+0x4fe>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1d3      	bne.n	800985e <_dtoa_r+0x346>
 80098b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 80b7 	beq.w	8009a30 <_dtoa_r+0x518>
 80098c2:	4b86      	ldr	r3, [pc, #536]	@ (8009adc <_dtoa_r+0x5c4>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	4620      	mov	r0, r4
 80098c8:	4629      	mov	r1, r5
 80098ca:	f7f7 f90f 	bl	8000aec <__aeabi_dcmplt>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f000 80ae 	beq.w	8009a30 <_dtoa_r+0x518>
 80098d4:	9b07      	ldr	r3, [sp, #28]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 80aa 	beq.w	8009a30 <_dtoa_r+0x518>
 80098dc:	9b00      	ldr	r3, [sp, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	dd37      	ble.n	8009952 <_dtoa_r+0x43a>
 80098e2:	1e7b      	subs	r3, r7, #1
 80098e4:	9304      	str	r3, [sp, #16]
 80098e6:	4620      	mov	r0, r4
 80098e8:	4b7d      	ldr	r3, [pc, #500]	@ (8009ae0 <_dtoa_r+0x5c8>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	4629      	mov	r1, r5
 80098ee:	f7f6 fe8b 	bl	8000608 <__aeabi_dmul>
 80098f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098f6:	9c00      	ldr	r4, [sp, #0]
 80098f8:	3601      	adds	r6, #1
 80098fa:	4630      	mov	r0, r6
 80098fc:	f7f6 fe1a 	bl	8000534 <__aeabi_i2d>
 8009900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009904:	f7f6 fe80 	bl	8000608 <__aeabi_dmul>
 8009908:	4b76      	ldr	r3, [pc, #472]	@ (8009ae4 <_dtoa_r+0x5cc>)
 800990a:	2200      	movs	r2, #0
 800990c:	f7f6 fcc6 	bl	800029c <__adddf3>
 8009910:	4605      	mov	r5, r0
 8009912:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009916:	2c00      	cmp	r4, #0
 8009918:	f040 808d 	bne.w	8009a36 <_dtoa_r+0x51e>
 800991c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009920:	4b71      	ldr	r3, [pc, #452]	@ (8009ae8 <_dtoa_r+0x5d0>)
 8009922:	2200      	movs	r2, #0
 8009924:	f7f6 fcb8 	bl	8000298 <__aeabi_dsub>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009930:	462a      	mov	r2, r5
 8009932:	4633      	mov	r3, r6
 8009934:	f7f7 f8f8 	bl	8000b28 <__aeabi_dcmpgt>
 8009938:	2800      	cmp	r0, #0
 800993a:	f040 828b 	bne.w	8009e54 <_dtoa_r+0x93c>
 800993e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009942:	462a      	mov	r2, r5
 8009944:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009948:	f7f7 f8d0 	bl	8000aec <__aeabi_dcmplt>
 800994c:	2800      	cmp	r0, #0
 800994e:	f040 8128 	bne.w	8009ba2 <_dtoa_r+0x68a>
 8009952:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009956:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800995a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800995c:	2b00      	cmp	r3, #0
 800995e:	f2c0 815a 	blt.w	8009c16 <_dtoa_r+0x6fe>
 8009962:	2f0e      	cmp	r7, #14
 8009964:	f300 8157 	bgt.w	8009c16 <_dtoa_r+0x6fe>
 8009968:	4b5a      	ldr	r3, [pc, #360]	@ (8009ad4 <_dtoa_r+0x5bc>)
 800996a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800996e:	ed93 7b00 	vldr	d7, [r3]
 8009972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009974:	2b00      	cmp	r3, #0
 8009976:	ed8d 7b00 	vstr	d7, [sp]
 800997a:	da03      	bge.n	8009984 <_dtoa_r+0x46c>
 800997c:	9b07      	ldr	r3, [sp, #28]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f340 8101 	ble.w	8009b86 <_dtoa_r+0x66e>
 8009984:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009988:	4656      	mov	r6, sl
 800998a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800998e:	4620      	mov	r0, r4
 8009990:	4629      	mov	r1, r5
 8009992:	f7f6 ff63 	bl	800085c <__aeabi_ddiv>
 8009996:	f7f7 f8e7 	bl	8000b68 <__aeabi_d2iz>
 800999a:	4680      	mov	r8, r0
 800999c:	f7f6 fdca 	bl	8000534 <__aeabi_i2d>
 80099a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099a4:	f7f6 fe30 	bl	8000608 <__aeabi_dmul>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4620      	mov	r0, r4
 80099ae:	4629      	mov	r1, r5
 80099b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099b4:	f7f6 fc70 	bl	8000298 <__aeabi_dsub>
 80099b8:	f806 4b01 	strb.w	r4, [r6], #1
 80099bc:	9d07      	ldr	r5, [sp, #28]
 80099be:	eba6 040a 	sub.w	r4, r6, sl
 80099c2:	42a5      	cmp	r5, r4
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	f040 8117 	bne.w	8009bfa <_dtoa_r+0x6e2>
 80099cc:	f7f6 fc66 	bl	800029c <__adddf3>
 80099d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099d4:	4604      	mov	r4, r0
 80099d6:	460d      	mov	r5, r1
 80099d8:	f7f7 f8a6 	bl	8000b28 <__aeabi_dcmpgt>
 80099dc:	2800      	cmp	r0, #0
 80099de:	f040 80f9 	bne.w	8009bd4 <_dtoa_r+0x6bc>
 80099e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099e6:	4620      	mov	r0, r4
 80099e8:	4629      	mov	r1, r5
 80099ea:	f7f7 f875 	bl	8000ad8 <__aeabi_dcmpeq>
 80099ee:	b118      	cbz	r0, 80099f8 <_dtoa_r+0x4e0>
 80099f0:	f018 0f01 	tst.w	r8, #1
 80099f4:	f040 80ee 	bne.w	8009bd4 <_dtoa_r+0x6bc>
 80099f8:	4649      	mov	r1, r9
 80099fa:	4658      	mov	r0, fp
 80099fc:	f000 fc90 	bl	800a320 <_Bfree>
 8009a00:	2300      	movs	r3, #0
 8009a02:	7033      	strb	r3, [r6, #0]
 8009a04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a06:	3701      	adds	r7, #1
 8009a08:	601f      	str	r7, [r3, #0]
 8009a0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 831d 	beq.w	800a04c <_dtoa_r+0xb34>
 8009a12:	601e      	str	r6, [r3, #0]
 8009a14:	e31a      	b.n	800a04c <_dtoa_r+0xb34>
 8009a16:	07e2      	lsls	r2, r4, #31
 8009a18:	d505      	bpl.n	8009a26 <_dtoa_r+0x50e>
 8009a1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a1e:	f7f6 fdf3 	bl	8000608 <__aeabi_dmul>
 8009a22:	3601      	adds	r6, #1
 8009a24:	2301      	movs	r3, #1
 8009a26:	1064      	asrs	r4, r4, #1
 8009a28:	3508      	adds	r5, #8
 8009a2a:	e73f      	b.n	80098ac <_dtoa_r+0x394>
 8009a2c:	2602      	movs	r6, #2
 8009a2e:	e742      	b.n	80098b6 <_dtoa_r+0x39e>
 8009a30:	9c07      	ldr	r4, [sp, #28]
 8009a32:	9704      	str	r7, [sp, #16]
 8009a34:	e761      	b.n	80098fa <_dtoa_r+0x3e2>
 8009a36:	4b27      	ldr	r3, [pc, #156]	@ (8009ad4 <_dtoa_r+0x5bc>)
 8009a38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a42:	4454      	add	r4, sl
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d053      	beq.n	8009af0 <_dtoa_r+0x5d8>
 8009a48:	4928      	ldr	r1, [pc, #160]	@ (8009aec <_dtoa_r+0x5d4>)
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	f7f6 ff06 	bl	800085c <__aeabi_ddiv>
 8009a50:	4633      	mov	r3, r6
 8009a52:	462a      	mov	r2, r5
 8009a54:	f7f6 fc20 	bl	8000298 <__aeabi_dsub>
 8009a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a5c:	4656      	mov	r6, sl
 8009a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a62:	f7f7 f881 	bl	8000b68 <__aeabi_d2iz>
 8009a66:	4605      	mov	r5, r0
 8009a68:	f7f6 fd64 	bl	8000534 <__aeabi_i2d>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a74:	f7f6 fc10 	bl	8000298 <__aeabi_dsub>
 8009a78:	3530      	adds	r5, #48	@ 0x30
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a82:	f806 5b01 	strb.w	r5, [r6], #1
 8009a86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a8a:	f7f7 f82f 	bl	8000aec <__aeabi_dcmplt>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d171      	bne.n	8009b76 <_dtoa_r+0x65e>
 8009a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a96:	4911      	ldr	r1, [pc, #68]	@ (8009adc <_dtoa_r+0x5c4>)
 8009a98:	2000      	movs	r0, #0
 8009a9a:	f7f6 fbfd 	bl	8000298 <__aeabi_dsub>
 8009a9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009aa2:	f7f7 f823 	bl	8000aec <__aeabi_dcmplt>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	f040 8095 	bne.w	8009bd6 <_dtoa_r+0x6be>
 8009aac:	42a6      	cmp	r6, r4
 8009aae:	f43f af50 	beq.w	8009952 <_dtoa_r+0x43a>
 8009ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae0 <_dtoa_r+0x5c8>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f7f6 fda5 	bl	8000608 <__aeabi_dmul>
 8009abe:	4b08      	ldr	r3, [pc, #32]	@ (8009ae0 <_dtoa_r+0x5c8>)
 8009ac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aca:	f7f6 fd9d 	bl	8000608 <__aeabi_dmul>
 8009ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ad2:	e7c4      	b.n	8009a5e <_dtoa_r+0x546>
 8009ad4:	0800b980 	.word	0x0800b980
 8009ad8:	0800b958 	.word	0x0800b958
 8009adc:	3ff00000 	.word	0x3ff00000
 8009ae0:	40240000 	.word	0x40240000
 8009ae4:	401c0000 	.word	0x401c0000
 8009ae8:	40140000 	.word	0x40140000
 8009aec:	3fe00000 	.word	0x3fe00000
 8009af0:	4631      	mov	r1, r6
 8009af2:	4628      	mov	r0, r5
 8009af4:	f7f6 fd88 	bl	8000608 <__aeabi_dmul>
 8009af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009afc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009afe:	4656      	mov	r6, sl
 8009b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b04:	f7f7 f830 	bl	8000b68 <__aeabi_d2iz>
 8009b08:	4605      	mov	r5, r0
 8009b0a:	f7f6 fd13 	bl	8000534 <__aeabi_i2d>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b16:	f7f6 fbbf 	bl	8000298 <__aeabi_dsub>
 8009b1a:	3530      	adds	r5, #48	@ 0x30
 8009b1c:	f806 5b01 	strb.w	r5, [r6], #1
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	42a6      	cmp	r6, r4
 8009b26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b2a:	f04f 0200 	mov.w	r2, #0
 8009b2e:	d124      	bne.n	8009b7a <_dtoa_r+0x662>
 8009b30:	4bac      	ldr	r3, [pc, #688]	@ (8009de4 <_dtoa_r+0x8cc>)
 8009b32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b36:	f7f6 fbb1 	bl	800029c <__adddf3>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b42:	f7f6 fff1 	bl	8000b28 <__aeabi_dcmpgt>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d145      	bne.n	8009bd6 <_dtoa_r+0x6be>
 8009b4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b4e:	49a5      	ldr	r1, [pc, #660]	@ (8009de4 <_dtoa_r+0x8cc>)
 8009b50:	2000      	movs	r0, #0
 8009b52:	f7f6 fba1 	bl	8000298 <__aeabi_dsub>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b5e:	f7f6 ffc5 	bl	8000aec <__aeabi_dcmplt>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	f43f aef5 	beq.w	8009952 <_dtoa_r+0x43a>
 8009b68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009b6a:	1e73      	subs	r3, r6, #1
 8009b6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b72:	2b30      	cmp	r3, #48	@ 0x30
 8009b74:	d0f8      	beq.n	8009b68 <_dtoa_r+0x650>
 8009b76:	9f04      	ldr	r7, [sp, #16]
 8009b78:	e73e      	b.n	80099f8 <_dtoa_r+0x4e0>
 8009b7a:	4b9b      	ldr	r3, [pc, #620]	@ (8009de8 <_dtoa_r+0x8d0>)
 8009b7c:	f7f6 fd44 	bl	8000608 <__aeabi_dmul>
 8009b80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b84:	e7bc      	b.n	8009b00 <_dtoa_r+0x5e8>
 8009b86:	d10c      	bne.n	8009ba2 <_dtoa_r+0x68a>
 8009b88:	4b98      	ldr	r3, [pc, #608]	@ (8009dec <_dtoa_r+0x8d4>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b90:	f7f6 fd3a 	bl	8000608 <__aeabi_dmul>
 8009b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b98:	f7f6 ffbc 	bl	8000b14 <__aeabi_dcmpge>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	f000 8157 	beq.w	8009e50 <_dtoa_r+0x938>
 8009ba2:	2400      	movs	r4, #0
 8009ba4:	4625      	mov	r5, r4
 8009ba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ba8:	43db      	mvns	r3, r3
 8009baa:	9304      	str	r3, [sp, #16]
 8009bac:	4656      	mov	r6, sl
 8009bae:	2700      	movs	r7, #0
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	4658      	mov	r0, fp
 8009bb4:	f000 fbb4 	bl	800a320 <_Bfree>
 8009bb8:	2d00      	cmp	r5, #0
 8009bba:	d0dc      	beq.n	8009b76 <_dtoa_r+0x65e>
 8009bbc:	b12f      	cbz	r7, 8009bca <_dtoa_r+0x6b2>
 8009bbe:	42af      	cmp	r7, r5
 8009bc0:	d003      	beq.n	8009bca <_dtoa_r+0x6b2>
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	4658      	mov	r0, fp
 8009bc6:	f000 fbab 	bl	800a320 <_Bfree>
 8009bca:	4629      	mov	r1, r5
 8009bcc:	4658      	mov	r0, fp
 8009bce:	f000 fba7 	bl	800a320 <_Bfree>
 8009bd2:	e7d0      	b.n	8009b76 <_dtoa_r+0x65e>
 8009bd4:	9704      	str	r7, [sp, #16]
 8009bd6:	4633      	mov	r3, r6
 8009bd8:	461e      	mov	r6, r3
 8009bda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bde:	2a39      	cmp	r2, #57	@ 0x39
 8009be0:	d107      	bne.n	8009bf2 <_dtoa_r+0x6da>
 8009be2:	459a      	cmp	sl, r3
 8009be4:	d1f8      	bne.n	8009bd8 <_dtoa_r+0x6c0>
 8009be6:	9a04      	ldr	r2, [sp, #16]
 8009be8:	3201      	adds	r2, #1
 8009bea:	9204      	str	r2, [sp, #16]
 8009bec:	2230      	movs	r2, #48	@ 0x30
 8009bee:	f88a 2000 	strb.w	r2, [sl]
 8009bf2:	781a      	ldrb	r2, [r3, #0]
 8009bf4:	3201      	adds	r2, #1
 8009bf6:	701a      	strb	r2, [r3, #0]
 8009bf8:	e7bd      	b.n	8009b76 <_dtoa_r+0x65e>
 8009bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8009de8 <_dtoa_r+0x8d0>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f7f6 fd03 	bl	8000608 <__aeabi_dmul>
 8009c02:	2200      	movs	r2, #0
 8009c04:	2300      	movs	r3, #0
 8009c06:	4604      	mov	r4, r0
 8009c08:	460d      	mov	r5, r1
 8009c0a:	f7f6 ff65 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f43f aebb 	beq.w	800998a <_dtoa_r+0x472>
 8009c14:	e6f0      	b.n	80099f8 <_dtoa_r+0x4e0>
 8009c16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c18:	2a00      	cmp	r2, #0
 8009c1a:	f000 80db 	beq.w	8009dd4 <_dtoa_r+0x8bc>
 8009c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c20:	2a01      	cmp	r2, #1
 8009c22:	f300 80bf 	bgt.w	8009da4 <_dtoa_r+0x88c>
 8009c26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009c28:	2a00      	cmp	r2, #0
 8009c2a:	f000 80b7 	beq.w	8009d9c <_dtoa_r+0x884>
 8009c2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c34:	4646      	mov	r6, r8
 8009c36:	9a08      	ldr	r2, [sp, #32]
 8009c38:	2101      	movs	r1, #1
 8009c3a:	441a      	add	r2, r3
 8009c3c:	4658      	mov	r0, fp
 8009c3e:	4498      	add	r8, r3
 8009c40:	9208      	str	r2, [sp, #32]
 8009c42:	f000 fc21 	bl	800a488 <__i2b>
 8009c46:	4605      	mov	r5, r0
 8009c48:	b15e      	cbz	r6, 8009c62 <_dtoa_r+0x74a>
 8009c4a:	9b08      	ldr	r3, [sp, #32]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	dd08      	ble.n	8009c62 <_dtoa_r+0x74a>
 8009c50:	42b3      	cmp	r3, r6
 8009c52:	9a08      	ldr	r2, [sp, #32]
 8009c54:	bfa8      	it	ge
 8009c56:	4633      	movge	r3, r6
 8009c58:	eba8 0803 	sub.w	r8, r8, r3
 8009c5c:	1af6      	subs	r6, r6, r3
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	9308      	str	r3, [sp, #32]
 8009c62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c64:	b1f3      	cbz	r3, 8009ca4 <_dtoa_r+0x78c>
 8009c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 80b7 	beq.w	8009ddc <_dtoa_r+0x8c4>
 8009c6e:	b18c      	cbz	r4, 8009c94 <_dtoa_r+0x77c>
 8009c70:	4629      	mov	r1, r5
 8009c72:	4622      	mov	r2, r4
 8009c74:	4658      	mov	r0, fp
 8009c76:	f000 fcc7 	bl	800a608 <__pow5mult>
 8009c7a:	464a      	mov	r2, r9
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	4605      	mov	r5, r0
 8009c80:	4658      	mov	r0, fp
 8009c82:	f000 fc17 	bl	800a4b4 <__multiply>
 8009c86:	4649      	mov	r1, r9
 8009c88:	9004      	str	r0, [sp, #16]
 8009c8a:	4658      	mov	r0, fp
 8009c8c:	f000 fb48 	bl	800a320 <_Bfree>
 8009c90:	9b04      	ldr	r3, [sp, #16]
 8009c92:	4699      	mov	r9, r3
 8009c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c96:	1b1a      	subs	r2, r3, r4
 8009c98:	d004      	beq.n	8009ca4 <_dtoa_r+0x78c>
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	4658      	mov	r0, fp
 8009c9e:	f000 fcb3 	bl	800a608 <__pow5mult>
 8009ca2:	4681      	mov	r9, r0
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	4658      	mov	r0, fp
 8009ca8:	f000 fbee 	bl	800a488 <__i2b>
 8009cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cae:	4604      	mov	r4, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f000 81cf 	beq.w	800a054 <_dtoa_r+0xb3c>
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	4601      	mov	r1, r0
 8009cba:	4658      	mov	r0, fp
 8009cbc:	f000 fca4 	bl	800a608 <__pow5mult>
 8009cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	f300 8095 	bgt.w	8009df4 <_dtoa_r+0x8dc>
 8009cca:	9b02      	ldr	r3, [sp, #8]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f040 8087 	bne.w	8009de0 <_dtoa_r+0x8c8>
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f040 8089 	bne.w	8009df0 <_dtoa_r+0x8d8>
 8009cde:	9b03      	ldr	r3, [sp, #12]
 8009ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ce4:	0d1b      	lsrs	r3, r3, #20
 8009ce6:	051b      	lsls	r3, r3, #20
 8009ce8:	b12b      	cbz	r3, 8009cf6 <_dtoa_r+0x7de>
 8009cea:	9b08      	ldr	r3, [sp, #32]
 8009cec:	3301      	adds	r3, #1
 8009cee:	9308      	str	r3, [sp, #32]
 8009cf0:	f108 0801 	add.w	r8, r8, #1
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 81b0 	beq.w	800a060 <_dtoa_r+0xb48>
 8009d00:	6923      	ldr	r3, [r4, #16]
 8009d02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d06:	6918      	ldr	r0, [r3, #16]
 8009d08:	f000 fb72 	bl	800a3f0 <__hi0bits>
 8009d0c:	f1c0 0020 	rsb	r0, r0, #32
 8009d10:	9b08      	ldr	r3, [sp, #32]
 8009d12:	4418      	add	r0, r3
 8009d14:	f010 001f 	ands.w	r0, r0, #31
 8009d18:	d077      	beq.n	8009e0a <_dtoa_r+0x8f2>
 8009d1a:	f1c0 0320 	rsb	r3, r0, #32
 8009d1e:	2b04      	cmp	r3, #4
 8009d20:	dd6b      	ble.n	8009dfa <_dtoa_r+0x8e2>
 8009d22:	9b08      	ldr	r3, [sp, #32]
 8009d24:	f1c0 001c 	rsb	r0, r0, #28
 8009d28:	4403      	add	r3, r0
 8009d2a:	4480      	add	r8, r0
 8009d2c:	4406      	add	r6, r0
 8009d2e:	9308      	str	r3, [sp, #32]
 8009d30:	f1b8 0f00 	cmp.w	r8, #0
 8009d34:	dd05      	ble.n	8009d42 <_dtoa_r+0x82a>
 8009d36:	4649      	mov	r1, r9
 8009d38:	4642      	mov	r2, r8
 8009d3a:	4658      	mov	r0, fp
 8009d3c:	f000 fcbe 	bl	800a6bc <__lshift>
 8009d40:	4681      	mov	r9, r0
 8009d42:	9b08      	ldr	r3, [sp, #32]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	dd05      	ble.n	8009d54 <_dtoa_r+0x83c>
 8009d48:	4621      	mov	r1, r4
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	4658      	mov	r0, fp
 8009d4e:	f000 fcb5 	bl	800a6bc <__lshift>
 8009d52:	4604      	mov	r4, r0
 8009d54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d059      	beq.n	8009e0e <_dtoa_r+0x8f6>
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	4648      	mov	r0, r9
 8009d5e:	f000 fd19 	bl	800a794 <__mcmp>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	da53      	bge.n	8009e0e <_dtoa_r+0x8f6>
 8009d66:	1e7b      	subs	r3, r7, #1
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	220a      	movs	r2, #10
 8009d70:	4658      	mov	r0, fp
 8009d72:	f000 faf7 	bl	800a364 <__multadd>
 8009d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d78:	4681      	mov	r9, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 8172 	beq.w	800a064 <_dtoa_r+0xb4c>
 8009d80:	2300      	movs	r3, #0
 8009d82:	4629      	mov	r1, r5
 8009d84:	220a      	movs	r2, #10
 8009d86:	4658      	mov	r0, fp
 8009d88:	f000 faec 	bl	800a364 <__multadd>
 8009d8c:	9b00      	ldr	r3, [sp, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	4605      	mov	r5, r0
 8009d92:	dc67      	bgt.n	8009e64 <_dtoa_r+0x94c>
 8009d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	dc41      	bgt.n	8009e1e <_dtoa_r+0x906>
 8009d9a:	e063      	b.n	8009e64 <_dtoa_r+0x94c>
 8009d9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009da2:	e746      	b.n	8009c32 <_dtoa_r+0x71a>
 8009da4:	9b07      	ldr	r3, [sp, #28]
 8009da6:	1e5c      	subs	r4, r3, #1
 8009da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009daa:	42a3      	cmp	r3, r4
 8009dac:	bfbf      	itttt	lt
 8009dae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009db0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009db2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009db4:	1ae3      	sublt	r3, r4, r3
 8009db6:	bfb4      	ite	lt
 8009db8:	18d2      	addlt	r2, r2, r3
 8009dba:	1b1c      	subge	r4, r3, r4
 8009dbc:	9b07      	ldr	r3, [sp, #28]
 8009dbe:	bfbc      	itt	lt
 8009dc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009dc2:	2400      	movlt	r4, #0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	bfb5      	itete	lt
 8009dc8:	eba8 0603 	sublt.w	r6, r8, r3
 8009dcc:	9b07      	ldrge	r3, [sp, #28]
 8009dce:	2300      	movlt	r3, #0
 8009dd0:	4646      	movge	r6, r8
 8009dd2:	e730      	b.n	8009c36 <_dtoa_r+0x71e>
 8009dd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009dd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009dd8:	4646      	mov	r6, r8
 8009dda:	e735      	b.n	8009c48 <_dtoa_r+0x730>
 8009ddc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dde:	e75c      	b.n	8009c9a <_dtoa_r+0x782>
 8009de0:	2300      	movs	r3, #0
 8009de2:	e788      	b.n	8009cf6 <_dtoa_r+0x7de>
 8009de4:	3fe00000 	.word	0x3fe00000
 8009de8:	40240000 	.word	0x40240000
 8009dec:	40140000 	.word	0x40140000
 8009df0:	9b02      	ldr	r3, [sp, #8]
 8009df2:	e780      	b.n	8009cf6 <_dtoa_r+0x7de>
 8009df4:	2300      	movs	r3, #0
 8009df6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009df8:	e782      	b.n	8009d00 <_dtoa_r+0x7e8>
 8009dfa:	d099      	beq.n	8009d30 <_dtoa_r+0x818>
 8009dfc:	9a08      	ldr	r2, [sp, #32]
 8009dfe:	331c      	adds	r3, #28
 8009e00:	441a      	add	r2, r3
 8009e02:	4498      	add	r8, r3
 8009e04:	441e      	add	r6, r3
 8009e06:	9208      	str	r2, [sp, #32]
 8009e08:	e792      	b.n	8009d30 <_dtoa_r+0x818>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	e7f6      	b.n	8009dfc <_dtoa_r+0x8e4>
 8009e0e:	9b07      	ldr	r3, [sp, #28]
 8009e10:	9704      	str	r7, [sp, #16]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dc20      	bgt.n	8009e58 <_dtoa_r+0x940>
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	dd1e      	ble.n	8009e5c <_dtoa_r+0x944>
 8009e1e:	9b00      	ldr	r3, [sp, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f47f aec0 	bne.w	8009ba6 <_dtoa_r+0x68e>
 8009e26:	4621      	mov	r1, r4
 8009e28:	2205      	movs	r2, #5
 8009e2a:	4658      	mov	r0, fp
 8009e2c:	f000 fa9a 	bl	800a364 <__multadd>
 8009e30:	4601      	mov	r1, r0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4648      	mov	r0, r9
 8009e36:	f000 fcad 	bl	800a794 <__mcmp>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	f77f aeb3 	ble.w	8009ba6 <_dtoa_r+0x68e>
 8009e40:	4656      	mov	r6, sl
 8009e42:	2331      	movs	r3, #49	@ 0x31
 8009e44:	f806 3b01 	strb.w	r3, [r6], #1
 8009e48:	9b04      	ldr	r3, [sp, #16]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	9304      	str	r3, [sp, #16]
 8009e4e:	e6ae      	b.n	8009bae <_dtoa_r+0x696>
 8009e50:	9c07      	ldr	r4, [sp, #28]
 8009e52:	9704      	str	r7, [sp, #16]
 8009e54:	4625      	mov	r5, r4
 8009e56:	e7f3      	b.n	8009e40 <_dtoa_r+0x928>
 8009e58:	9b07      	ldr	r3, [sp, #28]
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 8104 	beq.w	800a06c <_dtoa_r+0xb54>
 8009e64:	2e00      	cmp	r6, #0
 8009e66:	dd05      	ble.n	8009e74 <_dtoa_r+0x95c>
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4632      	mov	r2, r6
 8009e6c:	4658      	mov	r0, fp
 8009e6e:	f000 fc25 	bl	800a6bc <__lshift>
 8009e72:	4605      	mov	r5, r0
 8009e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d05a      	beq.n	8009f30 <_dtoa_r+0xa18>
 8009e7a:	6869      	ldr	r1, [r5, #4]
 8009e7c:	4658      	mov	r0, fp
 8009e7e:	f000 fa0f 	bl	800a2a0 <_Balloc>
 8009e82:	4606      	mov	r6, r0
 8009e84:	b928      	cbnz	r0, 8009e92 <_dtoa_r+0x97a>
 8009e86:	4b84      	ldr	r3, [pc, #528]	@ (800a098 <_dtoa_r+0xb80>)
 8009e88:	4602      	mov	r2, r0
 8009e8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e8e:	f7ff bb5a 	b.w	8009546 <_dtoa_r+0x2e>
 8009e92:	692a      	ldr	r2, [r5, #16]
 8009e94:	3202      	adds	r2, #2
 8009e96:	0092      	lsls	r2, r2, #2
 8009e98:	f105 010c 	add.w	r1, r5, #12
 8009e9c:	300c      	adds	r0, #12
 8009e9e:	f7ff fa84 	bl	80093aa <memcpy>
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4658      	mov	r0, fp
 8009ea8:	f000 fc08 	bl	800a6bc <__lshift>
 8009eac:	f10a 0301 	add.w	r3, sl, #1
 8009eb0:	9307      	str	r3, [sp, #28]
 8009eb2:	9b00      	ldr	r3, [sp, #0]
 8009eb4:	4453      	add	r3, sl
 8009eb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009eb8:	9b02      	ldr	r3, [sp, #8]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	462f      	mov	r7, r5
 8009ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	9b07      	ldr	r3, [sp, #28]
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	4648      	mov	r0, r9
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	f7ff fa99 	bl	8009404 <quorem>
 8009ed2:	4639      	mov	r1, r7
 8009ed4:	9002      	str	r0, [sp, #8]
 8009ed6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009eda:	4648      	mov	r0, r9
 8009edc:	f000 fc5a 	bl	800a794 <__mcmp>
 8009ee0:	462a      	mov	r2, r5
 8009ee2:	9008      	str	r0, [sp, #32]
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	4658      	mov	r0, fp
 8009ee8:	f000 fc70 	bl	800a7cc <__mdiff>
 8009eec:	68c2      	ldr	r2, [r0, #12]
 8009eee:	4606      	mov	r6, r0
 8009ef0:	bb02      	cbnz	r2, 8009f34 <_dtoa_r+0xa1c>
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	4648      	mov	r0, r9
 8009ef6:	f000 fc4d 	bl	800a794 <__mcmp>
 8009efa:	4602      	mov	r2, r0
 8009efc:	4631      	mov	r1, r6
 8009efe:	4658      	mov	r0, fp
 8009f00:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f02:	f000 fa0d 	bl	800a320 <_Bfree>
 8009f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f0a:	9e07      	ldr	r6, [sp, #28]
 8009f0c:	ea43 0102 	orr.w	r1, r3, r2
 8009f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f12:	4319      	orrs	r1, r3
 8009f14:	d110      	bne.n	8009f38 <_dtoa_r+0xa20>
 8009f16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f1a:	d029      	beq.n	8009f70 <_dtoa_r+0xa58>
 8009f1c:	9b08      	ldr	r3, [sp, #32]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	dd02      	ble.n	8009f28 <_dtoa_r+0xa10>
 8009f22:	9b02      	ldr	r3, [sp, #8]
 8009f24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009f28:	9b00      	ldr	r3, [sp, #0]
 8009f2a:	f883 8000 	strb.w	r8, [r3]
 8009f2e:	e63f      	b.n	8009bb0 <_dtoa_r+0x698>
 8009f30:	4628      	mov	r0, r5
 8009f32:	e7bb      	b.n	8009eac <_dtoa_r+0x994>
 8009f34:	2201      	movs	r2, #1
 8009f36:	e7e1      	b.n	8009efc <_dtoa_r+0x9e4>
 8009f38:	9b08      	ldr	r3, [sp, #32]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	db04      	blt.n	8009f48 <_dtoa_r+0xa30>
 8009f3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f40:	430b      	orrs	r3, r1
 8009f42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f44:	430b      	orrs	r3, r1
 8009f46:	d120      	bne.n	8009f8a <_dtoa_r+0xa72>
 8009f48:	2a00      	cmp	r2, #0
 8009f4a:	dded      	ble.n	8009f28 <_dtoa_r+0xa10>
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	2201      	movs	r2, #1
 8009f50:	4658      	mov	r0, fp
 8009f52:	f000 fbb3 	bl	800a6bc <__lshift>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4681      	mov	r9, r0
 8009f5a:	f000 fc1b 	bl	800a794 <__mcmp>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	dc03      	bgt.n	8009f6a <_dtoa_r+0xa52>
 8009f62:	d1e1      	bne.n	8009f28 <_dtoa_r+0xa10>
 8009f64:	f018 0f01 	tst.w	r8, #1
 8009f68:	d0de      	beq.n	8009f28 <_dtoa_r+0xa10>
 8009f6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f6e:	d1d8      	bne.n	8009f22 <_dtoa_r+0xa0a>
 8009f70:	9a00      	ldr	r2, [sp, #0]
 8009f72:	2339      	movs	r3, #57	@ 0x39
 8009f74:	7013      	strb	r3, [r2, #0]
 8009f76:	4633      	mov	r3, r6
 8009f78:	461e      	mov	r6, r3
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f80:	2a39      	cmp	r2, #57	@ 0x39
 8009f82:	d052      	beq.n	800a02a <_dtoa_r+0xb12>
 8009f84:	3201      	adds	r2, #1
 8009f86:	701a      	strb	r2, [r3, #0]
 8009f88:	e612      	b.n	8009bb0 <_dtoa_r+0x698>
 8009f8a:	2a00      	cmp	r2, #0
 8009f8c:	dd07      	ble.n	8009f9e <_dtoa_r+0xa86>
 8009f8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f92:	d0ed      	beq.n	8009f70 <_dtoa_r+0xa58>
 8009f94:	9a00      	ldr	r2, [sp, #0]
 8009f96:	f108 0301 	add.w	r3, r8, #1
 8009f9a:	7013      	strb	r3, [r2, #0]
 8009f9c:	e608      	b.n	8009bb0 <_dtoa_r+0x698>
 8009f9e:	9b07      	ldr	r3, [sp, #28]
 8009fa0:	9a07      	ldr	r2, [sp, #28]
 8009fa2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d028      	beq.n	8009ffe <_dtoa_r+0xae6>
 8009fac:	4649      	mov	r1, r9
 8009fae:	2300      	movs	r3, #0
 8009fb0:	220a      	movs	r2, #10
 8009fb2:	4658      	mov	r0, fp
 8009fb4:	f000 f9d6 	bl	800a364 <__multadd>
 8009fb8:	42af      	cmp	r7, r5
 8009fba:	4681      	mov	r9, r0
 8009fbc:	f04f 0300 	mov.w	r3, #0
 8009fc0:	f04f 020a 	mov.w	r2, #10
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4658      	mov	r0, fp
 8009fc8:	d107      	bne.n	8009fda <_dtoa_r+0xac2>
 8009fca:	f000 f9cb 	bl	800a364 <__multadd>
 8009fce:	4607      	mov	r7, r0
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	9b07      	ldr	r3, [sp, #28]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	9307      	str	r3, [sp, #28]
 8009fd8:	e774      	b.n	8009ec4 <_dtoa_r+0x9ac>
 8009fda:	f000 f9c3 	bl	800a364 <__multadd>
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	220a      	movs	r2, #10
 8009fe6:	4658      	mov	r0, fp
 8009fe8:	f000 f9bc 	bl	800a364 <__multadd>
 8009fec:	4605      	mov	r5, r0
 8009fee:	e7f0      	b.n	8009fd2 <_dtoa_r+0xaba>
 8009ff0:	9b00      	ldr	r3, [sp, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	bfcc      	ite	gt
 8009ff6:	461e      	movgt	r6, r3
 8009ff8:	2601      	movle	r6, #1
 8009ffa:	4456      	add	r6, sl
 8009ffc:	2700      	movs	r7, #0
 8009ffe:	4649      	mov	r1, r9
 800a000:	2201      	movs	r2, #1
 800a002:	4658      	mov	r0, fp
 800a004:	f000 fb5a 	bl	800a6bc <__lshift>
 800a008:	4621      	mov	r1, r4
 800a00a:	4681      	mov	r9, r0
 800a00c:	f000 fbc2 	bl	800a794 <__mcmp>
 800a010:	2800      	cmp	r0, #0
 800a012:	dcb0      	bgt.n	8009f76 <_dtoa_r+0xa5e>
 800a014:	d102      	bne.n	800a01c <_dtoa_r+0xb04>
 800a016:	f018 0f01 	tst.w	r8, #1
 800a01a:	d1ac      	bne.n	8009f76 <_dtoa_r+0xa5e>
 800a01c:	4633      	mov	r3, r6
 800a01e:	461e      	mov	r6, r3
 800a020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a024:	2a30      	cmp	r2, #48	@ 0x30
 800a026:	d0fa      	beq.n	800a01e <_dtoa_r+0xb06>
 800a028:	e5c2      	b.n	8009bb0 <_dtoa_r+0x698>
 800a02a:	459a      	cmp	sl, r3
 800a02c:	d1a4      	bne.n	8009f78 <_dtoa_r+0xa60>
 800a02e:	9b04      	ldr	r3, [sp, #16]
 800a030:	3301      	adds	r3, #1
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	2331      	movs	r3, #49	@ 0x31
 800a036:	f88a 3000 	strb.w	r3, [sl]
 800a03a:	e5b9      	b.n	8009bb0 <_dtoa_r+0x698>
 800a03c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a03e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a09c <_dtoa_r+0xb84>
 800a042:	b11b      	cbz	r3, 800a04c <_dtoa_r+0xb34>
 800a044:	f10a 0308 	add.w	r3, sl, #8
 800a048:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a04a:	6013      	str	r3, [r2, #0]
 800a04c:	4650      	mov	r0, sl
 800a04e:	b019      	add	sp, #100	@ 0x64
 800a050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a056:	2b01      	cmp	r3, #1
 800a058:	f77f ae37 	ble.w	8009cca <_dtoa_r+0x7b2>
 800a05c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a05e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a060:	2001      	movs	r0, #1
 800a062:	e655      	b.n	8009d10 <_dtoa_r+0x7f8>
 800a064:	9b00      	ldr	r3, [sp, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	f77f aed6 	ble.w	8009e18 <_dtoa_r+0x900>
 800a06c:	4656      	mov	r6, sl
 800a06e:	4621      	mov	r1, r4
 800a070:	4648      	mov	r0, r9
 800a072:	f7ff f9c7 	bl	8009404 <quorem>
 800a076:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a07a:	f806 8b01 	strb.w	r8, [r6], #1
 800a07e:	9b00      	ldr	r3, [sp, #0]
 800a080:	eba6 020a 	sub.w	r2, r6, sl
 800a084:	4293      	cmp	r3, r2
 800a086:	ddb3      	ble.n	8009ff0 <_dtoa_r+0xad8>
 800a088:	4649      	mov	r1, r9
 800a08a:	2300      	movs	r3, #0
 800a08c:	220a      	movs	r2, #10
 800a08e:	4658      	mov	r0, fp
 800a090:	f000 f968 	bl	800a364 <__multadd>
 800a094:	4681      	mov	r9, r0
 800a096:	e7ea      	b.n	800a06e <_dtoa_r+0xb56>
 800a098:	0800b8db 	.word	0x0800b8db
 800a09c:	0800b876 	.word	0x0800b876

0800a0a0 <_free_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	2900      	cmp	r1, #0
 800a0a6:	d041      	beq.n	800a12c <_free_r+0x8c>
 800a0a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ac:	1f0c      	subs	r4, r1, #4
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	bfb8      	it	lt
 800a0b2:	18e4      	addlt	r4, r4, r3
 800a0b4:	f000 f8e8 	bl	800a288 <__malloc_lock>
 800a0b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a130 <_free_r+0x90>)
 800a0ba:	6813      	ldr	r3, [r2, #0]
 800a0bc:	b933      	cbnz	r3, 800a0cc <_free_r+0x2c>
 800a0be:	6063      	str	r3, [r4, #4]
 800a0c0:	6014      	str	r4, [r2, #0]
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0c8:	f000 b8e4 	b.w	800a294 <__malloc_unlock>
 800a0cc:	42a3      	cmp	r3, r4
 800a0ce:	d908      	bls.n	800a0e2 <_free_r+0x42>
 800a0d0:	6820      	ldr	r0, [r4, #0]
 800a0d2:	1821      	adds	r1, r4, r0
 800a0d4:	428b      	cmp	r3, r1
 800a0d6:	bf01      	itttt	eq
 800a0d8:	6819      	ldreq	r1, [r3, #0]
 800a0da:	685b      	ldreq	r3, [r3, #4]
 800a0dc:	1809      	addeq	r1, r1, r0
 800a0de:	6021      	streq	r1, [r4, #0]
 800a0e0:	e7ed      	b.n	800a0be <_free_r+0x1e>
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	b10b      	cbz	r3, 800a0ec <_free_r+0x4c>
 800a0e8:	42a3      	cmp	r3, r4
 800a0ea:	d9fa      	bls.n	800a0e2 <_free_r+0x42>
 800a0ec:	6811      	ldr	r1, [r2, #0]
 800a0ee:	1850      	adds	r0, r2, r1
 800a0f0:	42a0      	cmp	r0, r4
 800a0f2:	d10b      	bne.n	800a10c <_free_r+0x6c>
 800a0f4:	6820      	ldr	r0, [r4, #0]
 800a0f6:	4401      	add	r1, r0
 800a0f8:	1850      	adds	r0, r2, r1
 800a0fa:	4283      	cmp	r3, r0
 800a0fc:	6011      	str	r1, [r2, #0]
 800a0fe:	d1e0      	bne.n	800a0c2 <_free_r+0x22>
 800a100:	6818      	ldr	r0, [r3, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	6053      	str	r3, [r2, #4]
 800a106:	4408      	add	r0, r1
 800a108:	6010      	str	r0, [r2, #0]
 800a10a:	e7da      	b.n	800a0c2 <_free_r+0x22>
 800a10c:	d902      	bls.n	800a114 <_free_r+0x74>
 800a10e:	230c      	movs	r3, #12
 800a110:	602b      	str	r3, [r5, #0]
 800a112:	e7d6      	b.n	800a0c2 <_free_r+0x22>
 800a114:	6820      	ldr	r0, [r4, #0]
 800a116:	1821      	adds	r1, r4, r0
 800a118:	428b      	cmp	r3, r1
 800a11a:	bf04      	itt	eq
 800a11c:	6819      	ldreq	r1, [r3, #0]
 800a11e:	685b      	ldreq	r3, [r3, #4]
 800a120:	6063      	str	r3, [r4, #4]
 800a122:	bf04      	itt	eq
 800a124:	1809      	addeq	r1, r1, r0
 800a126:	6021      	streq	r1, [r4, #0]
 800a128:	6054      	str	r4, [r2, #4]
 800a12a:	e7ca      	b.n	800a0c2 <_free_r+0x22>
 800a12c:	bd38      	pop	{r3, r4, r5, pc}
 800a12e:	bf00      	nop
 800a130:	20009970 	.word	0x20009970

0800a134 <malloc>:
 800a134:	4b02      	ldr	r3, [pc, #8]	@ (800a140 <malloc+0xc>)
 800a136:	4601      	mov	r1, r0
 800a138:	6818      	ldr	r0, [r3, #0]
 800a13a:	f000 b825 	b.w	800a188 <_malloc_r>
 800a13e:	bf00      	nop
 800a140:	20000050 	.word	0x20000050

0800a144 <sbrk_aligned>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	4e0f      	ldr	r6, [pc, #60]	@ (800a184 <sbrk_aligned+0x40>)
 800a148:	460c      	mov	r4, r1
 800a14a:	6831      	ldr	r1, [r6, #0]
 800a14c:	4605      	mov	r5, r0
 800a14e:	b911      	cbnz	r1, 800a156 <sbrk_aligned+0x12>
 800a150:	f000 fe58 	bl	800ae04 <_sbrk_r>
 800a154:	6030      	str	r0, [r6, #0]
 800a156:	4621      	mov	r1, r4
 800a158:	4628      	mov	r0, r5
 800a15a:	f000 fe53 	bl	800ae04 <_sbrk_r>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	d103      	bne.n	800a16a <sbrk_aligned+0x26>
 800a162:	f04f 34ff 	mov.w	r4, #4294967295
 800a166:	4620      	mov	r0, r4
 800a168:	bd70      	pop	{r4, r5, r6, pc}
 800a16a:	1cc4      	adds	r4, r0, #3
 800a16c:	f024 0403 	bic.w	r4, r4, #3
 800a170:	42a0      	cmp	r0, r4
 800a172:	d0f8      	beq.n	800a166 <sbrk_aligned+0x22>
 800a174:	1a21      	subs	r1, r4, r0
 800a176:	4628      	mov	r0, r5
 800a178:	f000 fe44 	bl	800ae04 <_sbrk_r>
 800a17c:	3001      	adds	r0, #1
 800a17e:	d1f2      	bne.n	800a166 <sbrk_aligned+0x22>
 800a180:	e7ef      	b.n	800a162 <sbrk_aligned+0x1e>
 800a182:	bf00      	nop
 800a184:	2000996c 	.word	0x2000996c

0800a188 <_malloc_r>:
 800a188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a18c:	1ccd      	adds	r5, r1, #3
 800a18e:	f025 0503 	bic.w	r5, r5, #3
 800a192:	3508      	adds	r5, #8
 800a194:	2d0c      	cmp	r5, #12
 800a196:	bf38      	it	cc
 800a198:	250c      	movcc	r5, #12
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	4606      	mov	r6, r0
 800a19e:	db01      	blt.n	800a1a4 <_malloc_r+0x1c>
 800a1a0:	42a9      	cmp	r1, r5
 800a1a2:	d904      	bls.n	800a1ae <_malloc_r+0x26>
 800a1a4:	230c      	movs	r3, #12
 800a1a6:	6033      	str	r3, [r6, #0]
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a284 <_malloc_r+0xfc>
 800a1b2:	f000 f869 	bl	800a288 <__malloc_lock>
 800a1b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a1ba:	461c      	mov	r4, r3
 800a1bc:	bb44      	cbnz	r4, 800a210 <_malloc_r+0x88>
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff ffbf 	bl	800a144 <sbrk_aligned>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	d158      	bne.n	800a27e <_malloc_r+0xf6>
 800a1cc:	f8d8 4000 	ldr.w	r4, [r8]
 800a1d0:	4627      	mov	r7, r4
 800a1d2:	2f00      	cmp	r7, #0
 800a1d4:	d143      	bne.n	800a25e <_malloc_r+0xd6>
 800a1d6:	2c00      	cmp	r4, #0
 800a1d8:	d04b      	beq.n	800a272 <_malloc_r+0xea>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	4639      	mov	r1, r7
 800a1de:	4630      	mov	r0, r6
 800a1e0:	eb04 0903 	add.w	r9, r4, r3
 800a1e4:	f000 fe0e 	bl	800ae04 <_sbrk_r>
 800a1e8:	4581      	cmp	r9, r0
 800a1ea:	d142      	bne.n	800a272 <_malloc_r+0xea>
 800a1ec:	6821      	ldr	r1, [r4, #0]
 800a1ee:	1a6d      	subs	r5, r5, r1
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f7ff ffa6 	bl	800a144 <sbrk_aligned>
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d03a      	beq.n	800a272 <_malloc_r+0xea>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	442b      	add	r3, r5
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	f8d8 3000 	ldr.w	r3, [r8]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	bb62      	cbnz	r2, 800a264 <_malloc_r+0xdc>
 800a20a:	f8c8 7000 	str.w	r7, [r8]
 800a20e:	e00f      	b.n	800a230 <_malloc_r+0xa8>
 800a210:	6822      	ldr	r2, [r4, #0]
 800a212:	1b52      	subs	r2, r2, r5
 800a214:	d420      	bmi.n	800a258 <_malloc_r+0xd0>
 800a216:	2a0b      	cmp	r2, #11
 800a218:	d917      	bls.n	800a24a <_malloc_r+0xc2>
 800a21a:	1961      	adds	r1, r4, r5
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	6025      	str	r5, [r4, #0]
 800a220:	bf18      	it	ne
 800a222:	6059      	strne	r1, [r3, #4]
 800a224:	6863      	ldr	r3, [r4, #4]
 800a226:	bf08      	it	eq
 800a228:	f8c8 1000 	streq.w	r1, [r8]
 800a22c:	5162      	str	r2, [r4, r5]
 800a22e:	604b      	str	r3, [r1, #4]
 800a230:	4630      	mov	r0, r6
 800a232:	f000 f82f 	bl	800a294 <__malloc_unlock>
 800a236:	f104 000b 	add.w	r0, r4, #11
 800a23a:	1d23      	adds	r3, r4, #4
 800a23c:	f020 0007 	bic.w	r0, r0, #7
 800a240:	1ac2      	subs	r2, r0, r3
 800a242:	bf1c      	itt	ne
 800a244:	1a1b      	subne	r3, r3, r0
 800a246:	50a3      	strne	r3, [r4, r2]
 800a248:	e7af      	b.n	800a1aa <_malloc_r+0x22>
 800a24a:	6862      	ldr	r2, [r4, #4]
 800a24c:	42a3      	cmp	r3, r4
 800a24e:	bf0c      	ite	eq
 800a250:	f8c8 2000 	streq.w	r2, [r8]
 800a254:	605a      	strne	r2, [r3, #4]
 800a256:	e7eb      	b.n	800a230 <_malloc_r+0xa8>
 800a258:	4623      	mov	r3, r4
 800a25a:	6864      	ldr	r4, [r4, #4]
 800a25c:	e7ae      	b.n	800a1bc <_malloc_r+0x34>
 800a25e:	463c      	mov	r4, r7
 800a260:	687f      	ldr	r7, [r7, #4]
 800a262:	e7b6      	b.n	800a1d2 <_malloc_r+0x4a>
 800a264:	461a      	mov	r2, r3
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	42a3      	cmp	r3, r4
 800a26a:	d1fb      	bne.n	800a264 <_malloc_r+0xdc>
 800a26c:	2300      	movs	r3, #0
 800a26e:	6053      	str	r3, [r2, #4]
 800a270:	e7de      	b.n	800a230 <_malloc_r+0xa8>
 800a272:	230c      	movs	r3, #12
 800a274:	6033      	str	r3, [r6, #0]
 800a276:	4630      	mov	r0, r6
 800a278:	f000 f80c 	bl	800a294 <__malloc_unlock>
 800a27c:	e794      	b.n	800a1a8 <_malloc_r+0x20>
 800a27e:	6005      	str	r5, [r0, #0]
 800a280:	e7d6      	b.n	800a230 <_malloc_r+0xa8>
 800a282:	bf00      	nop
 800a284:	20009970 	.word	0x20009970

0800a288 <__malloc_lock>:
 800a288:	4801      	ldr	r0, [pc, #4]	@ (800a290 <__malloc_lock+0x8>)
 800a28a:	f7ff b884 	b.w	8009396 <__retarget_lock_acquire_recursive>
 800a28e:	bf00      	nop
 800a290:	20009968 	.word	0x20009968

0800a294 <__malloc_unlock>:
 800a294:	4801      	ldr	r0, [pc, #4]	@ (800a29c <__malloc_unlock+0x8>)
 800a296:	f7ff b87f 	b.w	8009398 <__retarget_lock_release_recursive>
 800a29a:	bf00      	nop
 800a29c:	20009968 	.word	0x20009968

0800a2a0 <_Balloc>:
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	69c6      	ldr	r6, [r0, #28]
 800a2a4:	4604      	mov	r4, r0
 800a2a6:	460d      	mov	r5, r1
 800a2a8:	b976      	cbnz	r6, 800a2c8 <_Balloc+0x28>
 800a2aa:	2010      	movs	r0, #16
 800a2ac:	f7ff ff42 	bl	800a134 <malloc>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	61e0      	str	r0, [r4, #28]
 800a2b4:	b920      	cbnz	r0, 800a2c0 <_Balloc+0x20>
 800a2b6:	4b18      	ldr	r3, [pc, #96]	@ (800a318 <_Balloc+0x78>)
 800a2b8:	4818      	ldr	r0, [pc, #96]	@ (800a31c <_Balloc+0x7c>)
 800a2ba:	216b      	movs	r1, #107	@ 0x6b
 800a2bc:	f7ff f884 	bl	80093c8 <__assert_func>
 800a2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2c4:	6006      	str	r6, [r0, #0]
 800a2c6:	60c6      	str	r6, [r0, #12]
 800a2c8:	69e6      	ldr	r6, [r4, #28]
 800a2ca:	68f3      	ldr	r3, [r6, #12]
 800a2cc:	b183      	cbz	r3, 800a2f0 <_Balloc+0x50>
 800a2ce:	69e3      	ldr	r3, [r4, #28]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2d6:	b9b8      	cbnz	r0, 800a308 <_Balloc+0x68>
 800a2d8:	2101      	movs	r1, #1
 800a2da:	fa01 f605 	lsl.w	r6, r1, r5
 800a2de:	1d72      	adds	r2, r6, #5
 800a2e0:	0092      	lsls	r2, r2, #2
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f000 fda5 	bl	800ae32 <_calloc_r>
 800a2e8:	b160      	cbz	r0, 800a304 <_Balloc+0x64>
 800a2ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2ee:	e00e      	b.n	800a30e <_Balloc+0x6e>
 800a2f0:	2221      	movs	r2, #33	@ 0x21
 800a2f2:	2104      	movs	r1, #4
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f000 fd9c 	bl	800ae32 <_calloc_r>
 800a2fa:	69e3      	ldr	r3, [r4, #28]
 800a2fc:	60f0      	str	r0, [r6, #12]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e4      	bne.n	800a2ce <_Balloc+0x2e>
 800a304:	2000      	movs	r0, #0
 800a306:	bd70      	pop	{r4, r5, r6, pc}
 800a308:	6802      	ldr	r2, [r0, #0]
 800a30a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a30e:	2300      	movs	r3, #0
 800a310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a314:	e7f7      	b.n	800a306 <_Balloc+0x66>
 800a316:	bf00      	nop
 800a318:	0800b7c9 	.word	0x0800b7c9
 800a31c:	0800b8ec 	.word	0x0800b8ec

0800a320 <_Bfree>:
 800a320:	b570      	push	{r4, r5, r6, lr}
 800a322:	69c6      	ldr	r6, [r0, #28]
 800a324:	4605      	mov	r5, r0
 800a326:	460c      	mov	r4, r1
 800a328:	b976      	cbnz	r6, 800a348 <_Bfree+0x28>
 800a32a:	2010      	movs	r0, #16
 800a32c:	f7ff ff02 	bl	800a134 <malloc>
 800a330:	4602      	mov	r2, r0
 800a332:	61e8      	str	r0, [r5, #28]
 800a334:	b920      	cbnz	r0, 800a340 <_Bfree+0x20>
 800a336:	4b09      	ldr	r3, [pc, #36]	@ (800a35c <_Bfree+0x3c>)
 800a338:	4809      	ldr	r0, [pc, #36]	@ (800a360 <_Bfree+0x40>)
 800a33a:	218f      	movs	r1, #143	@ 0x8f
 800a33c:	f7ff f844 	bl	80093c8 <__assert_func>
 800a340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a344:	6006      	str	r6, [r0, #0]
 800a346:	60c6      	str	r6, [r0, #12]
 800a348:	b13c      	cbz	r4, 800a35a <_Bfree+0x3a>
 800a34a:	69eb      	ldr	r3, [r5, #28]
 800a34c:	6862      	ldr	r2, [r4, #4]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a354:	6021      	str	r1, [r4, #0]
 800a356:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	0800b7c9 	.word	0x0800b7c9
 800a360:	0800b8ec 	.word	0x0800b8ec

0800a364 <__multadd>:
 800a364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a368:	690d      	ldr	r5, [r1, #16]
 800a36a:	4607      	mov	r7, r0
 800a36c:	460c      	mov	r4, r1
 800a36e:	461e      	mov	r6, r3
 800a370:	f101 0c14 	add.w	ip, r1, #20
 800a374:	2000      	movs	r0, #0
 800a376:	f8dc 3000 	ldr.w	r3, [ip]
 800a37a:	b299      	uxth	r1, r3
 800a37c:	fb02 6101 	mla	r1, r2, r1, r6
 800a380:	0c1e      	lsrs	r6, r3, #16
 800a382:	0c0b      	lsrs	r3, r1, #16
 800a384:	fb02 3306 	mla	r3, r2, r6, r3
 800a388:	b289      	uxth	r1, r1
 800a38a:	3001      	adds	r0, #1
 800a38c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a390:	4285      	cmp	r5, r0
 800a392:	f84c 1b04 	str.w	r1, [ip], #4
 800a396:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a39a:	dcec      	bgt.n	800a376 <__multadd+0x12>
 800a39c:	b30e      	cbz	r6, 800a3e2 <__multadd+0x7e>
 800a39e:	68a3      	ldr	r3, [r4, #8]
 800a3a0:	42ab      	cmp	r3, r5
 800a3a2:	dc19      	bgt.n	800a3d8 <__multadd+0x74>
 800a3a4:	6861      	ldr	r1, [r4, #4]
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	3101      	adds	r1, #1
 800a3aa:	f7ff ff79 	bl	800a2a0 <_Balloc>
 800a3ae:	4680      	mov	r8, r0
 800a3b0:	b928      	cbnz	r0, 800a3be <__multadd+0x5a>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e8 <__multadd+0x84>)
 800a3b6:	480d      	ldr	r0, [pc, #52]	@ (800a3ec <__multadd+0x88>)
 800a3b8:	21ba      	movs	r1, #186	@ 0xba
 800a3ba:	f7ff f805 	bl	80093c8 <__assert_func>
 800a3be:	6922      	ldr	r2, [r4, #16]
 800a3c0:	3202      	adds	r2, #2
 800a3c2:	f104 010c 	add.w	r1, r4, #12
 800a3c6:	0092      	lsls	r2, r2, #2
 800a3c8:	300c      	adds	r0, #12
 800a3ca:	f7fe ffee 	bl	80093aa <memcpy>
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f7ff ffa5 	bl	800a320 <_Bfree>
 800a3d6:	4644      	mov	r4, r8
 800a3d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3dc:	3501      	adds	r5, #1
 800a3de:	615e      	str	r6, [r3, #20]
 800a3e0:	6125      	str	r5, [r4, #16]
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e8:	0800b8db 	.word	0x0800b8db
 800a3ec:	0800b8ec 	.word	0x0800b8ec

0800a3f0 <__hi0bits>:
 800a3f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	bf36      	itet	cc
 800a3f8:	0403      	lslcc	r3, r0, #16
 800a3fa:	2000      	movcs	r0, #0
 800a3fc:	2010      	movcc	r0, #16
 800a3fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a402:	bf3c      	itt	cc
 800a404:	021b      	lslcc	r3, r3, #8
 800a406:	3008      	addcc	r0, #8
 800a408:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a40c:	bf3c      	itt	cc
 800a40e:	011b      	lslcc	r3, r3, #4
 800a410:	3004      	addcc	r0, #4
 800a412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a416:	bf3c      	itt	cc
 800a418:	009b      	lslcc	r3, r3, #2
 800a41a:	3002      	addcc	r0, #2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	db05      	blt.n	800a42c <__hi0bits+0x3c>
 800a420:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a424:	f100 0001 	add.w	r0, r0, #1
 800a428:	bf08      	it	eq
 800a42a:	2020      	moveq	r0, #32
 800a42c:	4770      	bx	lr

0800a42e <__lo0bits>:
 800a42e:	6803      	ldr	r3, [r0, #0]
 800a430:	4602      	mov	r2, r0
 800a432:	f013 0007 	ands.w	r0, r3, #7
 800a436:	d00b      	beq.n	800a450 <__lo0bits+0x22>
 800a438:	07d9      	lsls	r1, r3, #31
 800a43a:	d421      	bmi.n	800a480 <__lo0bits+0x52>
 800a43c:	0798      	lsls	r0, r3, #30
 800a43e:	bf49      	itett	mi
 800a440:	085b      	lsrmi	r3, r3, #1
 800a442:	089b      	lsrpl	r3, r3, #2
 800a444:	2001      	movmi	r0, #1
 800a446:	6013      	strmi	r3, [r2, #0]
 800a448:	bf5c      	itt	pl
 800a44a:	6013      	strpl	r3, [r2, #0]
 800a44c:	2002      	movpl	r0, #2
 800a44e:	4770      	bx	lr
 800a450:	b299      	uxth	r1, r3
 800a452:	b909      	cbnz	r1, 800a458 <__lo0bits+0x2a>
 800a454:	0c1b      	lsrs	r3, r3, #16
 800a456:	2010      	movs	r0, #16
 800a458:	b2d9      	uxtb	r1, r3
 800a45a:	b909      	cbnz	r1, 800a460 <__lo0bits+0x32>
 800a45c:	3008      	adds	r0, #8
 800a45e:	0a1b      	lsrs	r3, r3, #8
 800a460:	0719      	lsls	r1, r3, #28
 800a462:	bf04      	itt	eq
 800a464:	091b      	lsreq	r3, r3, #4
 800a466:	3004      	addeq	r0, #4
 800a468:	0799      	lsls	r1, r3, #30
 800a46a:	bf04      	itt	eq
 800a46c:	089b      	lsreq	r3, r3, #2
 800a46e:	3002      	addeq	r0, #2
 800a470:	07d9      	lsls	r1, r3, #31
 800a472:	d403      	bmi.n	800a47c <__lo0bits+0x4e>
 800a474:	085b      	lsrs	r3, r3, #1
 800a476:	f100 0001 	add.w	r0, r0, #1
 800a47a:	d003      	beq.n	800a484 <__lo0bits+0x56>
 800a47c:	6013      	str	r3, [r2, #0]
 800a47e:	4770      	bx	lr
 800a480:	2000      	movs	r0, #0
 800a482:	4770      	bx	lr
 800a484:	2020      	movs	r0, #32
 800a486:	4770      	bx	lr

0800a488 <__i2b>:
 800a488:	b510      	push	{r4, lr}
 800a48a:	460c      	mov	r4, r1
 800a48c:	2101      	movs	r1, #1
 800a48e:	f7ff ff07 	bl	800a2a0 <_Balloc>
 800a492:	4602      	mov	r2, r0
 800a494:	b928      	cbnz	r0, 800a4a2 <__i2b+0x1a>
 800a496:	4b05      	ldr	r3, [pc, #20]	@ (800a4ac <__i2b+0x24>)
 800a498:	4805      	ldr	r0, [pc, #20]	@ (800a4b0 <__i2b+0x28>)
 800a49a:	f240 1145 	movw	r1, #325	@ 0x145
 800a49e:	f7fe ff93 	bl	80093c8 <__assert_func>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	6144      	str	r4, [r0, #20]
 800a4a6:	6103      	str	r3, [r0, #16]
 800a4a8:	bd10      	pop	{r4, pc}
 800a4aa:	bf00      	nop
 800a4ac:	0800b8db 	.word	0x0800b8db
 800a4b0:	0800b8ec 	.word	0x0800b8ec

0800a4b4 <__multiply>:
 800a4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b8:	4614      	mov	r4, r2
 800a4ba:	690a      	ldr	r2, [r1, #16]
 800a4bc:	6923      	ldr	r3, [r4, #16]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	bfa8      	it	ge
 800a4c2:	4623      	movge	r3, r4
 800a4c4:	460f      	mov	r7, r1
 800a4c6:	bfa4      	itt	ge
 800a4c8:	460c      	movge	r4, r1
 800a4ca:	461f      	movge	r7, r3
 800a4cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a4d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a4d4:	68a3      	ldr	r3, [r4, #8]
 800a4d6:	6861      	ldr	r1, [r4, #4]
 800a4d8:	eb0a 0609 	add.w	r6, sl, r9
 800a4dc:	42b3      	cmp	r3, r6
 800a4de:	b085      	sub	sp, #20
 800a4e0:	bfb8      	it	lt
 800a4e2:	3101      	addlt	r1, #1
 800a4e4:	f7ff fedc 	bl	800a2a0 <_Balloc>
 800a4e8:	b930      	cbnz	r0, 800a4f8 <__multiply+0x44>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	4b44      	ldr	r3, [pc, #272]	@ (800a600 <__multiply+0x14c>)
 800a4ee:	4845      	ldr	r0, [pc, #276]	@ (800a604 <__multiply+0x150>)
 800a4f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4f4:	f7fe ff68 	bl	80093c8 <__assert_func>
 800a4f8:	f100 0514 	add.w	r5, r0, #20
 800a4fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a500:	462b      	mov	r3, r5
 800a502:	2200      	movs	r2, #0
 800a504:	4543      	cmp	r3, r8
 800a506:	d321      	bcc.n	800a54c <__multiply+0x98>
 800a508:	f107 0114 	add.w	r1, r7, #20
 800a50c:	f104 0214 	add.w	r2, r4, #20
 800a510:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a514:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a518:	9302      	str	r3, [sp, #8]
 800a51a:	1b13      	subs	r3, r2, r4
 800a51c:	3b15      	subs	r3, #21
 800a51e:	f023 0303 	bic.w	r3, r3, #3
 800a522:	3304      	adds	r3, #4
 800a524:	f104 0715 	add.w	r7, r4, #21
 800a528:	42ba      	cmp	r2, r7
 800a52a:	bf38      	it	cc
 800a52c:	2304      	movcc	r3, #4
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	9b02      	ldr	r3, [sp, #8]
 800a532:	9103      	str	r1, [sp, #12]
 800a534:	428b      	cmp	r3, r1
 800a536:	d80c      	bhi.n	800a552 <__multiply+0x9e>
 800a538:	2e00      	cmp	r6, #0
 800a53a:	dd03      	ble.n	800a544 <__multiply+0x90>
 800a53c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a540:	2b00      	cmp	r3, #0
 800a542:	d05b      	beq.n	800a5fc <__multiply+0x148>
 800a544:	6106      	str	r6, [r0, #16]
 800a546:	b005      	add	sp, #20
 800a548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54c:	f843 2b04 	str.w	r2, [r3], #4
 800a550:	e7d8      	b.n	800a504 <__multiply+0x50>
 800a552:	f8b1 a000 	ldrh.w	sl, [r1]
 800a556:	f1ba 0f00 	cmp.w	sl, #0
 800a55a:	d024      	beq.n	800a5a6 <__multiply+0xf2>
 800a55c:	f104 0e14 	add.w	lr, r4, #20
 800a560:	46a9      	mov	r9, r5
 800a562:	f04f 0c00 	mov.w	ip, #0
 800a566:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a56a:	f8d9 3000 	ldr.w	r3, [r9]
 800a56e:	fa1f fb87 	uxth.w	fp, r7
 800a572:	b29b      	uxth	r3, r3
 800a574:	fb0a 330b 	mla	r3, sl, fp, r3
 800a578:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a57c:	f8d9 7000 	ldr.w	r7, [r9]
 800a580:	4463      	add	r3, ip
 800a582:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a586:	fb0a c70b 	mla	r7, sl, fp, ip
 800a58a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a58e:	b29b      	uxth	r3, r3
 800a590:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a594:	4572      	cmp	r2, lr
 800a596:	f849 3b04 	str.w	r3, [r9], #4
 800a59a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a59e:	d8e2      	bhi.n	800a566 <__multiply+0xb2>
 800a5a0:	9b01      	ldr	r3, [sp, #4]
 800a5a2:	f845 c003 	str.w	ip, [r5, r3]
 800a5a6:	9b03      	ldr	r3, [sp, #12]
 800a5a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a5ac:	3104      	adds	r1, #4
 800a5ae:	f1b9 0f00 	cmp.w	r9, #0
 800a5b2:	d021      	beq.n	800a5f8 <__multiply+0x144>
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	f104 0c14 	add.w	ip, r4, #20
 800a5ba:	46ae      	mov	lr, r5
 800a5bc:	f04f 0a00 	mov.w	sl, #0
 800a5c0:	f8bc b000 	ldrh.w	fp, [ip]
 800a5c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a5c8:	fb09 770b 	mla	r7, r9, fp, r7
 800a5cc:	4457      	add	r7, sl
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5d4:	f84e 3b04 	str.w	r3, [lr], #4
 800a5d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5e0:	f8be 3000 	ldrh.w	r3, [lr]
 800a5e4:	fb09 330a 	mla	r3, r9, sl, r3
 800a5e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a5ec:	4562      	cmp	r2, ip
 800a5ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5f2:	d8e5      	bhi.n	800a5c0 <__multiply+0x10c>
 800a5f4:	9f01      	ldr	r7, [sp, #4]
 800a5f6:	51eb      	str	r3, [r5, r7]
 800a5f8:	3504      	adds	r5, #4
 800a5fa:	e799      	b.n	800a530 <__multiply+0x7c>
 800a5fc:	3e01      	subs	r6, #1
 800a5fe:	e79b      	b.n	800a538 <__multiply+0x84>
 800a600:	0800b8db 	.word	0x0800b8db
 800a604:	0800b8ec 	.word	0x0800b8ec

0800a608 <__pow5mult>:
 800a608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a60c:	4615      	mov	r5, r2
 800a60e:	f012 0203 	ands.w	r2, r2, #3
 800a612:	4607      	mov	r7, r0
 800a614:	460e      	mov	r6, r1
 800a616:	d007      	beq.n	800a628 <__pow5mult+0x20>
 800a618:	4c25      	ldr	r4, [pc, #148]	@ (800a6b0 <__pow5mult+0xa8>)
 800a61a:	3a01      	subs	r2, #1
 800a61c:	2300      	movs	r3, #0
 800a61e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a622:	f7ff fe9f 	bl	800a364 <__multadd>
 800a626:	4606      	mov	r6, r0
 800a628:	10ad      	asrs	r5, r5, #2
 800a62a:	d03d      	beq.n	800a6a8 <__pow5mult+0xa0>
 800a62c:	69fc      	ldr	r4, [r7, #28]
 800a62e:	b97c      	cbnz	r4, 800a650 <__pow5mult+0x48>
 800a630:	2010      	movs	r0, #16
 800a632:	f7ff fd7f 	bl	800a134 <malloc>
 800a636:	4602      	mov	r2, r0
 800a638:	61f8      	str	r0, [r7, #28]
 800a63a:	b928      	cbnz	r0, 800a648 <__pow5mult+0x40>
 800a63c:	4b1d      	ldr	r3, [pc, #116]	@ (800a6b4 <__pow5mult+0xac>)
 800a63e:	481e      	ldr	r0, [pc, #120]	@ (800a6b8 <__pow5mult+0xb0>)
 800a640:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a644:	f7fe fec0 	bl	80093c8 <__assert_func>
 800a648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a64c:	6004      	str	r4, [r0, #0]
 800a64e:	60c4      	str	r4, [r0, #12]
 800a650:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a658:	b94c      	cbnz	r4, 800a66e <__pow5mult+0x66>
 800a65a:	f240 2171 	movw	r1, #625	@ 0x271
 800a65e:	4638      	mov	r0, r7
 800a660:	f7ff ff12 	bl	800a488 <__i2b>
 800a664:	2300      	movs	r3, #0
 800a666:	f8c8 0008 	str.w	r0, [r8, #8]
 800a66a:	4604      	mov	r4, r0
 800a66c:	6003      	str	r3, [r0, #0]
 800a66e:	f04f 0900 	mov.w	r9, #0
 800a672:	07eb      	lsls	r3, r5, #31
 800a674:	d50a      	bpl.n	800a68c <__pow5mult+0x84>
 800a676:	4631      	mov	r1, r6
 800a678:	4622      	mov	r2, r4
 800a67a:	4638      	mov	r0, r7
 800a67c:	f7ff ff1a 	bl	800a4b4 <__multiply>
 800a680:	4631      	mov	r1, r6
 800a682:	4680      	mov	r8, r0
 800a684:	4638      	mov	r0, r7
 800a686:	f7ff fe4b 	bl	800a320 <_Bfree>
 800a68a:	4646      	mov	r6, r8
 800a68c:	106d      	asrs	r5, r5, #1
 800a68e:	d00b      	beq.n	800a6a8 <__pow5mult+0xa0>
 800a690:	6820      	ldr	r0, [r4, #0]
 800a692:	b938      	cbnz	r0, 800a6a4 <__pow5mult+0x9c>
 800a694:	4622      	mov	r2, r4
 800a696:	4621      	mov	r1, r4
 800a698:	4638      	mov	r0, r7
 800a69a:	f7ff ff0b 	bl	800a4b4 <__multiply>
 800a69e:	6020      	str	r0, [r4, #0]
 800a6a0:	f8c0 9000 	str.w	r9, [r0]
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	e7e4      	b.n	800a672 <__pow5mult+0x6a>
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ae:	bf00      	nop
 800a6b0:	0800b948 	.word	0x0800b948
 800a6b4:	0800b7c9 	.word	0x0800b7c9
 800a6b8:	0800b8ec 	.word	0x0800b8ec

0800a6bc <__lshift>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	6849      	ldr	r1, [r1, #4]
 800a6c4:	6923      	ldr	r3, [r4, #16]
 800a6c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6ca:	68a3      	ldr	r3, [r4, #8]
 800a6cc:	4607      	mov	r7, r0
 800a6ce:	4691      	mov	r9, r2
 800a6d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6d4:	f108 0601 	add.w	r6, r8, #1
 800a6d8:	42b3      	cmp	r3, r6
 800a6da:	db0b      	blt.n	800a6f4 <__lshift+0x38>
 800a6dc:	4638      	mov	r0, r7
 800a6de:	f7ff fddf 	bl	800a2a0 <_Balloc>
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	b948      	cbnz	r0, 800a6fa <__lshift+0x3e>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	4b28      	ldr	r3, [pc, #160]	@ (800a78c <__lshift+0xd0>)
 800a6ea:	4829      	ldr	r0, [pc, #164]	@ (800a790 <__lshift+0xd4>)
 800a6ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6f0:	f7fe fe6a 	bl	80093c8 <__assert_func>
 800a6f4:	3101      	adds	r1, #1
 800a6f6:	005b      	lsls	r3, r3, #1
 800a6f8:	e7ee      	b.n	800a6d8 <__lshift+0x1c>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f100 0114 	add.w	r1, r0, #20
 800a700:	f100 0210 	add.w	r2, r0, #16
 800a704:	4618      	mov	r0, r3
 800a706:	4553      	cmp	r3, sl
 800a708:	db33      	blt.n	800a772 <__lshift+0xb6>
 800a70a:	6920      	ldr	r0, [r4, #16]
 800a70c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a710:	f104 0314 	add.w	r3, r4, #20
 800a714:	f019 091f 	ands.w	r9, r9, #31
 800a718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a71c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a720:	d02b      	beq.n	800a77a <__lshift+0xbe>
 800a722:	f1c9 0e20 	rsb	lr, r9, #32
 800a726:	468a      	mov	sl, r1
 800a728:	2200      	movs	r2, #0
 800a72a:	6818      	ldr	r0, [r3, #0]
 800a72c:	fa00 f009 	lsl.w	r0, r0, r9
 800a730:	4310      	orrs	r0, r2
 800a732:	f84a 0b04 	str.w	r0, [sl], #4
 800a736:	f853 2b04 	ldr.w	r2, [r3], #4
 800a73a:	459c      	cmp	ip, r3
 800a73c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a740:	d8f3      	bhi.n	800a72a <__lshift+0x6e>
 800a742:	ebac 0304 	sub.w	r3, ip, r4
 800a746:	3b15      	subs	r3, #21
 800a748:	f023 0303 	bic.w	r3, r3, #3
 800a74c:	3304      	adds	r3, #4
 800a74e:	f104 0015 	add.w	r0, r4, #21
 800a752:	4584      	cmp	ip, r0
 800a754:	bf38      	it	cc
 800a756:	2304      	movcc	r3, #4
 800a758:	50ca      	str	r2, [r1, r3]
 800a75a:	b10a      	cbz	r2, 800a760 <__lshift+0xa4>
 800a75c:	f108 0602 	add.w	r6, r8, #2
 800a760:	3e01      	subs	r6, #1
 800a762:	4638      	mov	r0, r7
 800a764:	612e      	str	r6, [r5, #16]
 800a766:	4621      	mov	r1, r4
 800a768:	f7ff fdda 	bl	800a320 <_Bfree>
 800a76c:	4628      	mov	r0, r5
 800a76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a772:	f842 0f04 	str.w	r0, [r2, #4]!
 800a776:	3301      	adds	r3, #1
 800a778:	e7c5      	b.n	800a706 <__lshift+0x4a>
 800a77a:	3904      	subs	r1, #4
 800a77c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a780:	f841 2f04 	str.w	r2, [r1, #4]!
 800a784:	459c      	cmp	ip, r3
 800a786:	d8f9      	bhi.n	800a77c <__lshift+0xc0>
 800a788:	e7ea      	b.n	800a760 <__lshift+0xa4>
 800a78a:	bf00      	nop
 800a78c:	0800b8db 	.word	0x0800b8db
 800a790:	0800b8ec 	.word	0x0800b8ec

0800a794 <__mcmp>:
 800a794:	690a      	ldr	r2, [r1, #16]
 800a796:	4603      	mov	r3, r0
 800a798:	6900      	ldr	r0, [r0, #16]
 800a79a:	1a80      	subs	r0, r0, r2
 800a79c:	b530      	push	{r4, r5, lr}
 800a79e:	d10e      	bne.n	800a7be <__mcmp+0x2a>
 800a7a0:	3314      	adds	r3, #20
 800a7a2:	3114      	adds	r1, #20
 800a7a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a7a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a7ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7b4:	4295      	cmp	r5, r2
 800a7b6:	d003      	beq.n	800a7c0 <__mcmp+0x2c>
 800a7b8:	d205      	bcs.n	800a7c6 <__mcmp+0x32>
 800a7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a7be:	bd30      	pop	{r4, r5, pc}
 800a7c0:	42a3      	cmp	r3, r4
 800a7c2:	d3f3      	bcc.n	800a7ac <__mcmp+0x18>
 800a7c4:	e7fb      	b.n	800a7be <__mcmp+0x2a>
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	e7f9      	b.n	800a7be <__mcmp+0x2a>
	...

0800a7cc <__mdiff>:
 800a7cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	4689      	mov	r9, r1
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	4648      	mov	r0, r9
 800a7d8:	4614      	mov	r4, r2
 800a7da:	f7ff ffdb 	bl	800a794 <__mcmp>
 800a7de:	1e05      	subs	r5, r0, #0
 800a7e0:	d112      	bne.n	800a808 <__mdiff+0x3c>
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f7ff fd5b 	bl	800a2a0 <_Balloc>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	b928      	cbnz	r0, 800a7fa <__mdiff+0x2e>
 800a7ee:	4b3f      	ldr	r3, [pc, #252]	@ (800a8ec <__mdiff+0x120>)
 800a7f0:	f240 2137 	movw	r1, #567	@ 0x237
 800a7f4:	483e      	ldr	r0, [pc, #248]	@ (800a8f0 <__mdiff+0x124>)
 800a7f6:	f7fe fde7 	bl	80093c8 <__assert_func>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a800:	4610      	mov	r0, r2
 800a802:	b003      	add	sp, #12
 800a804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a808:	bfbc      	itt	lt
 800a80a:	464b      	movlt	r3, r9
 800a80c:	46a1      	movlt	r9, r4
 800a80e:	4630      	mov	r0, r6
 800a810:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a814:	bfba      	itte	lt
 800a816:	461c      	movlt	r4, r3
 800a818:	2501      	movlt	r5, #1
 800a81a:	2500      	movge	r5, #0
 800a81c:	f7ff fd40 	bl	800a2a0 <_Balloc>
 800a820:	4602      	mov	r2, r0
 800a822:	b918      	cbnz	r0, 800a82c <__mdiff+0x60>
 800a824:	4b31      	ldr	r3, [pc, #196]	@ (800a8ec <__mdiff+0x120>)
 800a826:	f240 2145 	movw	r1, #581	@ 0x245
 800a82a:	e7e3      	b.n	800a7f4 <__mdiff+0x28>
 800a82c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a830:	6926      	ldr	r6, [r4, #16]
 800a832:	60c5      	str	r5, [r0, #12]
 800a834:	f109 0310 	add.w	r3, r9, #16
 800a838:	f109 0514 	add.w	r5, r9, #20
 800a83c:	f104 0e14 	add.w	lr, r4, #20
 800a840:	f100 0b14 	add.w	fp, r0, #20
 800a844:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a848:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	46d9      	mov	r9, fp
 800a850:	f04f 0c00 	mov.w	ip, #0
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a85a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a85e:	9301      	str	r3, [sp, #4]
 800a860:	fa1f f38a 	uxth.w	r3, sl
 800a864:	4619      	mov	r1, r3
 800a866:	b283      	uxth	r3, r0
 800a868:	1acb      	subs	r3, r1, r3
 800a86a:	0c00      	lsrs	r0, r0, #16
 800a86c:	4463      	add	r3, ip
 800a86e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a872:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a876:	b29b      	uxth	r3, r3
 800a878:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a87c:	4576      	cmp	r6, lr
 800a87e:	f849 3b04 	str.w	r3, [r9], #4
 800a882:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a886:	d8e5      	bhi.n	800a854 <__mdiff+0x88>
 800a888:	1b33      	subs	r3, r6, r4
 800a88a:	3b15      	subs	r3, #21
 800a88c:	f023 0303 	bic.w	r3, r3, #3
 800a890:	3415      	adds	r4, #21
 800a892:	3304      	adds	r3, #4
 800a894:	42a6      	cmp	r6, r4
 800a896:	bf38      	it	cc
 800a898:	2304      	movcc	r3, #4
 800a89a:	441d      	add	r5, r3
 800a89c:	445b      	add	r3, fp
 800a89e:	461e      	mov	r6, r3
 800a8a0:	462c      	mov	r4, r5
 800a8a2:	4544      	cmp	r4, r8
 800a8a4:	d30e      	bcc.n	800a8c4 <__mdiff+0xf8>
 800a8a6:	f108 0103 	add.w	r1, r8, #3
 800a8aa:	1b49      	subs	r1, r1, r5
 800a8ac:	f021 0103 	bic.w	r1, r1, #3
 800a8b0:	3d03      	subs	r5, #3
 800a8b2:	45a8      	cmp	r8, r5
 800a8b4:	bf38      	it	cc
 800a8b6:	2100      	movcc	r1, #0
 800a8b8:	440b      	add	r3, r1
 800a8ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8be:	b191      	cbz	r1, 800a8e6 <__mdiff+0x11a>
 800a8c0:	6117      	str	r7, [r2, #16]
 800a8c2:	e79d      	b.n	800a800 <__mdiff+0x34>
 800a8c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a8c8:	46e6      	mov	lr, ip
 800a8ca:	0c08      	lsrs	r0, r1, #16
 800a8cc:	fa1c fc81 	uxtah	ip, ip, r1
 800a8d0:	4471      	add	r1, lr
 800a8d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a8d6:	b289      	uxth	r1, r1
 800a8d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8dc:	f846 1b04 	str.w	r1, [r6], #4
 800a8e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8e4:	e7dd      	b.n	800a8a2 <__mdiff+0xd6>
 800a8e6:	3f01      	subs	r7, #1
 800a8e8:	e7e7      	b.n	800a8ba <__mdiff+0xee>
 800a8ea:	bf00      	nop
 800a8ec:	0800b8db 	.word	0x0800b8db
 800a8f0:	0800b8ec 	.word	0x0800b8ec

0800a8f4 <__d2b>:
 800a8f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8f8:	460f      	mov	r7, r1
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	ec59 8b10 	vmov	r8, r9, d0
 800a900:	4616      	mov	r6, r2
 800a902:	f7ff fccd 	bl	800a2a0 <_Balloc>
 800a906:	4604      	mov	r4, r0
 800a908:	b930      	cbnz	r0, 800a918 <__d2b+0x24>
 800a90a:	4602      	mov	r2, r0
 800a90c:	4b23      	ldr	r3, [pc, #140]	@ (800a99c <__d2b+0xa8>)
 800a90e:	4824      	ldr	r0, [pc, #144]	@ (800a9a0 <__d2b+0xac>)
 800a910:	f240 310f 	movw	r1, #783	@ 0x30f
 800a914:	f7fe fd58 	bl	80093c8 <__assert_func>
 800a918:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a91c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a920:	b10d      	cbz	r5, 800a926 <__d2b+0x32>
 800a922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a926:	9301      	str	r3, [sp, #4]
 800a928:	f1b8 0300 	subs.w	r3, r8, #0
 800a92c:	d023      	beq.n	800a976 <__d2b+0x82>
 800a92e:	4668      	mov	r0, sp
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	f7ff fd7c 	bl	800a42e <__lo0bits>
 800a936:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a93a:	b1d0      	cbz	r0, 800a972 <__d2b+0x7e>
 800a93c:	f1c0 0320 	rsb	r3, r0, #32
 800a940:	fa02 f303 	lsl.w	r3, r2, r3
 800a944:	430b      	orrs	r3, r1
 800a946:	40c2      	lsrs	r2, r0
 800a948:	6163      	str	r3, [r4, #20]
 800a94a:	9201      	str	r2, [sp, #4]
 800a94c:	9b01      	ldr	r3, [sp, #4]
 800a94e:	61a3      	str	r3, [r4, #24]
 800a950:	2b00      	cmp	r3, #0
 800a952:	bf0c      	ite	eq
 800a954:	2201      	moveq	r2, #1
 800a956:	2202      	movne	r2, #2
 800a958:	6122      	str	r2, [r4, #16]
 800a95a:	b1a5      	cbz	r5, 800a986 <__d2b+0x92>
 800a95c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a960:	4405      	add	r5, r0
 800a962:	603d      	str	r5, [r7, #0]
 800a964:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a968:	6030      	str	r0, [r6, #0]
 800a96a:	4620      	mov	r0, r4
 800a96c:	b003      	add	sp, #12
 800a96e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a972:	6161      	str	r1, [r4, #20]
 800a974:	e7ea      	b.n	800a94c <__d2b+0x58>
 800a976:	a801      	add	r0, sp, #4
 800a978:	f7ff fd59 	bl	800a42e <__lo0bits>
 800a97c:	9b01      	ldr	r3, [sp, #4]
 800a97e:	6163      	str	r3, [r4, #20]
 800a980:	3020      	adds	r0, #32
 800a982:	2201      	movs	r2, #1
 800a984:	e7e8      	b.n	800a958 <__d2b+0x64>
 800a986:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a98a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a98e:	6038      	str	r0, [r7, #0]
 800a990:	6918      	ldr	r0, [r3, #16]
 800a992:	f7ff fd2d 	bl	800a3f0 <__hi0bits>
 800a996:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a99a:	e7e5      	b.n	800a968 <__d2b+0x74>
 800a99c:	0800b8db 	.word	0x0800b8db
 800a9a0:	0800b8ec 	.word	0x0800b8ec

0800a9a4 <__ssputs_r>:
 800a9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a8:	688e      	ldr	r6, [r1, #8]
 800a9aa:	461f      	mov	r7, r3
 800a9ac:	42be      	cmp	r6, r7
 800a9ae:	680b      	ldr	r3, [r1, #0]
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	4690      	mov	r8, r2
 800a9b6:	d82d      	bhi.n	800aa14 <__ssputs_r+0x70>
 800a9b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a9c0:	d026      	beq.n	800aa10 <__ssputs_r+0x6c>
 800a9c2:	6965      	ldr	r5, [r4, #20]
 800a9c4:	6909      	ldr	r1, [r1, #16]
 800a9c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9ca:	eba3 0901 	sub.w	r9, r3, r1
 800a9ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9d2:	1c7b      	adds	r3, r7, #1
 800a9d4:	444b      	add	r3, r9
 800a9d6:	106d      	asrs	r5, r5, #1
 800a9d8:	429d      	cmp	r5, r3
 800a9da:	bf38      	it	cc
 800a9dc:	461d      	movcc	r5, r3
 800a9de:	0553      	lsls	r3, r2, #21
 800a9e0:	d527      	bpl.n	800aa32 <__ssputs_r+0x8e>
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	f7ff fbd0 	bl	800a188 <_malloc_r>
 800a9e8:	4606      	mov	r6, r0
 800a9ea:	b360      	cbz	r0, 800aa46 <__ssputs_r+0xa2>
 800a9ec:	6921      	ldr	r1, [r4, #16]
 800a9ee:	464a      	mov	r2, r9
 800a9f0:	f7fe fcdb 	bl	80093aa <memcpy>
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9fe:	81a3      	strh	r3, [r4, #12]
 800aa00:	6126      	str	r6, [r4, #16]
 800aa02:	6165      	str	r5, [r4, #20]
 800aa04:	444e      	add	r6, r9
 800aa06:	eba5 0509 	sub.w	r5, r5, r9
 800aa0a:	6026      	str	r6, [r4, #0]
 800aa0c:	60a5      	str	r5, [r4, #8]
 800aa0e:	463e      	mov	r6, r7
 800aa10:	42be      	cmp	r6, r7
 800aa12:	d900      	bls.n	800aa16 <__ssputs_r+0x72>
 800aa14:	463e      	mov	r6, r7
 800aa16:	6820      	ldr	r0, [r4, #0]
 800aa18:	4632      	mov	r2, r6
 800aa1a:	4641      	mov	r1, r8
 800aa1c:	f000 f9d8 	bl	800add0 <memmove>
 800aa20:	68a3      	ldr	r3, [r4, #8]
 800aa22:	1b9b      	subs	r3, r3, r6
 800aa24:	60a3      	str	r3, [r4, #8]
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	4433      	add	r3, r6
 800aa2a:	6023      	str	r3, [r4, #0]
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa32:	462a      	mov	r2, r5
 800aa34:	f000 fa23 	bl	800ae7e <_realloc_r>
 800aa38:	4606      	mov	r6, r0
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d1e0      	bne.n	800aa00 <__ssputs_r+0x5c>
 800aa3e:	6921      	ldr	r1, [r4, #16]
 800aa40:	4650      	mov	r0, sl
 800aa42:	f7ff fb2d 	bl	800a0a0 <_free_r>
 800aa46:	230c      	movs	r3, #12
 800aa48:	f8ca 3000 	str.w	r3, [sl]
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa52:	81a3      	strh	r3, [r4, #12]
 800aa54:	f04f 30ff 	mov.w	r0, #4294967295
 800aa58:	e7e9      	b.n	800aa2e <__ssputs_r+0x8a>
	...

0800aa5c <_svfiprintf_r>:
 800aa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa60:	4698      	mov	r8, r3
 800aa62:	898b      	ldrh	r3, [r1, #12]
 800aa64:	061b      	lsls	r3, r3, #24
 800aa66:	b09d      	sub	sp, #116	@ 0x74
 800aa68:	4607      	mov	r7, r0
 800aa6a:	460d      	mov	r5, r1
 800aa6c:	4614      	mov	r4, r2
 800aa6e:	d510      	bpl.n	800aa92 <_svfiprintf_r+0x36>
 800aa70:	690b      	ldr	r3, [r1, #16]
 800aa72:	b973      	cbnz	r3, 800aa92 <_svfiprintf_r+0x36>
 800aa74:	2140      	movs	r1, #64	@ 0x40
 800aa76:	f7ff fb87 	bl	800a188 <_malloc_r>
 800aa7a:	6028      	str	r0, [r5, #0]
 800aa7c:	6128      	str	r0, [r5, #16]
 800aa7e:	b930      	cbnz	r0, 800aa8e <_svfiprintf_r+0x32>
 800aa80:	230c      	movs	r3, #12
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	f04f 30ff 	mov.w	r0, #4294967295
 800aa88:	b01d      	add	sp, #116	@ 0x74
 800aa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8e:	2340      	movs	r3, #64	@ 0x40
 800aa90:	616b      	str	r3, [r5, #20]
 800aa92:	2300      	movs	r3, #0
 800aa94:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa96:	2320      	movs	r3, #32
 800aa98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaa0:	2330      	movs	r3, #48	@ 0x30
 800aaa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac40 <_svfiprintf_r+0x1e4>
 800aaa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aaaa:	f04f 0901 	mov.w	r9, #1
 800aaae:	4623      	mov	r3, r4
 800aab0:	469a      	mov	sl, r3
 800aab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aab6:	b10a      	cbz	r2, 800aabc <_svfiprintf_r+0x60>
 800aab8:	2a25      	cmp	r2, #37	@ 0x25
 800aaba:	d1f9      	bne.n	800aab0 <_svfiprintf_r+0x54>
 800aabc:	ebba 0b04 	subs.w	fp, sl, r4
 800aac0:	d00b      	beq.n	800aada <_svfiprintf_r+0x7e>
 800aac2:	465b      	mov	r3, fp
 800aac4:	4622      	mov	r2, r4
 800aac6:	4629      	mov	r1, r5
 800aac8:	4638      	mov	r0, r7
 800aaca:	f7ff ff6b 	bl	800a9a4 <__ssputs_r>
 800aace:	3001      	adds	r0, #1
 800aad0:	f000 80a7 	beq.w	800ac22 <_svfiprintf_r+0x1c6>
 800aad4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aad6:	445a      	add	r2, fp
 800aad8:	9209      	str	r2, [sp, #36]	@ 0x24
 800aada:	f89a 3000 	ldrb.w	r3, [sl]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 809f 	beq.w	800ac22 <_svfiprintf_r+0x1c6>
 800aae4:	2300      	movs	r3, #0
 800aae6:	f04f 32ff 	mov.w	r2, #4294967295
 800aaea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaee:	f10a 0a01 	add.w	sl, sl, #1
 800aaf2:	9304      	str	r3, [sp, #16]
 800aaf4:	9307      	str	r3, [sp, #28]
 800aaf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aafa:	931a      	str	r3, [sp, #104]	@ 0x68
 800aafc:	4654      	mov	r4, sl
 800aafe:	2205      	movs	r2, #5
 800ab00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab04:	484e      	ldr	r0, [pc, #312]	@ (800ac40 <_svfiprintf_r+0x1e4>)
 800ab06:	f7f5 fb6b 	bl	80001e0 <memchr>
 800ab0a:	9a04      	ldr	r2, [sp, #16]
 800ab0c:	b9d8      	cbnz	r0, 800ab46 <_svfiprintf_r+0xea>
 800ab0e:	06d0      	lsls	r0, r2, #27
 800ab10:	bf44      	itt	mi
 800ab12:	2320      	movmi	r3, #32
 800ab14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab18:	0711      	lsls	r1, r2, #28
 800ab1a:	bf44      	itt	mi
 800ab1c:	232b      	movmi	r3, #43	@ 0x2b
 800ab1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab22:	f89a 3000 	ldrb.w	r3, [sl]
 800ab26:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab28:	d015      	beq.n	800ab56 <_svfiprintf_r+0xfa>
 800ab2a:	9a07      	ldr	r2, [sp, #28]
 800ab2c:	4654      	mov	r4, sl
 800ab2e:	2000      	movs	r0, #0
 800ab30:	f04f 0c0a 	mov.w	ip, #10
 800ab34:	4621      	mov	r1, r4
 800ab36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab3a:	3b30      	subs	r3, #48	@ 0x30
 800ab3c:	2b09      	cmp	r3, #9
 800ab3e:	d94b      	bls.n	800abd8 <_svfiprintf_r+0x17c>
 800ab40:	b1b0      	cbz	r0, 800ab70 <_svfiprintf_r+0x114>
 800ab42:	9207      	str	r2, [sp, #28]
 800ab44:	e014      	b.n	800ab70 <_svfiprintf_r+0x114>
 800ab46:	eba0 0308 	sub.w	r3, r0, r8
 800ab4a:	fa09 f303 	lsl.w	r3, r9, r3
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	46a2      	mov	sl, r4
 800ab54:	e7d2      	b.n	800aafc <_svfiprintf_r+0xa0>
 800ab56:	9b03      	ldr	r3, [sp, #12]
 800ab58:	1d19      	adds	r1, r3, #4
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	9103      	str	r1, [sp, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bfbb      	ittet	lt
 800ab62:	425b      	neglt	r3, r3
 800ab64:	f042 0202 	orrlt.w	r2, r2, #2
 800ab68:	9307      	strge	r3, [sp, #28]
 800ab6a:	9307      	strlt	r3, [sp, #28]
 800ab6c:	bfb8      	it	lt
 800ab6e:	9204      	strlt	r2, [sp, #16]
 800ab70:	7823      	ldrb	r3, [r4, #0]
 800ab72:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab74:	d10a      	bne.n	800ab8c <_svfiprintf_r+0x130>
 800ab76:	7863      	ldrb	r3, [r4, #1]
 800ab78:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab7a:	d132      	bne.n	800abe2 <_svfiprintf_r+0x186>
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	1d1a      	adds	r2, r3, #4
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	9203      	str	r2, [sp, #12]
 800ab84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab88:	3402      	adds	r4, #2
 800ab8a:	9305      	str	r3, [sp, #20]
 800ab8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac50 <_svfiprintf_r+0x1f4>
 800ab90:	7821      	ldrb	r1, [r4, #0]
 800ab92:	2203      	movs	r2, #3
 800ab94:	4650      	mov	r0, sl
 800ab96:	f7f5 fb23 	bl	80001e0 <memchr>
 800ab9a:	b138      	cbz	r0, 800abac <_svfiprintf_r+0x150>
 800ab9c:	9b04      	ldr	r3, [sp, #16]
 800ab9e:	eba0 000a 	sub.w	r0, r0, sl
 800aba2:	2240      	movs	r2, #64	@ 0x40
 800aba4:	4082      	lsls	r2, r0
 800aba6:	4313      	orrs	r3, r2
 800aba8:	3401      	adds	r4, #1
 800abaa:	9304      	str	r3, [sp, #16]
 800abac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb0:	4824      	ldr	r0, [pc, #144]	@ (800ac44 <_svfiprintf_r+0x1e8>)
 800abb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abb6:	2206      	movs	r2, #6
 800abb8:	f7f5 fb12 	bl	80001e0 <memchr>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d036      	beq.n	800ac2e <_svfiprintf_r+0x1d2>
 800abc0:	4b21      	ldr	r3, [pc, #132]	@ (800ac48 <_svfiprintf_r+0x1ec>)
 800abc2:	bb1b      	cbnz	r3, 800ac0c <_svfiprintf_r+0x1b0>
 800abc4:	9b03      	ldr	r3, [sp, #12]
 800abc6:	3307      	adds	r3, #7
 800abc8:	f023 0307 	bic.w	r3, r3, #7
 800abcc:	3308      	adds	r3, #8
 800abce:	9303      	str	r3, [sp, #12]
 800abd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd2:	4433      	add	r3, r6
 800abd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800abd6:	e76a      	b.n	800aaae <_svfiprintf_r+0x52>
 800abd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800abdc:	460c      	mov	r4, r1
 800abde:	2001      	movs	r0, #1
 800abe0:	e7a8      	b.n	800ab34 <_svfiprintf_r+0xd8>
 800abe2:	2300      	movs	r3, #0
 800abe4:	3401      	adds	r4, #1
 800abe6:	9305      	str	r3, [sp, #20]
 800abe8:	4619      	mov	r1, r3
 800abea:	f04f 0c0a 	mov.w	ip, #10
 800abee:	4620      	mov	r0, r4
 800abf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abf4:	3a30      	subs	r2, #48	@ 0x30
 800abf6:	2a09      	cmp	r2, #9
 800abf8:	d903      	bls.n	800ac02 <_svfiprintf_r+0x1a6>
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0c6      	beq.n	800ab8c <_svfiprintf_r+0x130>
 800abfe:	9105      	str	r1, [sp, #20]
 800ac00:	e7c4      	b.n	800ab8c <_svfiprintf_r+0x130>
 800ac02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac06:	4604      	mov	r4, r0
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e7f0      	b.n	800abee <_svfiprintf_r+0x192>
 800ac0c:	ab03      	add	r3, sp, #12
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	462a      	mov	r2, r5
 800ac12:	4b0e      	ldr	r3, [pc, #56]	@ (800ac4c <_svfiprintf_r+0x1f0>)
 800ac14:	a904      	add	r1, sp, #16
 800ac16:	4638      	mov	r0, r7
 800ac18:	f7fd fd46 	bl	80086a8 <_printf_float>
 800ac1c:	1c42      	adds	r2, r0, #1
 800ac1e:	4606      	mov	r6, r0
 800ac20:	d1d6      	bne.n	800abd0 <_svfiprintf_r+0x174>
 800ac22:	89ab      	ldrh	r3, [r5, #12]
 800ac24:	065b      	lsls	r3, r3, #25
 800ac26:	f53f af2d 	bmi.w	800aa84 <_svfiprintf_r+0x28>
 800ac2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac2c:	e72c      	b.n	800aa88 <_svfiprintf_r+0x2c>
 800ac2e:	ab03      	add	r3, sp, #12
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	462a      	mov	r2, r5
 800ac34:	4b05      	ldr	r3, [pc, #20]	@ (800ac4c <_svfiprintf_r+0x1f0>)
 800ac36:	a904      	add	r1, sp, #16
 800ac38:	4638      	mov	r0, r7
 800ac3a:	f7fd ffcd 	bl	8008bd8 <_printf_i>
 800ac3e:	e7ed      	b.n	800ac1c <_svfiprintf_r+0x1c0>
 800ac40:	0800ba48 	.word	0x0800ba48
 800ac44:	0800ba52 	.word	0x0800ba52
 800ac48:	080086a9 	.word	0x080086a9
 800ac4c:	0800a9a5 	.word	0x0800a9a5
 800ac50:	0800ba4e 	.word	0x0800ba4e

0800ac54 <__sflush_r>:
 800ac54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5c:	0716      	lsls	r6, r2, #28
 800ac5e:	4605      	mov	r5, r0
 800ac60:	460c      	mov	r4, r1
 800ac62:	d454      	bmi.n	800ad0e <__sflush_r+0xba>
 800ac64:	684b      	ldr	r3, [r1, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	dc02      	bgt.n	800ac70 <__sflush_r+0x1c>
 800ac6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	dd48      	ble.n	800ad02 <__sflush_r+0xae>
 800ac70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac72:	2e00      	cmp	r6, #0
 800ac74:	d045      	beq.n	800ad02 <__sflush_r+0xae>
 800ac76:	2300      	movs	r3, #0
 800ac78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac7c:	682f      	ldr	r7, [r5, #0]
 800ac7e:	6a21      	ldr	r1, [r4, #32]
 800ac80:	602b      	str	r3, [r5, #0]
 800ac82:	d030      	beq.n	800ace6 <__sflush_r+0x92>
 800ac84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	0759      	lsls	r1, r3, #29
 800ac8a:	d505      	bpl.n	800ac98 <__sflush_r+0x44>
 800ac8c:	6863      	ldr	r3, [r4, #4]
 800ac8e:	1ad2      	subs	r2, r2, r3
 800ac90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac92:	b10b      	cbz	r3, 800ac98 <__sflush_r+0x44>
 800ac94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac96:	1ad2      	subs	r2, r2, r3
 800ac98:	2300      	movs	r3, #0
 800ac9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac9c:	6a21      	ldr	r1, [r4, #32]
 800ac9e:	4628      	mov	r0, r5
 800aca0:	47b0      	blx	r6
 800aca2:	1c43      	adds	r3, r0, #1
 800aca4:	89a3      	ldrh	r3, [r4, #12]
 800aca6:	d106      	bne.n	800acb6 <__sflush_r+0x62>
 800aca8:	6829      	ldr	r1, [r5, #0]
 800acaa:	291d      	cmp	r1, #29
 800acac:	d82b      	bhi.n	800ad06 <__sflush_r+0xb2>
 800acae:	4a2a      	ldr	r2, [pc, #168]	@ (800ad58 <__sflush_r+0x104>)
 800acb0:	410a      	asrs	r2, r1
 800acb2:	07d6      	lsls	r6, r2, #31
 800acb4:	d427      	bmi.n	800ad06 <__sflush_r+0xb2>
 800acb6:	2200      	movs	r2, #0
 800acb8:	6062      	str	r2, [r4, #4]
 800acba:	04d9      	lsls	r1, r3, #19
 800acbc:	6922      	ldr	r2, [r4, #16]
 800acbe:	6022      	str	r2, [r4, #0]
 800acc0:	d504      	bpl.n	800accc <__sflush_r+0x78>
 800acc2:	1c42      	adds	r2, r0, #1
 800acc4:	d101      	bne.n	800acca <__sflush_r+0x76>
 800acc6:	682b      	ldr	r3, [r5, #0]
 800acc8:	b903      	cbnz	r3, 800accc <__sflush_r+0x78>
 800acca:	6560      	str	r0, [r4, #84]	@ 0x54
 800accc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acce:	602f      	str	r7, [r5, #0]
 800acd0:	b1b9      	cbz	r1, 800ad02 <__sflush_r+0xae>
 800acd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acd6:	4299      	cmp	r1, r3
 800acd8:	d002      	beq.n	800ace0 <__sflush_r+0x8c>
 800acda:	4628      	mov	r0, r5
 800acdc:	f7ff f9e0 	bl	800a0a0 <_free_r>
 800ace0:	2300      	movs	r3, #0
 800ace2:	6363      	str	r3, [r4, #52]	@ 0x34
 800ace4:	e00d      	b.n	800ad02 <__sflush_r+0xae>
 800ace6:	2301      	movs	r3, #1
 800ace8:	4628      	mov	r0, r5
 800acea:	47b0      	blx	r6
 800acec:	4602      	mov	r2, r0
 800acee:	1c50      	adds	r0, r2, #1
 800acf0:	d1c9      	bne.n	800ac86 <__sflush_r+0x32>
 800acf2:	682b      	ldr	r3, [r5, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d0c6      	beq.n	800ac86 <__sflush_r+0x32>
 800acf8:	2b1d      	cmp	r3, #29
 800acfa:	d001      	beq.n	800ad00 <__sflush_r+0xac>
 800acfc:	2b16      	cmp	r3, #22
 800acfe:	d11e      	bne.n	800ad3e <__sflush_r+0xea>
 800ad00:	602f      	str	r7, [r5, #0]
 800ad02:	2000      	movs	r0, #0
 800ad04:	e022      	b.n	800ad4c <__sflush_r+0xf8>
 800ad06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad0a:	b21b      	sxth	r3, r3
 800ad0c:	e01b      	b.n	800ad46 <__sflush_r+0xf2>
 800ad0e:	690f      	ldr	r7, [r1, #16]
 800ad10:	2f00      	cmp	r7, #0
 800ad12:	d0f6      	beq.n	800ad02 <__sflush_r+0xae>
 800ad14:	0793      	lsls	r3, r2, #30
 800ad16:	680e      	ldr	r6, [r1, #0]
 800ad18:	bf08      	it	eq
 800ad1a:	694b      	ldreq	r3, [r1, #20]
 800ad1c:	600f      	str	r7, [r1, #0]
 800ad1e:	bf18      	it	ne
 800ad20:	2300      	movne	r3, #0
 800ad22:	eba6 0807 	sub.w	r8, r6, r7
 800ad26:	608b      	str	r3, [r1, #8]
 800ad28:	f1b8 0f00 	cmp.w	r8, #0
 800ad2c:	dde9      	ble.n	800ad02 <__sflush_r+0xae>
 800ad2e:	6a21      	ldr	r1, [r4, #32]
 800ad30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ad32:	4643      	mov	r3, r8
 800ad34:	463a      	mov	r2, r7
 800ad36:	4628      	mov	r0, r5
 800ad38:	47b0      	blx	r6
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	dc08      	bgt.n	800ad50 <__sflush_r+0xfc>
 800ad3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad46:	81a3      	strh	r3, [r4, #12]
 800ad48:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad50:	4407      	add	r7, r0
 800ad52:	eba8 0800 	sub.w	r8, r8, r0
 800ad56:	e7e7      	b.n	800ad28 <__sflush_r+0xd4>
 800ad58:	dfbffffe 	.word	0xdfbffffe

0800ad5c <_fflush_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	690b      	ldr	r3, [r1, #16]
 800ad60:	4605      	mov	r5, r0
 800ad62:	460c      	mov	r4, r1
 800ad64:	b913      	cbnz	r3, 800ad6c <_fflush_r+0x10>
 800ad66:	2500      	movs	r5, #0
 800ad68:	4628      	mov	r0, r5
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	b118      	cbz	r0, 800ad76 <_fflush_r+0x1a>
 800ad6e:	6a03      	ldr	r3, [r0, #32]
 800ad70:	b90b      	cbnz	r3, 800ad76 <_fflush_r+0x1a>
 800ad72:	f7fe f8dd 	bl	8008f30 <__sinit>
 800ad76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0f3      	beq.n	800ad66 <_fflush_r+0xa>
 800ad7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad80:	07d0      	lsls	r0, r2, #31
 800ad82:	d404      	bmi.n	800ad8e <_fflush_r+0x32>
 800ad84:	0599      	lsls	r1, r3, #22
 800ad86:	d402      	bmi.n	800ad8e <_fflush_r+0x32>
 800ad88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad8a:	f7fe fb04 	bl	8009396 <__retarget_lock_acquire_recursive>
 800ad8e:	4628      	mov	r0, r5
 800ad90:	4621      	mov	r1, r4
 800ad92:	f7ff ff5f 	bl	800ac54 <__sflush_r>
 800ad96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad98:	07da      	lsls	r2, r3, #31
 800ad9a:	4605      	mov	r5, r0
 800ad9c:	d4e4      	bmi.n	800ad68 <_fflush_r+0xc>
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	059b      	lsls	r3, r3, #22
 800ada2:	d4e1      	bmi.n	800ad68 <_fflush_r+0xc>
 800ada4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ada6:	f7fe faf7 	bl	8009398 <__retarget_lock_release_recursive>
 800adaa:	e7dd      	b.n	800ad68 <_fflush_r+0xc>

0800adac <fiprintf>:
 800adac:	b40e      	push	{r1, r2, r3}
 800adae:	b503      	push	{r0, r1, lr}
 800adb0:	4601      	mov	r1, r0
 800adb2:	ab03      	add	r3, sp, #12
 800adb4:	4805      	ldr	r0, [pc, #20]	@ (800adcc <fiprintf+0x20>)
 800adb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adba:	6800      	ldr	r0, [r0, #0]
 800adbc:	9301      	str	r3, [sp, #4]
 800adbe:	f000 f8c3 	bl	800af48 <_vfiprintf_r>
 800adc2:	b002      	add	sp, #8
 800adc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adc8:	b003      	add	sp, #12
 800adca:	4770      	bx	lr
 800adcc:	20000050 	.word	0x20000050

0800add0 <memmove>:
 800add0:	4288      	cmp	r0, r1
 800add2:	b510      	push	{r4, lr}
 800add4:	eb01 0402 	add.w	r4, r1, r2
 800add8:	d902      	bls.n	800ade0 <memmove+0x10>
 800adda:	4284      	cmp	r4, r0
 800addc:	4623      	mov	r3, r4
 800adde:	d807      	bhi.n	800adf0 <memmove+0x20>
 800ade0:	1e43      	subs	r3, r0, #1
 800ade2:	42a1      	cmp	r1, r4
 800ade4:	d008      	beq.n	800adf8 <memmove+0x28>
 800ade6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adee:	e7f8      	b.n	800ade2 <memmove+0x12>
 800adf0:	4402      	add	r2, r0
 800adf2:	4601      	mov	r1, r0
 800adf4:	428a      	cmp	r2, r1
 800adf6:	d100      	bne.n	800adfa <memmove+0x2a>
 800adf8:	bd10      	pop	{r4, pc}
 800adfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae02:	e7f7      	b.n	800adf4 <memmove+0x24>

0800ae04 <_sbrk_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4d06      	ldr	r5, [pc, #24]	@ (800ae20 <_sbrk_r+0x1c>)
 800ae08:	2300      	movs	r3, #0
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	602b      	str	r3, [r5, #0]
 800ae10:	f7f7 fe60 	bl	8002ad4 <_sbrk>
 800ae14:	1c43      	adds	r3, r0, #1
 800ae16:	d102      	bne.n	800ae1e <_sbrk_r+0x1a>
 800ae18:	682b      	ldr	r3, [r5, #0]
 800ae1a:	b103      	cbz	r3, 800ae1e <_sbrk_r+0x1a>
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	bd38      	pop	{r3, r4, r5, pc}
 800ae20:	20009964 	.word	0x20009964

0800ae24 <abort>:
 800ae24:	b508      	push	{r3, lr}
 800ae26:	2006      	movs	r0, #6
 800ae28:	f000 fa62 	bl	800b2f0 <raise>
 800ae2c:	2001      	movs	r0, #1
 800ae2e:	f7f7 fdd9 	bl	80029e4 <_exit>

0800ae32 <_calloc_r>:
 800ae32:	b570      	push	{r4, r5, r6, lr}
 800ae34:	fba1 5402 	umull	r5, r4, r1, r2
 800ae38:	b93c      	cbnz	r4, 800ae4a <_calloc_r+0x18>
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	f7ff f9a4 	bl	800a188 <_malloc_r>
 800ae40:	4606      	mov	r6, r0
 800ae42:	b928      	cbnz	r0, 800ae50 <_calloc_r+0x1e>
 800ae44:	2600      	movs	r6, #0
 800ae46:	4630      	mov	r0, r6
 800ae48:	bd70      	pop	{r4, r5, r6, pc}
 800ae4a:	220c      	movs	r2, #12
 800ae4c:	6002      	str	r2, [r0, #0]
 800ae4e:	e7f9      	b.n	800ae44 <_calloc_r+0x12>
 800ae50:	462a      	mov	r2, r5
 800ae52:	4621      	mov	r1, r4
 800ae54:	f7fe f939 	bl	80090ca <memset>
 800ae58:	e7f5      	b.n	800ae46 <_calloc_r+0x14>

0800ae5a <__ascii_mbtowc>:
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	b901      	cbnz	r1, 800ae60 <__ascii_mbtowc+0x6>
 800ae5e:	a901      	add	r1, sp, #4
 800ae60:	b142      	cbz	r2, 800ae74 <__ascii_mbtowc+0x1a>
 800ae62:	b14b      	cbz	r3, 800ae78 <__ascii_mbtowc+0x1e>
 800ae64:	7813      	ldrb	r3, [r2, #0]
 800ae66:	600b      	str	r3, [r1, #0]
 800ae68:	7812      	ldrb	r2, [r2, #0]
 800ae6a:	1e10      	subs	r0, r2, #0
 800ae6c:	bf18      	it	ne
 800ae6e:	2001      	movne	r0, #1
 800ae70:	b002      	add	sp, #8
 800ae72:	4770      	bx	lr
 800ae74:	4610      	mov	r0, r2
 800ae76:	e7fb      	b.n	800ae70 <__ascii_mbtowc+0x16>
 800ae78:	f06f 0001 	mvn.w	r0, #1
 800ae7c:	e7f8      	b.n	800ae70 <__ascii_mbtowc+0x16>

0800ae7e <_realloc_r>:
 800ae7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae82:	4680      	mov	r8, r0
 800ae84:	4615      	mov	r5, r2
 800ae86:	460c      	mov	r4, r1
 800ae88:	b921      	cbnz	r1, 800ae94 <_realloc_r+0x16>
 800ae8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8e:	4611      	mov	r1, r2
 800ae90:	f7ff b97a 	b.w	800a188 <_malloc_r>
 800ae94:	b92a      	cbnz	r2, 800aea2 <_realloc_r+0x24>
 800ae96:	f7ff f903 	bl	800a0a0 <_free_r>
 800ae9a:	2400      	movs	r4, #0
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea2:	f000 fa41 	bl	800b328 <_malloc_usable_size_r>
 800aea6:	4285      	cmp	r5, r0
 800aea8:	4606      	mov	r6, r0
 800aeaa:	d802      	bhi.n	800aeb2 <_realloc_r+0x34>
 800aeac:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aeb0:	d8f4      	bhi.n	800ae9c <_realloc_r+0x1e>
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	4640      	mov	r0, r8
 800aeb6:	f7ff f967 	bl	800a188 <_malloc_r>
 800aeba:	4607      	mov	r7, r0
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d0ec      	beq.n	800ae9a <_realloc_r+0x1c>
 800aec0:	42b5      	cmp	r5, r6
 800aec2:	462a      	mov	r2, r5
 800aec4:	4621      	mov	r1, r4
 800aec6:	bf28      	it	cs
 800aec8:	4632      	movcs	r2, r6
 800aeca:	f7fe fa6e 	bl	80093aa <memcpy>
 800aece:	4621      	mov	r1, r4
 800aed0:	4640      	mov	r0, r8
 800aed2:	f7ff f8e5 	bl	800a0a0 <_free_r>
 800aed6:	463c      	mov	r4, r7
 800aed8:	e7e0      	b.n	800ae9c <_realloc_r+0x1e>

0800aeda <__ascii_wctomb>:
 800aeda:	4603      	mov	r3, r0
 800aedc:	4608      	mov	r0, r1
 800aede:	b141      	cbz	r1, 800aef2 <__ascii_wctomb+0x18>
 800aee0:	2aff      	cmp	r2, #255	@ 0xff
 800aee2:	d904      	bls.n	800aeee <__ascii_wctomb+0x14>
 800aee4:	228a      	movs	r2, #138	@ 0x8a
 800aee6:	601a      	str	r2, [r3, #0]
 800aee8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeec:	4770      	bx	lr
 800aeee:	700a      	strb	r2, [r1, #0]
 800aef0:	2001      	movs	r0, #1
 800aef2:	4770      	bx	lr

0800aef4 <__sfputc_r>:
 800aef4:	6893      	ldr	r3, [r2, #8]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	b410      	push	{r4}
 800aefc:	6093      	str	r3, [r2, #8]
 800aefe:	da08      	bge.n	800af12 <__sfputc_r+0x1e>
 800af00:	6994      	ldr	r4, [r2, #24]
 800af02:	42a3      	cmp	r3, r4
 800af04:	db01      	blt.n	800af0a <__sfputc_r+0x16>
 800af06:	290a      	cmp	r1, #10
 800af08:	d103      	bne.n	800af12 <__sfputc_r+0x1e>
 800af0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af0e:	f000 b933 	b.w	800b178 <__swbuf_r>
 800af12:	6813      	ldr	r3, [r2, #0]
 800af14:	1c58      	adds	r0, r3, #1
 800af16:	6010      	str	r0, [r2, #0]
 800af18:	7019      	strb	r1, [r3, #0]
 800af1a:	4608      	mov	r0, r1
 800af1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <__sfputs_r>:
 800af22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af24:	4606      	mov	r6, r0
 800af26:	460f      	mov	r7, r1
 800af28:	4614      	mov	r4, r2
 800af2a:	18d5      	adds	r5, r2, r3
 800af2c:	42ac      	cmp	r4, r5
 800af2e:	d101      	bne.n	800af34 <__sfputs_r+0x12>
 800af30:	2000      	movs	r0, #0
 800af32:	e007      	b.n	800af44 <__sfputs_r+0x22>
 800af34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af38:	463a      	mov	r2, r7
 800af3a:	4630      	mov	r0, r6
 800af3c:	f7ff ffda 	bl	800aef4 <__sfputc_r>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d1f3      	bne.n	800af2c <__sfputs_r+0xa>
 800af44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af48 <_vfiprintf_r>:
 800af48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	460d      	mov	r5, r1
 800af4e:	b09d      	sub	sp, #116	@ 0x74
 800af50:	4614      	mov	r4, r2
 800af52:	4698      	mov	r8, r3
 800af54:	4606      	mov	r6, r0
 800af56:	b118      	cbz	r0, 800af60 <_vfiprintf_r+0x18>
 800af58:	6a03      	ldr	r3, [r0, #32]
 800af5a:	b90b      	cbnz	r3, 800af60 <_vfiprintf_r+0x18>
 800af5c:	f7fd ffe8 	bl	8008f30 <__sinit>
 800af60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af62:	07d9      	lsls	r1, r3, #31
 800af64:	d405      	bmi.n	800af72 <_vfiprintf_r+0x2a>
 800af66:	89ab      	ldrh	r3, [r5, #12]
 800af68:	059a      	lsls	r2, r3, #22
 800af6a:	d402      	bmi.n	800af72 <_vfiprintf_r+0x2a>
 800af6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af6e:	f7fe fa12 	bl	8009396 <__retarget_lock_acquire_recursive>
 800af72:	89ab      	ldrh	r3, [r5, #12]
 800af74:	071b      	lsls	r3, r3, #28
 800af76:	d501      	bpl.n	800af7c <_vfiprintf_r+0x34>
 800af78:	692b      	ldr	r3, [r5, #16]
 800af7a:	b99b      	cbnz	r3, 800afa4 <_vfiprintf_r+0x5c>
 800af7c:	4629      	mov	r1, r5
 800af7e:	4630      	mov	r0, r6
 800af80:	f000 f938 	bl	800b1f4 <__swsetup_r>
 800af84:	b170      	cbz	r0, 800afa4 <_vfiprintf_r+0x5c>
 800af86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af88:	07dc      	lsls	r4, r3, #31
 800af8a:	d504      	bpl.n	800af96 <_vfiprintf_r+0x4e>
 800af8c:	f04f 30ff 	mov.w	r0, #4294967295
 800af90:	b01d      	add	sp, #116	@ 0x74
 800af92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af96:	89ab      	ldrh	r3, [r5, #12]
 800af98:	0598      	lsls	r0, r3, #22
 800af9a:	d4f7      	bmi.n	800af8c <_vfiprintf_r+0x44>
 800af9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af9e:	f7fe f9fb 	bl	8009398 <__retarget_lock_release_recursive>
 800afa2:	e7f3      	b.n	800af8c <_vfiprintf_r+0x44>
 800afa4:	2300      	movs	r3, #0
 800afa6:	9309      	str	r3, [sp, #36]	@ 0x24
 800afa8:	2320      	movs	r3, #32
 800afaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800afae:	f8cd 800c 	str.w	r8, [sp, #12]
 800afb2:	2330      	movs	r3, #48	@ 0x30
 800afb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b164 <_vfiprintf_r+0x21c>
 800afb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afbc:	f04f 0901 	mov.w	r9, #1
 800afc0:	4623      	mov	r3, r4
 800afc2:	469a      	mov	sl, r3
 800afc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afc8:	b10a      	cbz	r2, 800afce <_vfiprintf_r+0x86>
 800afca:	2a25      	cmp	r2, #37	@ 0x25
 800afcc:	d1f9      	bne.n	800afc2 <_vfiprintf_r+0x7a>
 800afce:	ebba 0b04 	subs.w	fp, sl, r4
 800afd2:	d00b      	beq.n	800afec <_vfiprintf_r+0xa4>
 800afd4:	465b      	mov	r3, fp
 800afd6:	4622      	mov	r2, r4
 800afd8:	4629      	mov	r1, r5
 800afda:	4630      	mov	r0, r6
 800afdc:	f7ff ffa1 	bl	800af22 <__sfputs_r>
 800afe0:	3001      	adds	r0, #1
 800afe2:	f000 80a7 	beq.w	800b134 <_vfiprintf_r+0x1ec>
 800afe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afe8:	445a      	add	r2, fp
 800afea:	9209      	str	r2, [sp, #36]	@ 0x24
 800afec:	f89a 3000 	ldrb.w	r3, [sl]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 809f 	beq.w	800b134 <_vfiprintf_r+0x1ec>
 800aff6:	2300      	movs	r3, #0
 800aff8:	f04f 32ff 	mov.w	r2, #4294967295
 800affc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b000:	f10a 0a01 	add.w	sl, sl, #1
 800b004:	9304      	str	r3, [sp, #16]
 800b006:	9307      	str	r3, [sp, #28]
 800b008:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b00c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b00e:	4654      	mov	r4, sl
 800b010:	2205      	movs	r2, #5
 800b012:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b016:	4853      	ldr	r0, [pc, #332]	@ (800b164 <_vfiprintf_r+0x21c>)
 800b018:	f7f5 f8e2 	bl	80001e0 <memchr>
 800b01c:	9a04      	ldr	r2, [sp, #16]
 800b01e:	b9d8      	cbnz	r0, 800b058 <_vfiprintf_r+0x110>
 800b020:	06d1      	lsls	r1, r2, #27
 800b022:	bf44      	itt	mi
 800b024:	2320      	movmi	r3, #32
 800b026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b02a:	0713      	lsls	r3, r2, #28
 800b02c:	bf44      	itt	mi
 800b02e:	232b      	movmi	r3, #43	@ 0x2b
 800b030:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b034:	f89a 3000 	ldrb.w	r3, [sl]
 800b038:	2b2a      	cmp	r3, #42	@ 0x2a
 800b03a:	d015      	beq.n	800b068 <_vfiprintf_r+0x120>
 800b03c:	9a07      	ldr	r2, [sp, #28]
 800b03e:	4654      	mov	r4, sl
 800b040:	2000      	movs	r0, #0
 800b042:	f04f 0c0a 	mov.w	ip, #10
 800b046:	4621      	mov	r1, r4
 800b048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b04c:	3b30      	subs	r3, #48	@ 0x30
 800b04e:	2b09      	cmp	r3, #9
 800b050:	d94b      	bls.n	800b0ea <_vfiprintf_r+0x1a2>
 800b052:	b1b0      	cbz	r0, 800b082 <_vfiprintf_r+0x13a>
 800b054:	9207      	str	r2, [sp, #28]
 800b056:	e014      	b.n	800b082 <_vfiprintf_r+0x13a>
 800b058:	eba0 0308 	sub.w	r3, r0, r8
 800b05c:	fa09 f303 	lsl.w	r3, r9, r3
 800b060:	4313      	orrs	r3, r2
 800b062:	9304      	str	r3, [sp, #16]
 800b064:	46a2      	mov	sl, r4
 800b066:	e7d2      	b.n	800b00e <_vfiprintf_r+0xc6>
 800b068:	9b03      	ldr	r3, [sp, #12]
 800b06a:	1d19      	adds	r1, r3, #4
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	9103      	str	r1, [sp, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	bfbb      	ittet	lt
 800b074:	425b      	neglt	r3, r3
 800b076:	f042 0202 	orrlt.w	r2, r2, #2
 800b07a:	9307      	strge	r3, [sp, #28]
 800b07c:	9307      	strlt	r3, [sp, #28]
 800b07e:	bfb8      	it	lt
 800b080:	9204      	strlt	r2, [sp, #16]
 800b082:	7823      	ldrb	r3, [r4, #0]
 800b084:	2b2e      	cmp	r3, #46	@ 0x2e
 800b086:	d10a      	bne.n	800b09e <_vfiprintf_r+0x156>
 800b088:	7863      	ldrb	r3, [r4, #1]
 800b08a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b08c:	d132      	bne.n	800b0f4 <_vfiprintf_r+0x1ac>
 800b08e:	9b03      	ldr	r3, [sp, #12]
 800b090:	1d1a      	adds	r2, r3, #4
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	9203      	str	r2, [sp, #12]
 800b096:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b09a:	3402      	adds	r4, #2
 800b09c:	9305      	str	r3, [sp, #20]
 800b09e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b174 <_vfiprintf_r+0x22c>
 800b0a2:	7821      	ldrb	r1, [r4, #0]
 800b0a4:	2203      	movs	r2, #3
 800b0a6:	4650      	mov	r0, sl
 800b0a8:	f7f5 f89a 	bl	80001e0 <memchr>
 800b0ac:	b138      	cbz	r0, 800b0be <_vfiprintf_r+0x176>
 800b0ae:	9b04      	ldr	r3, [sp, #16]
 800b0b0:	eba0 000a 	sub.w	r0, r0, sl
 800b0b4:	2240      	movs	r2, #64	@ 0x40
 800b0b6:	4082      	lsls	r2, r0
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	3401      	adds	r4, #1
 800b0bc:	9304      	str	r3, [sp, #16]
 800b0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c2:	4829      	ldr	r0, [pc, #164]	@ (800b168 <_vfiprintf_r+0x220>)
 800b0c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0c8:	2206      	movs	r2, #6
 800b0ca:	f7f5 f889 	bl	80001e0 <memchr>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d03f      	beq.n	800b152 <_vfiprintf_r+0x20a>
 800b0d2:	4b26      	ldr	r3, [pc, #152]	@ (800b16c <_vfiprintf_r+0x224>)
 800b0d4:	bb1b      	cbnz	r3, 800b11e <_vfiprintf_r+0x1d6>
 800b0d6:	9b03      	ldr	r3, [sp, #12]
 800b0d8:	3307      	adds	r3, #7
 800b0da:	f023 0307 	bic.w	r3, r3, #7
 800b0de:	3308      	adds	r3, #8
 800b0e0:	9303      	str	r3, [sp, #12]
 800b0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e4:	443b      	add	r3, r7
 800b0e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0e8:	e76a      	b.n	800afc0 <_vfiprintf_r+0x78>
 800b0ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	2001      	movs	r0, #1
 800b0f2:	e7a8      	b.n	800b046 <_vfiprintf_r+0xfe>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	3401      	adds	r4, #1
 800b0f8:	9305      	str	r3, [sp, #20]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	f04f 0c0a 	mov.w	ip, #10
 800b100:	4620      	mov	r0, r4
 800b102:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b106:	3a30      	subs	r2, #48	@ 0x30
 800b108:	2a09      	cmp	r2, #9
 800b10a:	d903      	bls.n	800b114 <_vfiprintf_r+0x1cc>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d0c6      	beq.n	800b09e <_vfiprintf_r+0x156>
 800b110:	9105      	str	r1, [sp, #20]
 800b112:	e7c4      	b.n	800b09e <_vfiprintf_r+0x156>
 800b114:	fb0c 2101 	mla	r1, ip, r1, r2
 800b118:	4604      	mov	r4, r0
 800b11a:	2301      	movs	r3, #1
 800b11c:	e7f0      	b.n	800b100 <_vfiprintf_r+0x1b8>
 800b11e:	ab03      	add	r3, sp, #12
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	462a      	mov	r2, r5
 800b124:	4b12      	ldr	r3, [pc, #72]	@ (800b170 <_vfiprintf_r+0x228>)
 800b126:	a904      	add	r1, sp, #16
 800b128:	4630      	mov	r0, r6
 800b12a:	f7fd fabd 	bl	80086a8 <_printf_float>
 800b12e:	4607      	mov	r7, r0
 800b130:	1c78      	adds	r0, r7, #1
 800b132:	d1d6      	bne.n	800b0e2 <_vfiprintf_r+0x19a>
 800b134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b136:	07d9      	lsls	r1, r3, #31
 800b138:	d405      	bmi.n	800b146 <_vfiprintf_r+0x1fe>
 800b13a:	89ab      	ldrh	r3, [r5, #12]
 800b13c:	059a      	lsls	r2, r3, #22
 800b13e:	d402      	bmi.n	800b146 <_vfiprintf_r+0x1fe>
 800b140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b142:	f7fe f929 	bl	8009398 <__retarget_lock_release_recursive>
 800b146:	89ab      	ldrh	r3, [r5, #12]
 800b148:	065b      	lsls	r3, r3, #25
 800b14a:	f53f af1f 	bmi.w	800af8c <_vfiprintf_r+0x44>
 800b14e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b150:	e71e      	b.n	800af90 <_vfiprintf_r+0x48>
 800b152:	ab03      	add	r3, sp, #12
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	462a      	mov	r2, r5
 800b158:	4b05      	ldr	r3, [pc, #20]	@ (800b170 <_vfiprintf_r+0x228>)
 800b15a:	a904      	add	r1, sp, #16
 800b15c:	4630      	mov	r0, r6
 800b15e:	f7fd fd3b 	bl	8008bd8 <_printf_i>
 800b162:	e7e4      	b.n	800b12e <_vfiprintf_r+0x1e6>
 800b164:	0800ba48 	.word	0x0800ba48
 800b168:	0800ba52 	.word	0x0800ba52
 800b16c:	080086a9 	.word	0x080086a9
 800b170:	0800af23 	.word	0x0800af23
 800b174:	0800ba4e 	.word	0x0800ba4e

0800b178 <__swbuf_r>:
 800b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17a:	460e      	mov	r6, r1
 800b17c:	4614      	mov	r4, r2
 800b17e:	4605      	mov	r5, r0
 800b180:	b118      	cbz	r0, 800b18a <__swbuf_r+0x12>
 800b182:	6a03      	ldr	r3, [r0, #32]
 800b184:	b90b      	cbnz	r3, 800b18a <__swbuf_r+0x12>
 800b186:	f7fd fed3 	bl	8008f30 <__sinit>
 800b18a:	69a3      	ldr	r3, [r4, #24]
 800b18c:	60a3      	str	r3, [r4, #8]
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	071a      	lsls	r2, r3, #28
 800b192:	d501      	bpl.n	800b198 <__swbuf_r+0x20>
 800b194:	6923      	ldr	r3, [r4, #16]
 800b196:	b943      	cbnz	r3, 800b1aa <__swbuf_r+0x32>
 800b198:	4621      	mov	r1, r4
 800b19a:	4628      	mov	r0, r5
 800b19c:	f000 f82a 	bl	800b1f4 <__swsetup_r>
 800b1a0:	b118      	cbz	r0, 800b1aa <__swbuf_r+0x32>
 800b1a2:	f04f 37ff 	mov.w	r7, #4294967295
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	6922      	ldr	r2, [r4, #16]
 800b1ae:	1a98      	subs	r0, r3, r2
 800b1b0:	6963      	ldr	r3, [r4, #20]
 800b1b2:	b2f6      	uxtb	r6, r6
 800b1b4:	4283      	cmp	r3, r0
 800b1b6:	4637      	mov	r7, r6
 800b1b8:	dc05      	bgt.n	800b1c6 <__swbuf_r+0x4e>
 800b1ba:	4621      	mov	r1, r4
 800b1bc:	4628      	mov	r0, r5
 800b1be:	f7ff fdcd 	bl	800ad5c <_fflush_r>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d1ed      	bne.n	800b1a2 <__swbuf_r+0x2a>
 800b1c6:	68a3      	ldr	r3, [r4, #8]
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	60a3      	str	r3, [r4, #8]
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	6022      	str	r2, [r4, #0]
 800b1d2:	701e      	strb	r6, [r3, #0]
 800b1d4:	6962      	ldr	r2, [r4, #20]
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d004      	beq.n	800b1e6 <__swbuf_r+0x6e>
 800b1dc:	89a3      	ldrh	r3, [r4, #12]
 800b1de:	07db      	lsls	r3, r3, #31
 800b1e0:	d5e1      	bpl.n	800b1a6 <__swbuf_r+0x2e>
 800b1e2:	2e0a      	cmp	r6, #10
 800b1e4:	d1df      	bne.n	800b1a6 <__swbuf_r+0x2e>
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f7ff fdb7 	bl	800ad5c <_fflush_r>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d0d9      	beq.n	800b1a6 <__swbuf_r+0x2e>
 800b1f2:	e7d6      	b.n	800b1a2 <__swbuf_r+0x2a>

0800b1f4 <__swsetup_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4b29      	ldr	r3, [pc, #164]	@ (800b29c <__swsetup_r+0xa8>)
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	6818      	ldr	r0, [r3, #0]
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	b118      	cbz	r0, 800b208 <__swsetup_r+0x14>
 800b200:	6a03      	ldr	r3, [r0, #32]
 800b202:	b90b      	cbnz	r3, 800b208 <__swsetup_r+0x14>
 800b204:	f7fd fe94 	bl	8008f30 <__sinit>
 800b208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b20c:	0719      	lsls	r1, r3, #28
 800b20e:	d422      	bmi.n	800b256 <__swsetup_r+0x62>
 800b210:	06da      	lsls	r2, r3, #27
 800b212:	d407      	bmi.n	800b224 <__swsetup_r+0x30>
 800b214:	2209      	movs	r2, #9
 800b216:	602a      	str	r2, [r5, #0]
 800b218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b21c:	81a3      	strh	r3, [r4, #12]
 800b21e:	f04f 30ff 	mov.w	r0, #4294967295
 800b222:	e033      	b.n	800b28c <__swsetup_r+0x98>
 800b224:	0758      	lsls	r0, r3, #29
 800b226:	d512      	bpl.n	800b24e <__swsetup_r+0x5a>
 800b228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b22a:	b141      	cbz	r1, 800b23e <__swsetup_r+0x4a>
 800b22c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b230:	4299      	cmp	r1, r3
 800b232:	d002      	beq.n	800b23a <__swsetup_r+0x46>
 800b234:	4628      	mov	r0, r5
 800b236:	f7fe ff33 	bl	800a0a0 <_free_r>
 800b23a:	2300      	movs	r3, #0
 800b23c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b23e:	89a3      	ldrh	r3, [r4, #12]
 800b240:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b244:	81a3      	strh	r3, [r4, #12]
 800b246:	2300      	movs	r3, #0
 800b248:	6063      	str	r3, [r4, #4]
 800b24a:	6923      	ldr	r3, [r4, #16]
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	89a3      	ldrh	r3, [r4, #12]
 800b250:	f043 0308 	orr.w	r3, r3, #8
 800b254:	81a3      	strh	r3, [r4, #12]
 800b256:	6923      	ldr	r3, [r4, #16]
 800b258:	b94b      	cbnz	r3, 800b26e <__swsetup_r+0x7a>
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b264:	d003      	beq.n	800b26e <__swsetup_r+0x7a>
 800b266:	4621      	mov	r1, r4
 800b268:	4628      	mov	r0, r5
 800b26a:	f000 f88b 	bl	800b384 <__smakebuf_r>
 800b26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b272:	f013 0201 	ands.w	r2, r3, #1
 800b276:	d00a      	beq.n	800b28e <__swsetup_r+0x9a>
 800b278:	2200      	movs	r2, #0
 800b27a:	60a2      	str	r2, [r4, #8]
 800b27c:	6962      	ldr	r2, [r4, #20]
 800b27e:	4252      	negs	r2, r2
 800b280:	61a2      	str	r2, [r4, #24]
 800b282:	6922      	ldr	r2, [r4, #16]
 800b284:	b942      	cbnz	r2, 800b298 <__swsetup_r+0xa4>
 800b286:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b28a:	d1c5      	bne.n	800b218 <__swsetup_r+0x24>
 800b28c:	bd38      	pop	{r3, r4, r5, pc}
 800b28e:	0799      	lsls	r1, r3, #30
 800b290:	bf58      	it	pl
 800b292:	6962      	ldrpl	r2, [r4, #20]
 800b294:	60a2      	str	r2, [r4, #8]
 800b296:	e7f4      	b.n	800b282 <__swsetup_r+0x8e>
 800b298:	2000      	movs	r0, #0
 800b29a:	e7f7      	b.n	800b28c <__swsetup_r+0x98>
 800b29c:	20000050 	.word	0x20000050

0800b2a0 <_raise_r>:
 800b2a0:	291f      	cmp	r1, #31
 800b2a2:	b538      	push	{r3, r4, r5, lr}
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	d904      	bls.n	800b2b4 <_raise_r+0x14>
 800b2aa:	2316      	movs	r3, #22
 800b2ac:	6003      	str	r3, [r0, #0]
 800b2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b2:	bd38      	pop	{r3, r4, r5, pc}
 800b2b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b2b6:	b112      	cbz	r2, 800b2be <_raise_r+0x1e>
 800b2b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2bc:	b94b      	cbnz	r3, 800b2d2 <_raise_r+0x32>
 800b2be:	4628      	mov	r0, r5
 800b2c0:	f000 f830 	bl	800b324 <_getpid_r>
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	4601      	mov	r1, r0
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2ce:	f000 b817 	b.w	800b300 <_kill_r>
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d00a      	beq.n	800b2ec <_raise_r+0x4c>
 800b2d6:	1c59      	adds	r1, r3, #1
 800b2d8:	d103      	bne.n	800b2e2 <_raise_r+0x42>
 800b2da:	2316      	movs	r3, #22
 800b2dc:	6003      	str	r3, [r0, #0]
 800b2de:	2001      	movs	r0, #1
 800b2e0:	e7e7      	b.n	800b2b2 <_raise_r+0x12>
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	4798      	blx	r3
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	e7e0      	b.n	800b2b2 <_raise_r+0x12>

0800b2f0 <raise>:
 800b2f0:	4b02      	ldr	r3, [pc, #8]	@ (800b2fc <raise+0xc>)
 800b2f2:	4601      	mov	r1, r0
 800b2f4:	6818      	ldr	r0, [r3, #0]
 800b2f6:	f7ff bfd3 	b.w	800b2a0 <_raise_r>
 800b2fa:	bf00      	nop
 800b2fc:	20000050 	.word	0x20000050

0800b300 <_kill_r>:
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	4d07      	ldr	r5, [pc, #28]	@ (800b320 <_kill_r+0x20>)
 800b304:	2300      	movs	r3, #0
 800b306:	4604      	mov	r4, r0
 800b308:	4608      	mov	r0, r1
 800b30a:	4611      	mov	r1, r2
 800b30c:	602b      	str	r3, [r5, #0]
 800b30e:	f7f7 fb59 	bl	80029c4 <_kill>
 800b312:	1c43      	adds	r3, r0, #1
 800b314:	d102      	bne.n	800b31c <_kill_r+0x1c>
 800b316:	682b      	ldr	r3, [r5, #0]
 800b318:	b103      	cbz	r3, 800b31c <_kill_r+0x1c>
 800b31a:	6023      	str	r3, [r4, #0]
 800b31c:	bd38      	pop	{r3, r4, r5, pc}
 800b31e:	bf00      	nop
 800b320:	20009964 	.word	0x20009964

0800b324 <_getpid_r>:
 800b324:	f7f7 bb46 	b.w	80029b4 <_getpid>

0800b328 <_malloc_usable_size_r>:
 800b328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b32c:	1f18      	subs	r0, r3, #4
 800b32e:	2b00      	cmp	r3, #0
 800b330:	bfbc      	itt	lt
 800b332:	580b      	ldrlt	r3, [r1, r0]
 800b334:	18c0      	addlt	r0, r0, r3
 800b336:	4770      	bx	lr

0800b338 <__swhatbuf_r>:
 800b338:	b570      	push	{r4, r5, r6, lr}
 800b33a:	460c      	mov	r4, r1
 800b33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b340:	2900      	cmp	r1, #0
 800b342:	b096      	sub	sp, #88	@ 0x58
 800b344:	4615      	mov	r5, r2
 800b346:	461e      	mov	r6, r3
 800b348:	da0d      	bge.n	800b366 <__swhatbuf_r+0x2e>
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b350:	f04f 0100 	mov.w	r1, #0
 800b354:	bf14      	ite	ne
 800b356:	2340      	movne	r3, #64	@ 0x40
 800b358:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b35c:	2000      	movs	r0, #0
 800b35e:	6031      	str	r1, [r6, #0]
 800b360:	602b      	str	r3, [r5, #0]
 800b362:	b016      	add	sp, #88	@ 0x58
 800b364:	bd70      	pop	{r4, r5, r6, pc}
 800b366:	466a      	mov	r2, sp
 800b368:	f000 f848 	bl	800b3fc <_fstat_r>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	dbec      	blt.n	800b34a <__swhatbuf_r+0x12>
 800b370:	9901      	ldr	r1, [sp, #4]
 800b372:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b376:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b37a:	4259      	negs	r1, r3
 800b37c:	4159      	adcs	r1, r3
 800b37e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b382:	e7eb      	b.n	800b35c <__swhatbuf_r+0x24>

0800b384 <__smakebuf_r>:
 800b384:	898b      	ldrh	r3, [r1, #12]
 800b386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b388:	079d      	lsls	r5, r3, #30
 800b38a:	4606      	mov	r6, r0
 800b38c:	460c      	mov	r4, r1
 800b38e:	d507      	bpl.n	800b3a0 <__smakebuf_r+0x1c>
 800b390:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	6123      	str	r3, [r4, #16]
 800b398:	2301      	movs	r3, #1
 800b39a:	6163      	str	r3, [r4, #20]
 800b39c:	b003      	add	sp, #12
 800b39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3a0:	ab01      	add	r3, sp, #4
 800b3a2:	466a      	mov	r2, sp
 800b3a4:	f7ff ffc8 	bl	800b338 <__swhatbuf_r>
 800b3a8:	9f00      	ldr	r7, [sp, #0]
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f7fe feea 	bl	800a188 <_malloc_r>
 800b3b4:	b948      	cbnz	r0, 800b3ca <__smakebuf_r+0x46>
 800b3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ba:	059a      	lsls	r2, r3, #22
 800b3bc:	d4ee      	bmi.n	800b39c <__smakebuf_r+0x18>
 800b3be:	f023 0303 	bic.w	r3, r3, #3
 800b3c2:	f043 0302 	orr.w	r3, r3, #2
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	e7e2      	b.n	800b390 <__smakebuf_r+0xc>
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	6020      	str	r0, [r4, #0]
 800b3ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3d2:	81a3      	strh	r3, [r4, #12]
 800b3d4:	9b01      	ldr	r3, [sp, #4]
 800b3d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b3da:	b15b      	cbz	r3, 800b3f4 <__smakebuf_r+0x70>
 800b3dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f000 f81d 	bl	800b420 <_isatty_r>
 800b3e6:	b128      	cbz	r0, 800b3f4 <__smakebuf_r+0x70>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	f023 0303 	bic.w	r3, r3, #3
 800b3ee:	f043 0301 	orr.w	r3, r3, #1
 800b3f2:	81a3      	strh	r3, [r4, #12]
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	431d      	orrs	r5, r3
 800b3f8:	81a5      	strh	r5, [r4, #12]
 800b3fa:	e7cf      	b.n	800b39c <__smakebuf_r+0x18>

0800b3fc <_fstat_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4d07      	ldr	r5, [pc, #28]	@ (800b41c <_fstat_r+0x20>)
 800b400:	2300      	movs	r3, #0
 800b402:	4604      	mov	r4, r0
 800b404:	4608      	mov	r0, r1
 800b406:	4611      	mov	r1, r2
 800b408:	602b      	str	r3, [r5, #0]
 800b40a:	f7f7 fb3b 	bl	8002a84 <_fstat>
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	d102      	bne.n	800b418 <_fstat_r+0x1c>
 800b412:	682b      	ldr	r3, [r5, #0]
 800b414:	b103      	cbz	r3, 800b418 <_fstat_r+0x1c>
 800b416:	6023      	str	r3, [r4, #0]
 800b418:	bd38      	pop	{r3, r4, r5, pc}
 800b41a:	bf00      	nop
 800b41c:	20009964 	.word	0x20009964

0800b420 <_isatty_r>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4d06      	ldr	r5, [pc, #24]	@ (800b43c <_isatty_r+0x1c>)
 800b424:	2300      	movs	r3, #0
 800b426:	4604      	mov	r4, r0
 800b428:	4608      	mov	r0, r1
 800b42a:	602b      	str	r3, [r5, #0]
 800b42c:	f7f7 fb3a 	bl	8002aa4 <_isatty>
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	d102      	bne.n	800b43a <_isatty_r+0x1a>
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	b103      	cbz	r3, 800b43a <_isatty_r+0x1a>
 800b438:	6023      	str	r3, [r4, #0]
 800b43a:	bd38      	pop	{r3, r4, r5, pc}
 800b43c:	20009964 	.word	0x20009964

0800b440 <_init>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	bf00      	nop
 800b444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b446:	bc08      	pop	{r3}
 800b448:	469e      	mov	lr, r3
 800b44a:	4770      	bx	lr

0800b44c <_fini>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	bf00      	nop
 800b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b452:	bc08      	pop	{r3}
 800b454:	469e      	mov	lr, r3
 800b456:	4770      	bx	lr
